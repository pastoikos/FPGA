# 1 "bilateralFilterKernel_HLS/bilateralFilterKernel.cpp"
# 1 "bilateralFilterKernel_HLS/bilateralFilterKernel.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 155 "<built-in>" 3
# 1 "<command line>" 1






# 1 "/tools/Xilinx/Vivado/2018.3/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 157 "/tools/Xilinx/Vivado/2018.3/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 8 "<command line>" 2
# 1 "<built-in>" 2
# 1 "bilateralFilterKernel_HLS/bilateralFilterKernel.cpp" 2

# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/kernels.h" 1
# 13 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/kernels.h"
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 1 3
# 153 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;




}
# 393 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 1 3
# 40 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 345 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 346 "/usr/include/features.h" 2 3 4
# 367 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 410 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 411 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 368 "/usr/include/features.h" 2 3 4
# 391 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 392 "/usr/include/features.h" 2 3 4
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 2 3
# 394 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 2 3


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/cpu_defines.h" 1 3
# 397 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 2 3
# 43 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 2 3
# 65 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 31 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 3 4
typedef __typeof__(((int*)0)-((int*)0)) ptrdiff_t;



typedef __typeof__(sizeof(int)) size_t;
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 61 "/usr/include/endian.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 97 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 235 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 236 "/usr/include/stdlib.h" 2 3 4



extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 59 "/usr/include/time.h" 3 4
typedef __clock_t clock_t;
# 75 "/usr/include/time.h" 3 4
typedef __time_t time_t;
# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;






# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;






# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4








typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));
# 58 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
}
# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;






# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 125 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;




    unsigned char __pad1[7];


    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 220 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 315 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));
# 466 "/usr/include/stdlib.h" 3 4
extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;
# 480 "/usr/include/stdlib.h" 3 4
extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();




# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 493 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 535 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;





extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 619 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 629 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 641 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 651 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 662 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 673 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 683 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 693 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 705 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 716 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;






extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 733 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);





extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 811 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();
# 887 "/usr/include/stdlib.h" 3 4
extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 898 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 955 "/usr/include/stdlib.h" 2 3 4
# 967 "/usr/include/stdlib.h" 3 4
}
# 66 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 2 3
# 97 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;
  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;
  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;


  inline long
  abs(long __i) { return labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }


}
# 157 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;


  inline long long
  abs(long long __x) { return __x >= 0 ? __x : -__x; }


  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 192 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;
  using ::__gnu_cxx::abs;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}
# 14 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/kernels.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h" 1
# 21 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h"
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/limits.h" 1 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/limits.h" 3
# 1 "/usr/include/limits.h" 1 3 4
# 143 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 144 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 148 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 152 "/usr/include/limits.h" 2 3 4
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/limits.h" 2 3
# 22 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h" 2

# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 105 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 208 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) throw () __attribute__ ((__nonnull__ (2)));
# 227 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) throw () __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 252 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
# 275 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) throw ();





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) throw ();




extern __mode_t getumask (void) throw ();



extern int mkdir (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) throw () __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     throw () __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) throw ();
# 398 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));
# 431 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) throw () __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     throw () __attribute__ ((__nonnull__ (3, 5)));
# 533 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
}
# 24 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h" 2
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3


# 1 "/usr/include/stdio.h" 1 3 4
# 29 "/usr/include/stdio.h" 3 4
extern "C" {




# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;
# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 1 3 4
# 30 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 3 4
typedef __builtin_va_list va_list;
# 48 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 521 "/usr/include/libio.h" 3 4
}
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 110 "/usr/include/stdio.h" 3 4
typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 195 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void) ;
# 205 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;
# 237 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 262 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 272 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 297 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();
# 356 "/usr/include/stdio.h" 3 4
extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
# 425 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 471 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 531 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 573 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);
# 622 "/usr/include/stdio.h" 3 4
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
          ;
# 638 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));
# 649 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;
# 689 "/usr/include/stdio.h" 3 4
extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 726 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);
# 749 "/usr/include/stdio.h" 3 4
extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 798 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 818 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;
# 846 "/usr/include/stdio.h" 3 4
extern void perror (const char *__s);







# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 872 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 942 "/usr/include/stdio.h" 3 4
}
# 44 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 2 3
# 91 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;
  using ::gets;
  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;
  using ::tmpnam;
  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 147 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
namespace __gnu_cxx
{
# 165 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 25 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h" 2
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 26 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h" 2
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 1 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 1 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 1 3
# 37 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 3
# 37 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 3

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 1 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 1 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    class allocator;







  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;

  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;

  typedef basic_string<wchar_t> wstring;
# 85 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 3
}
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 1 3
# 40 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
# 40 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 41 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 42 "/usr/include/wchar.h" 2 3 4
# 51 "/usr/include/wchar.h" 3 4
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 72 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 52 "/usr/include/wchar.h" 2 3 4
# 106 "/usr/include/wchar.h" 3 4
typedef __mbstate_t mbstate_t;
# 132 "/usr/include/wchar.h" 3 4
extern "C" {




struct tm;
# 147 "/usr/include/wchar.h" 3 4
extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();





extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    __locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, __locale_t __loc) throw ();





extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();
# 209 "/usr/include/wchar.h" 3 4
extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        __locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, __locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));
# 230 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __attribute__ ((__pure__));
# 240 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __attribute__ ((__pure__));






extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));
# 269 "/usr/include/wchar.h" 3 4
extern wchar_t *wcspbrk (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));
# 280 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsstr (const wchar_t *__haystack, const wchar_t *__needle)
     throw () __attribute__ ((__pure__));



extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));
# 302 "/usr/include/wchar.h" 3 4
extern wchar_t *wcswcs (const wchar_t *__haystack, const wchar_t *__needle)
     throw () __attribute__ ((__pure__));





extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));
# 323 "/usr/include/wchar.h" 3 4
extern wchar_t *wmemchr (const wchar_t *__s, wchar_t __c, size_t __n)
     throw () __attribute__ ((__pure__));



extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();





extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();






extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();
# 411 "/usr/include/wchar.h" 3 4
extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();






extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();






extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();





extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();







extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();






__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();






__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();
# 533 "/usr/include/wchar.h" 3 4
extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     __locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, __locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, __locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, __locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         __locale_t __loc) throw ();






extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();






extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();






extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;
# 692 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 748 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 804 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 830 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 840 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);







extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();







extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) throw ();
# 894 "/usr/include/wchar.h" 3 4
}
# 46 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 2 3
# 63 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 136 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }



}







namespace __gnu_cxx
{





  using ::wcstold;
# 258 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 42 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 2 3
# 69 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 89 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
  typedef long streamoff;
# 99 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 112 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 134 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 241 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
}
# 42 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 75 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 1 3
# 35 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
# 35 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 117 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx
{
# 142 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop
# 40 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 1 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 1 3
# 61 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functexcept.h" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functexcept.h" 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_defines.h" 1 3
# 42 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functexcept.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 62 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 1 3
# 36 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
# 36 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
# 68 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 198 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 422 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
}
# 63 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 1 3
# 33 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 3
# 33 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 64 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 1 3
# 32 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
# 32 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 53 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 98 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 65 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 1 3
# 60 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 1 3
# 34 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 1 3
# 33 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 3
# 33 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 3
# 35 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r)
    {
      return reinterpret_cast<_Tp*>
 (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    }


}
# 109 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 120 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {



      _Tp __tmp = (__a);
      __a = (__b);
      __b = (__tmp);
    }



  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }


}
# 61 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 86 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





                         pair()
      : first(), second() { }


                         pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


      template<class _U1, class _U2>
                    pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }
# 196 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
    };


  template<class _T1, class _T2>
    inline bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 270 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<_T1, _T2>
    make_pair(_T1 __x, _T2 __y)
    { return pair<_T1, _T2>(__x, __y); }



}
# 66 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 1 3
# 63 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
# 63 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{
# 89 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 162 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator>
    struct iterator_traits
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };



  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }





  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
    };


}
# 67 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 1 3
# 63 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
# 63 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }
# 110 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      __i += __n;
    }
# 168 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }
# 200 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
}
# 68 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 1 3
# 68 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 96 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }






      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }






      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }






      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 283 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>







    inline typename reverse_iterator<_IteratorL>::difference_type
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)

    { return __y.base() - __x.base(); }
# 395 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 422 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_back(__value);
 return *this;
      }
# 445 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 471 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 486 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 512 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_front(__value);
 return *this;
      }
# 535 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 561 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 580 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 623 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }
# 649 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 675 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 699 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

                         __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 797 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>







    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}
# 69 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/debug/debug.h" 1 3
# 47 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 71 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{





  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = (*__a);
          *__a = (*__b);
          *__b = (__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 116 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;
# 135 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);
    }
# 157 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 185 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 208 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 231 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 252 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };
# 319 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };
# 357 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 442 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 494 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };
# 522 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };
# 552 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 611 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 669 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      __builtin_memset(__first, static_cast<unsigned char>(__tmp),
         __last - __first);
    }
# 713 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 773 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {



      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)
       * (__last1 - __first1));
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = (__is_integer<_ValueType1>::__value
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }


  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 typedef typename iterator_traits<_II1>::iterator_category _Category1;
 typedef typename iterator_traits<_II2>::iterator_category _Category2;
 typedef std::__lc_rai<_Category1, _Category2> __rai_type;

 __last1 = __rai_type::__newlast1(__first1, __last1,
      __first2, __last2);
 for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
      ++__first1, ++__first2)
   {
     if (*__first1 < *__first2)
       return true;
     if (*__first2 < *__first1)
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp(__first1, __first2,
      std::min(__len1, __len2));
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }
# 934 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;




                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }



  template<typename _Size>
    inline _Size
    __lg(_Size __n)
    {
      _Size __k;
      for (__k = 0; __n != 0; __n >>= 1)
 ++__k;
      return __k - 1;
    }

  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }
# 1008 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                       ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1040 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1071 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {

      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;




                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1105 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;




                                                       ;
                                                       ;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(*__first1, *__first2))
     return true;
   if (__comp(*__first2, *__first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1145 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      while (__first1 != __last1 && *__first1 == *__first2)
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1182 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }


}
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 2 3

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 46 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 2 3
# 43 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 58 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 83 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>(-1); }

      static int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{
# 227 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>(-1); }

      static int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((0xffffffffu)); }

      static int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 1 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 1 3
# 40 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3
# 40 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 53 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 120 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();
# 151 "/usr/include/locale.h" 3 4
extern __locale_t newlocale (int __category_mask, const char *__locale,
        __locale_t __base) throw ();
# 186 "/usr/include/locale.h" 3 4
extern __locale_t duplocale (__locale_t __dataset) throw ();



extern void freelocale (__locale_t __dataset) throw ();






extern __locale_t uselocale (__locale_t __dataset) throw ();







}
# 44 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 2 3








namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 42 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 2 3

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 46 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 110 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();
# 136 "/usr/include/ctype.h" 3 4
extern int isblank (int) throw ();






extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 271 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) throw ();
extern int isalpha_l (int, __locale_t) throw ();
extern int iscntrl_l (int, __locale_t) throw ();
extern int isdigit_l (int, __locale_t) throw ();
extern int islower_l (int, __locale_t) throw ();
extern int isgraph_l (int, __locale_t) throw ();
extern int isprint_l (int, __locale_t) throw ();
extern int ispunct_l (int, __locale_t) throw ();
extern int isspace_l (int, __locale_t) throw ();
extern int isupper_l (int, __locale_t) throw ();
extern int isxdigit_l (int, __locale_t) throw ();

extern int isblank_l (int, __locale_t) throw ();



extern int __tolower_l (int __c, __locale_t __l) throw ();
extern int tolower_l (int __c, __locale_t __l) throw ();


extern int __toupper_l (int __c, __locale_t __l) throw ();
extern int toupper_l (int __c, __locale_t __l) throw ();
# 347 "/usr/include/ctype.h" 3 4
}
# 44 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 2 3
# 63 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}
# 44 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 56 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;


}
# 42 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 1 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 1 3
# 34 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 1 3
# 30 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 170 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 23 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 28 "/usr/include/sched.h" 3 4
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 29 "/usr/include/sched.h" 2 3 4





# 1 "/usr/include/time.h" 1 3 4
# 35 "/usr/include/sched.h" 2 3 4








# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 72 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int setns (int __fd, int __nstype) throw ();



}







struct __sched_param
  {
    int __sched_priority;
  };
# 118 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 201 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 44 "/usr/include/sched.h" 2 3 4




extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 118 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 24 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
extern "C" {








# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 88 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 89 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 42 "/usr/include/time.h" 2 3 4
# 133 "/usr/include/time.h" 3 4
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 161 "/usr/include/time.h" 3 4
struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 189 "/usr/include/time.h" 3 4
extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();





extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) throw ();
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 403 "/usr/include/time.h" 3 4
extern int getdate_err;
# 412 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 426 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 25 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 114 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 155 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 190 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 228 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 494 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 506 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 540 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 680 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
                            ;
# 692 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
                         ;
# 715 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
                            ;
# 728 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
                         ;



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
                             __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 806 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 888 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1000 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1044 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1111 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1159 "/usr/include/pthread.h" 3 4
}
# 42 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 2 3
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 229 "/usr/include/unistd.h" 3 4
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4
# 270 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 348 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 407 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));






# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () ;




extern int seteuid (__uid_t __uid) throw () ;






extern int setgid (__gid_t __gid) throw () ;




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () ;




extern int setegid (__gid_t __gid) throw () ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () ;






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();





extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));
# 874 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 48 "/usr/include/getopt.h" 3 4
extern "C" {
# 57 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 71 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 150 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw ();
# 185 "/usr/include/getopt.h" 3 4
}
# 875 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 996 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1008 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1019 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1029 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1040 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1061 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1084 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1094 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1115 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);







extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__glibc_block, int __edflag)
     throw () __attribute__ ((__nonnull__ (1)));






extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1154 "/usr/include/unistd.h" 3 4
}
# 43 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 2 3

typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 118 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));


static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));


static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));


static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 239 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw_pthread_cancel;






  return __gthread_active_ptr != 0;
}
# 657 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}



static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}



static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 800 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}



static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}



static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait_recursive (__gthread_cond_t *__cond,
        __gthread_recursive_mutex_t *__mutex,
        const __gthread_time_t *__abs_timeout)
{
  return __gthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 171 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 2 3







#pragma GCC visibility pop
# 35 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/atomic_word.h" 1 3
# 32 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 36 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __sync_fetch_and_add(__mem, __val); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __sync_fetch_and_add(__mem, __val); }
# 63 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 2 3

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 1 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 1 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 3




# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 1 3
# 48 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 1 3
# 34 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 1 3
# 34 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 1 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3




#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 92 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 35 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 2 3



namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 53 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }



      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }
# 117 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 3
      void
      destroy(pointer __p) { __p->~_Tp(); }
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 35 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 2 3
# 49 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 65 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
  template<typename _Tp>
    class allocator;


  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };
    };
# 91 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }




  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };
# 237 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
}
# 43 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 1 3
# 33 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 3
# 33 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 3


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 1 3
# 34 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 3
# 34 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 36 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   if (true)
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   if (false)
     {
       __out._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 46 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3



# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 1 3
# 60 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 101 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 140 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 204 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 268 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };
# 351 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 422 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st : public unary_function<_Pair,
           typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
# 508 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
    };

  template<typename _Pair>
    struct _Select2nd : public unary_function<_Pair,
           typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 541 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}



# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 1 3
# 60 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 99 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}
# 732 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 2 3
# 50 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 1 3
# 33 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 3
# 33 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 3
# 53 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 1 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3



# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 1 3
# 33 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 3
# 33 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 3
# 43 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 105 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 142 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 167 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep()
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked()
        { this->_M_refcount = -1; }

        void
 _M_set_sharable()
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {
       this->_M_set_sharable();
       this->_M_length = __n;
       traits_type::assign(this->_M_refdata()[__n], _S_terminal);


     }
 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {

                                                                  ;
       if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
        -1) <= 0)
  {
                                                              ;
    _M_destroy(__a);
  }
     }
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a)
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const
      { return iterator(_M_data()); }

      iterator
      _M_iend() const
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range((__s));
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2)
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return _Rep::_S_empty_rep(); }

    public:







      basic_string()

      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }







      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 477 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 525 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 558 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 598 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }
# 704 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
    public:



      size_type
      size() const
      { return _M_rep()->_M_length; }



      size_type
      length() const
      { return _M_rep()->_M_length; }


      size_type
      max_size() const
      { return _Rep::_S_max_size; }
# 733 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 746 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }
# 766 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      capacity() const
      { return _M_rep()->_M_capacity; }
# 787 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_mutate(0, this->size(), 0); }





      bool
      empty() const
      { return this->size() == 0; }
# 816 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const
      {
                                       ;
 return _M_data()[__pos];
      }
# 833 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {

                                       ;

                                         ;
 _M_leak();
 return _M_data()[__pos];
      }
# 854 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("basic_string::at"));
 return _M_data()[__n];
      }
# 907 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range(("basic_string::at"));
 _M_leak();
 return _M_data()[__n];
      }







      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }
# 963 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str);
# 978 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
                               ;
 return this->append(__s, traits_type::length(__s));
      }
# 1010 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);
# 1032 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 1088 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 1104 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 1116 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
                               ;
 return this->assign(__s, traits_type::length(__s));
      }
# 1132 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1144 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
# 1172 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1187 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1218 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1240 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1263 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1281 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
                               ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1304 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1321 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
                                                                 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1345 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1361 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {

                               ;
 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1381 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1400 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1422 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1446 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1465 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1488 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1506 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1524 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {

                          ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1545 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
                               ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1566 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {

                          ;
 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1588 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {

                            ;
                                             ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1663 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct_aux_2(static_cast<size_type>(__beg),
        __end, __a); }

      static _CharT*
      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
      { return _S_construct(__req, __c, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1744 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1754 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1764 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_dataplus; }
# 1796 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1809 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      { return this->find(__str.data(), __pos, __str.size()); }
# 1823 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1840 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const;
# 1853 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1868 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1881 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1898 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const;
# 1911 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1926 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1939 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 1958 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 1972 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 1987 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2000 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2019 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 2033 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2048 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2062 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2079 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const;
# 2092 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2108 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2121 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2138 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const;
# 2153 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2171 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2201 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2225 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2243 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2266 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2291 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
# 2303 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }
# 2424 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2470 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2507 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2544 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2581 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2618 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2655 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2672 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2690 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2713 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2731 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return getline(__is, __str, __is.widen('\n')); }

  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}
# 54 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 1 3
# 42 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3
# 42 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 if (true)
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   __throw_logic_error(("basic_string::_S_construct null not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 if (true)
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {

      if (__n == 0 && __a == _Alloc())
 return _S_empty_rep()._M_refdata();


      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }
# 241 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
                                             ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
                                             ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
                                              ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     typename basic_string<_CharT, _Traits, _Alloc>::iterator
     basic_string<_CharT, _Traits, _Alloc>::
     erase(iterator __first, iterator __last)
     {

                           ;




       const size_type __size = __last - __first;
       if (__size)
  {
    const size_type __pos = __first - _M_ibegin();
    _M_mutate(__pos, __size, size_type(0));
    _M_rep()->_M_set_leaked();
    return iterator(_M_data() + __pos);
  }
       else
  return __first;
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
                                               ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {

      if (_M_rep() == &_S_empty_rep())
 return;

      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 578 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
                                      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
                                             ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
                                    ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
                                    ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
                                              ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   if (true)
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }




  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 55 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 42 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 63 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 99 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 118 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale() throw();
# 127 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 137 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 152 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 165 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 177 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 191 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 206 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 225 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 253 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 269 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    static locale
    global(const locale&);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 304 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 338 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 369 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 436 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 582 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw();
# 599 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc);
# 616 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 643 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 657 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 674 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 693 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 707 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 736 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 752 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 765 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };


}


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 1 3
# 37 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 3
# 37 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      if (true)
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      if (false)
 {
   _M_impl->_M_remove_reference();
                          ;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      if (true)
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      if (false)
 {
   __tmp->_M_remove_reference();
                          ;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }


  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }

  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      if (true)
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      if (false)
 {
   delete [] __c;
                          ;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 823 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 2 3
# 43 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 200 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
  class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 256 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 331 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 362 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 394 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 420 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 437 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef void (*event_callback) (event, ios_base&, int);
# 449 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

                                                             ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
                                                                ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 562 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 578 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 595 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 621 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 672 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 684 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 695 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 706 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 725 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 741 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 762 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 779 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }


}
# 43 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 1 3
# 37 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
# 37 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3








namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 115 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:
# 181 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 205 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      locale
      pubimbue(const locale &__loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 222 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 235 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      __streambuf_type*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }

      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }

      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }

      int
      pubsync() { return this->sync(); }
# 262 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 276 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 294 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 316 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 335 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 350 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 375 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 402 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 428 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 442 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 460 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 476 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 487 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 507 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 523 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 533 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 554 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual void
      imbue(const locale&)
      { }
# 569 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 580 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 592 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 605 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int
      sync() { return 0; }
# 627 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 643 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 665 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 678 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 702 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      pbackfail(int_type = traits_type::eof())
      { return traits_type::eof(); }
# 720 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 746 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      overflow(int_type = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 761 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }

    private:


      basic_streambuf(const __streambuf_type& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      __streambuf_type&
      operator=(const __streambuf_type&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);



}


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 1 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 808 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 2 3
# 44 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 1 3
# 35 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
# 35 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3



# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 1 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 51 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 33 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/wchar.h" 1 3 4
# 34 "/usr/include/wctype.h" 2 3 4
# 52 "/usr/include/wctype.h" 3 4
typedef unsigned long int wctype_t;
# 71 "/usr/include/wctype.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {
# 111 "/usr/include/wctype.h" 3 4
extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 171 "/usr/include/wctype.h" 3 4
extern wctype_t wctype (const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();
# 186 "/usr/include/wctype.h" 3 4
typedef const __int32_t *wctrans_t;







extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();


}
# 213 "/usr/include/wctype.h" 3 4
extern "C" {




extern wctrans_t wctrans (const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();
# 230 "/usr/include/wctype.h" 3 4
extern int iswalnum_l (wint_t __wc, __locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, __locale_t __locale) throw ();



extern wctype_t wctype_l (const char *__property, __locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, __locale_t __locale)
     throw ();







extern wint_t towlower_l (wint_t __wc, __locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, __locale_t __locale) throw ();



extern wctrans_t wctrans_l (const char *__property, __locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      __locale_t __locale) throw ();



}
# 52 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 2 3
# 81 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 42 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_base.h" 1 3
# 37 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;
  };


}
# 43 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3






# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 1 3
# 35 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3
# 35 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 50 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT&>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

                         istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw ()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw ()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }




}
# 50 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 65 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 143 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 161 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 178 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 194 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 210 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 224 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 239 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 253 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 268 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 285 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 304 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 323 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 345 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char *__to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 370 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 389 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 408 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 427 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 445 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const = 0;
# 462 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 478 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const = 0;
# 495 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 514 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const = 0;
# 535 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi,
        char_type* __dest) const = 0;
# 557 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const = 0;
# 581 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const = 0;
    };
# 604 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 673 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 710 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 723 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 736 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 751 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 765 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 779 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 794 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 811 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 827 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 844 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 864 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 891 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 922 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 955 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char *__to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1004 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1021 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1037 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1054 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1074 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1097 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }
# 1123 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char) const
      { return __c; }
# 1149 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char, char* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1174 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1207 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1218 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1242 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1261 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1279 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1297 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1314 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1331 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1347 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1364 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1384 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const;
# 1406 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
# 1429 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const;
# 1455 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };



}



# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_inline.h" 1 3
# 37 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1512 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
        _S_ominus,
        _S_oplus,
        _S_ox,
        _S_oX,
        _S_odigits,
        _S_odigits_end = _S_odigits + 16,
        _S_oudigits = _S_odigits_end,
        _S_oudigits_end = _S_oudigits + 16,
        _S_oe = _S_odigits + 14,
        _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
        { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1640 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1678 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1692 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1706 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1719 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1750 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1763 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1776 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1793 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1805 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1818 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1831 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1844 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };
# 1914 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1935 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1961 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1997 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2056 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2098 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
        iter_type
        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2169 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      void*&) const;
# 2234 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2252 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2273 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2291 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2333 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __f, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2396 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2421 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __f, __fill, __v); }

    protected:
      template<typename _ValueT>
        iter_type
        _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
        iter_type
        _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2469 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, double __v) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;
# 2527 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 1 3
# 35 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
# 35 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     if (true)
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     if (false)
       {
  delete __tmp;
                         ;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      if (true)
 {
   _M_grouping_size = __np.grouping().size();
   __grouping = new char[_M_grouping_size];
   __np.grouping().copy(__grouping, _M_grouping_size);
   _M_grouping = __grouping;
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(_M_grouping[0]) > 0
        && (_M_grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   _M_truename_size = __np.truename().size();
   __truename = new _CharT[_M_truename_size];
   __np.truename().copy(__truename, _M_truename_size);
   _M_truename = __truename;

   _M_falsename_size = __np.falsename().size();
   __falsename = new _CharT[_M_falsename_size];
   __np.falsename().copy(__falsename, _M_falsename_size);
   _M_falsename = __falsename;

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);
 }
      if (false)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
                          ;
 }
    }
# 137 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 731 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 967 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1028 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1153 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1190 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2608 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 62 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 127 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 138 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
                          ;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 191 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 212 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 247 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 285 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 297 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 337 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 351 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 380 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 400 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 420 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 439 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };


}


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 1 3
# 34 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3
# 34 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 473 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 2 3
# 45 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 40 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 1 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 82 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 108 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }


      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 250 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 283 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      put(char_type __c);


      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 311 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 324 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      flush();
# 335 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      pos_type
      tellp();
# 346 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 358 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
        __ostream_type&
        _M_insert(_ValueT __v);
    };
# 377 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 396 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 406 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 427 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      operator bool() const
      { return _M_ok; }
    };
# 448 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 490 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 540 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }







  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 585 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
}


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 1 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   if (true)
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   if (true)
     { _M_write(__s, __n); }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      if (true)
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   if (true)
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   if (false)
     {
       __out._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 588 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 2 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:
# 91 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 120 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 239 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 249 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 281 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      int_type
      get();
# 295 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(char_type& __c);
# 322 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 333 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 356 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 366 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 395 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 406 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 430 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      ignore();

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore(streamsize __n, int_type __delim);
# 447 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      int_type
      peek();
# 465 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 484 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 501 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      putback(char_type __c);
# 517 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      unget();
# 535 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      int
      sync();
# 550 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      pos_type
      tellg();
# 565 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      seekg(pos_type);
# 581 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
        __istream_type&
        _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 636 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 672 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 685 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      operator bool() const
      { return _M_ok; }
    };
# 702 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 744 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 772 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 833 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 856 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
}


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 1 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   if (true)
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::failbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          if (true)
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 514 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 859 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 2 3
# 40 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 1 3
# 40 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
# 40 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 67 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 115 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 154 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 195 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 236 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };
# 275 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
   template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs) { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };



  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };



  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }

    protected:
      virtual
      ~codecvt_byname() { }
    };




  extern template class codecvt_byname<char, char, mbstate_t>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);


  extern template class codecvt_byname<wchar_t, char, mbstate_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);




}
# 42 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 43 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 1 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 3


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 1 3
# 36 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 37 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __gthread_mutex_t __c_lock;


  typedef FILE __c_file;


}
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _CharT>
    class __basic_file;


  template<>
    class __basic_file<char>
    {

      __c_file* _M_cfile;


      bool _M_cfile_created;

    public:
      __basic_file(__c_lock* __lock = 0) throw ();

      __basic_file*
      open(const char* __name, ios_base::openmode __mode, int __prot = 0664);

      __basic_file*
      sys_open(__c_file* __file, ios_base::openmode);

      __basic_file*
      sys_open(int __fd, ios_base::openmode __mode) throw ();

      __basic_file*
      close();

      __attribute__ ((__pure__)) bool
      is_open() const throw ();

      __attribute__ ((__pure__)) int
      fd() throw ();

      __attribute__ ((__pure__)) __c_file*
      file() throw ();

      ~__basic_file();

      streamsize
      xsputn(const char* __s, streamsize __n);

      streamsize
      xsputn_2(const char* __s1, streamsize __n1,
        const char* __s2, streamsize __n2);

      streamsize
      xsgetn(char* __s, streamsize __n);

      streamoff
      seekoff(streamoff __off, ios_base::seekdir __way) throw ();

      int
      sync();

      streamsize
      showmanyc();
    };


}
# 44 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 67 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_filebuf : public basic_streambuf<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef __basic_file<char> __file_type;
      typedef typename traits_type::state_type __state_type;
      typedef codecvt<char_type, char, __state_type> __codecvt_type;

      friend class ios_base;

    protected:


      __c_lock _M_lock;


      __file_type _M_file;


      ios_base::openmode _M_mode;


      __state_type _M_state_beg;




      __state_type _M_state_cur;



      __state_type _M_state_last;


      char_type* _M_buf;






      size_t _M_buf_size;


      bool _M_buf_allocated;
# 129 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      bool _M_reading;
      bool _M_writing;







      char_type _M_pback;
      char_type* _M_pback_cur_save;
      char_type* _M_pback_end_save;
      bool _M_pback_init;



      const __codecvt_type* _M_codecvt;






      char* _M_ext_buf;




      streamsize _M_ext_buf_size;






      const char* _M_ext_next;
      char* _M_ext_end;






      void
      _M_create_pback()
      {
 if (!_M_pback_init)
   {
     _M_pback_cur_save = this->gptr();
     _M_pback_end_save = this->egptr();
     this->setg(&_M_pback, &_M_pback, &_M_pback + 1);
     _M_pback_init = true;
   }
      }






      void
      _M_destroy_pback() throw()
      {
 if (_M_pback_init)
   {

     _M_pback_cur_save += this->gptr() != this->eback();
     this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save);
     _M_pback_init = false;
   }
      }

    public:







      basic_filebuf();




      virtual
      ~basic_filebuf()
      { this->close(); }





      bool
      is_open() const throw()
      { return _M_file.is_open(); }
# 265 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      open(const char* __s, ios_base::openmode __mode);
# 292 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      close();

    protected:
      void
      _M_allocate_internal_buffer();

      void
      _M_destroy_internal_buffer() throw();


      virtual streamsize
      showmanyc();






      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = _Traits::eof());
# 324 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      virtual int_type
      overflow(int_type __c = _Traits::eof());



      bool
      _M_convert_to_external(char_type*, streamsize);
# 344 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n);

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __pos,
       ios_base::openmode __mode = ios_base::in | ios_base::out);


      pos_type
      _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);

      int
      _M_get_ext_pos(__state_type &__state);

      virtual int
      sync();

      virtual void
      imbue(const locale& __loc);

      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);

      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);


      bool
      _M_terminate_output();
# 390 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      _M_set_buffer(streamsize __off)
      {
  const bool __testin = _M_mode & ios_base::in;
  const bool __testout = _M_mode & ios_base::out;

 if (__testin && __off > 0)
   this->setg(_M_buf, _M_buf, _M_buf + __off);
 else
   this->setg(_M_buf, _M_buf, _M_buf);

 if (__testout && __off == 0 && _M_buf_size > 1 )
   this->setp(_M_buf, _M_buf + _M_buf_size - 1);
 else
   this->setp(0, 0);
      }
    };
# 418 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ifstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 445 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      basic_ifstream() : __istream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 458 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 490 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      ~basic_ifstream()
      { }
# 500 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 529 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 567 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 586 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ofstream : public basic_ostream<_CharT,_Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 613 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      basic_ofstream(): __ostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 627 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_ofstream(const char* __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 661 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      ~basic_ofstream()
      { }
# 671 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 700 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 740 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 759 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_fstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ios<char_type, traits_type> __ios_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 787 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      basic_fstream()
      : __iostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 799 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_fstream(const char* __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 830 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      ~basic_fstream()
      { }
# 840 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 869 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 909 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };


}


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 1 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_allocate_internal_buffer()
    {


      if (!_M_buf_allocated && !_M_buf)
 {
   _M_buf = new char_type[_M_buf_size];
   _M_buf_allocated = true;
 }
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_destroy_internal_buffer() throw()
    {
      if (_M_buf_allocated)
 {
   delete [] _M_buf;
   _M_buf = 0;
   _M_buf_allocated = false;
 }
      delete [] _M_ext_buf;
      _M_ext_buf = 0;
      _M_ext_buf_size = 0;
      _M_ext_next = 0;
      _M_ext_end = 0;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),
    _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),
    _M_state_last(), _M_buf(0), _M_buf_size(8192),
    _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(),
    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),
    _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),
    _M_ext_end(0)
    {
      if (has_facet<__codecvt_type>(this->_M_buf_locale))
 _M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    open(const char* __s, ios_base::openmode __mode)
    {
      __filebuf_type *__ret = 0;
      if (!this->is_open())
 {
   _M_file.open(__s, __mode);
   if (this->is_open())
     {
       _M_allocate_internal_buffer();
       _M_mode = __mode;


       _M_reading = false;
       _M_writing = false;
       _M_set_buffer(-1);


       _M_state_last = _M_state_cur = _M_state_beg;


       if ((__mode & ios_base::ate)
    && this->seekoff(0, ios_base::end, __mode)
    == pos_type(off_type(-1)))
  this->close();
       else
  __ret = this;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    close()
    {
      if (!this->is_open())
 return 0;

      bool __testfail = false;
      {

 struct __close_sentry
 {
   basic_filebuf *__fb;
   __close_sentry (basic_filebuf *__fbi): __fb(__fbi) { }
   ~__close_sentry ()
   {
     __fb->_M_mode = ios_base::openmode(0);
     __fb->_M_pback_init = false;
     __fb->_M_destroy_internal_buffer();
     __fb->_M_reading = false;
     __fb->_M_writing = false;
     __fb->_M_set_buffer(-1);
     __fb->_M_state_last = __fb->_M_state_cur = __fb->_M_state_beg;
   }
 } __cs (this);

 if (true)
   {
     if (!_M_terminate_output())
       __testfail = true;
   }
 if (false)
   {
     _M_file.close();
                            ;
   }
 if (false)
   { __testfail = true; }
      }

      if (!_M_file.close())
 __testfail = true;

      if (__testfail)
 return 0;
      else
 return this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    showmanyc()
    {
      streamsize __ret = -1;
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && this->is_open())
 {


   __ret = this->egptr() - this->gptr();







   if (__check_facet(_M_codecvt).encoding() >= 0)

     __ret += _M_file.showmanyc() / _M_codecvt->max_length();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }



   _M_destroy_pback();

   if (this->gptr() < this->egptr())
     return traits_type::to_int_type(*this->gptr());


   const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;


   bool __got_eof = false;

   streamsize __ilen = 0;
   codecvt_base::result __r = codecvt_base::ok;
   if (__check_facet(_M_codecvt).always_noconv())
     {
       __ilen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()),
          __buflen);
       if (__ilen == 0)
  __got_eof = true;
     }
   else
     {


       const int __enc = _M_codecvt->encoding();
       streamsize __blen;
       streamsize __rlen;
       if (__enc > 0)
  __blen = __rlen = __buflen * __enc;
       else
  {
    __blen = __buflen + _M_codecvt->max_length() - 1;
    __rlen = __buflen;
  }
       const streamsize __remainder = _M_ext_end - _M_ext_next;
       __rlen = __rlen > __remainder ? __rlen - __remainder : 0;



       if (_M_reading && this->egptr() == this->eback() && __remainder)
  __rlen = 0;



       if (_M_ext_buf_size < __blen)
  {
    char* __buf = new char[__blen];
    if (__remainder)
      __builtin_memcpy(__buf, _M_ext_next, __remainder);

    delete [] _M_ext_buf;
    _M_ext_buf = __buf;
    _M_ext_buf_size = __blen;
  }
       else if (__remainder)
  __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

       _M_ext_next = _M_ext_buf;
       _M_ext_end = _M_ext_buf + __remainder;
       _M_state_last = _M_state_cur;

       do
  {
    if (__rlen > 0)
      {



        if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)
   {
     __throw_ios_failure(("basic_filebuf::underflow " "codecvt::max_length() " "is not valid"));


   }
        streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);
        if (__elen == 0)
   __got_eof = true;
        else if (__elen == -1)
   break;
        _M_ext_end += __elen;
      }

    char_type* __iend = this->eback();
    if (_M_ext_next < _M_ext_end)
      __r = _M_codecvt->in(_M_state_cur, _M_ext_next,
      _M_ext_end, _M_ext_next,
      this->eback(),
      this->eback() + __buflen, __iend);
    if (__r == codecvt_base::noconv)
      {
        size_t __avail = _M_ext_end - _M_ext_buf;
        __ilen = std::min(__avail, __buflen);
        traits_type::copy(this->eback(),
     reinterpret_cast<char_type*>
     (_M_ext_buf), __ilen);
        _M_ext_next = _M_ext_buf + __ilen;
      }
    else
      __ilen = __iend - this->eback();




    if (__r == codecvt_base::error)
      break;

    __rlen = 1;
  }
       while (__ilen == 0 && !__got_eof);
     }

   if (__ilen > 0)
     {
       _M_set_buffer(__ilen);
       _M_reading = true;
       __ret = traits_type::to_int_type(*this->gptr());
     }
   else if (__got_eof)
     {



       _M_set_buffer(-1);
       _M_reading = false;


       if (__r == codecvt_base::partial)
  __throw_ios_failure(("basic_filebuf::underflow " "incomplete character in file"));

     }
   else if (__r == codecvt_base::error)
     __throw_ios_failure(("basic_filebuf::underflow " "invalid byte sequence in file"));

   else
     __throw_ios_failure(("basic_filebuf::underflow " "error reading the file"));

 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    pbackfail(int_type __i)
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }


   const bool __testpb = _M_pback_init;
   const bool __testeof = traits_type::eq_int_type(__i, __ret);
   int_type __tmp;
   if (this->eback() < this->gptr())
     {
       this->gbump(-1);
       __tmp = traits_type::to_int_type(*this->gptr());
     }
   else if (this->seekoff(-1, ios_base::cur) != pos_type(off_type(-1)))
     {
       __tmp = this->underflow();
       if (traits_type::eq_int_type(__tmp, __ret))
  return __ret;
     }
   else
     {





       return __ret;
     }



   if (!__testeof && traits_type::eq_int_type(__i, __tmp))
     __ret = __i;
   else if (__testeof)
     __ret = traits_type::not_eof(__i);
   else if (!__testpb)
     {
       _M_create_pback();
       _M_reading = true;
       *this->gptr() = traits_type::to_char_type(__i);
       __ret = __i;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    overflow(int_type __c)
    {
      int_type __ret = traits_type::eof();
      const bool __testeof = traits_type::eq_int_type(__c, __ret);
      const bool __testout = _M_mode & ios_base::out;
      if (__testout)
 {
          if (_M_reading)
            {
              _M_destroy_pback();
              const int __gptr_off = _M_get_ext_pos(_M_state_last);
              if (_M_seek(__gptr_off, ios_base::cur, _M_state_last)
                  == pos_type(off_type(-1)))
                return __ret;
            }
   if (this->pbase() < this->pptr())
     {

       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }



       if (_M_convert_to_external(this->pbase(),
      this->pptr() - this->pbase()))
  {
    _M_set_buffer(0);
    __ret = traits_type::not_eof(__c);
  }
     }
   else if (_M_buf_size > 1)
     {



       _M_set_buffer(0);
       _M_writing = true;
       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
       __ret = traits_type::not_eof(__c);
     }
   else
     {

       char_type __conv = traits_type::to_char_type(__c);
       if (__testeof || _M_convert_to_external(&__conv, 1))
  {
    _M_writing = true;
    __ret = traits_type::not_eof(__c);
  }
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)
    {

      streamsize __elen;
      streamsize __plen;
      if (__check_facet(_M_codecvt).always_noconv())
 {
   __elen = _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);
   __plen = __ilen;
 }
      else
 {


   streamsize __blen = __ilen * _M_codecvt->max_length();
   char* __buf = static_cast<char*>(__builtin_alloca(__blen));

   char* __bend;
   const char_type* __iend;
   codecvt_base::result __r;
   __r = _M_codecvt->out(_M_state_cur, __ibuf, __ibuf + __ilen,
    __iend, __buf, __buf + __blen, __bend);

   if (__r == codecvt_base::ok || __r == codecvt_base::partial)
     __blen = __bend - __buf;
   else if (__r == codecvt_base::noconv)
     {

       __buf = reinterpret_cast<char*>(__ibuf);
       __blen = __ilen;
     }
   else
     __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error"));


   __elen = _M_file.xsputn(__buf, __blen);
   __plen = __blen;


   if (__r == codecvt_base::partial && __elen == __plen)
     {
       const char_type* __iresume = __iend;
       streamsize __rlen = this->pptr() - __iend;
       __r = _M_codecvt->out(_M_state_cur, __iresume,
        __iresume + __rlen, __iend, __buf,
        __buf + __blen, __bend);
       if (__r != codecvt_base::error)
  {
    __rlen = __bend - __buf;
    __elen = _M_file.xsputn(__buf, __rlen);
    __plen = __rlen;
  }
       else
  __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error"));

     }
 }
      return __elen == __plen;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsgetn(_CharT* __s, streamsize __n)
    {

      streamsize __ret = 0;
      if (_M_pback_init)
 {
   if (__n > 0 && this->gptr() == this->eback())
     {
       *__s++ = *this->gptr();
       this->gbump(1);
       __ret = 1;
       --__n;
     }
   _M_destroy_pback();
 }
      else if (_M_writing)
 {
    if (overflow() == traits_type::eof())
      return __ret;
    _M_set_buffer(-1);
    _M_writing = false;
  }




      const bool __testin = _M_mode & ios_base::in;
      const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;

      if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()
     && __testin)
   {

     const streamsize __avail = this->egptr() - this->gptr();
     if (__avail != 0)
       {
        traits_type::copy(__s, this->gptr(), __avail);
         __s += __avail;
        this->setg(this->eback(), this->gptr() + __avail,
     this->egptr());
        __ret += __avail;
        __n -= __avail;
       }



     streamsize __len;
     for (;;)
       {
         __len = _M_file.xsgetn(reinterpret_cast<char*>(__s),
           __n);
         if (__len == -1)
    __throw_ios_failure(("basic_filebuf::xsgetn " "error reading the file"));

         if (__len == 0)
    break;

         __n -= __len;
         __ret += __len;
         if (__n == 0)
    break;

         __s += __len;
       }

     if (__n == 0)
       {
         _M_set_buffer(0);
         _M_reading = true;
       }
     else if (__len == 0)
       {



         _M_set_buffer(-1);
         _M_reading = false;
       }
   }
      else
   __ret += __streambuf_type::xsgetn(__s, __n);

      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsputn(const _CharT* __s, streamsize __n)
    {
      streamsize __ret = 0;



      const bool __testout = _M_mode & ios_base::out;
      if (__check_facet(_M_codecvt).always_noconv()
     && __testout && !_M_reading)
 {

   const streamsize __chunk = 1ul << 10;
   streamsize __bufavail = this->epptr() - this->pptr();


   if (!_M_writing && _M_buf_size > 1)
     __bufavail = _M_buf_size - 1;

   const streamsize __limit = std::min(__chunk, __bufavail);
   if (__n >= __limit)
     {
       const streamsize __buffill = this->pptr() - this->pbase();
       const char* __buf = reinterpret_cast<const char*>(this->pbase());
       __ret = _M_file.xsputn_2(__buf, __buffill,
           reinterpret_cast<const char*>(__s),
           __n);
       if (__ret == __buffill + __n)
  {
    _M_set_buffer(0);
    _M_writing = true;
  }
       if (__ret > __buffill)
  __ret -= __buffill;
       else
  __ret = 0;
     }
   else
     __ret = __streambuf_type::xsputn(__s, __n);
 }
       else
  __ret = __streambuf_type::xsputn(__s, __n);
       return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__streambuf_type*
    basic_filebuf<_CharT, _Traits>::
    setbuf(char_type* __s, streamsize __n)
    {
      if (!this->is_open())
 {
   if (__s == 0 && __n == 0)
     _M_buf_size = 1;
   else if (__s && __n > 0)
     {
# 701 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3
       _M_buf = __s;
       _M_buf_size = __n;
     }
 }
      return this;
    }




  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode)
    {
      int __width = 0;
      if (_M_codecvt)
 __width = _M_codecvt->encoding();
      if (__width < 0)
 __width = 0;

      pos_type __ret = pos_type(off_type(-1));
      const bool __testfail = __off != 0 && __width <= 0;
      if (this->is_open() && !__testfail)
 {




   bool __no_movement = __way == ios_base::cur && __off == 0
     && (!_M_writing || _M_codecvt->always_noconv());


   if (!__no_movement)
     _M_destroy_pback();






   __state_type __state = _M_state_beg;
   off_type __computed_off = __off * __width;
   if (_M_reading && __way == ios_base::cur)
     {
       __state = _M_state_last;
       __computed_off += _M_get_ext_pos(__state);
     }
   if (!__no_movement)
     __ret = _M_seek(__computed_off, __way, __state);
   else
     {
       if (_M_writing)
  __computed_off = this->pptr() - this->pbase();

        off_type __file_off = _M_file.seekoff(0, ios_base::cur);
        if (__file_off != off_type(-1))
  {
    __ret = __file_off + __computed_off;
    __ret.state(__state);
  }
     }
 }
      return __ret;
    }





  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekpos(pos_type __pos, ios_base::openmode)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (this->is_open())
 {

   _M_destroy_pback();
   __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (_M_terminate_output())
 {
   off_type __file_off = _M_file.seekoff(__off, __way);
   if (__file_off != off_type(-1))
     {
       _M_reading = false;
       _M_writing = false;
       _M_ext_next = _M_ext_end = _M_ext_buf;
       _M_set_buffer(-1);
       _M_state_cur = __state;
       __ret = __file_off;
       __ret.state(_M_state_cur);
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    int basic_filebuf<_CharT, _Traits>::
    _M_get_ext_pos(__state_type& __state)
    {
      if (_M_codecvt->always_noconv())
        return this->gptr() - this->egptr();
      else
        {



          const int __gptr_off =
            _M_codecvt->length(__state, _M_ext_buf, _M_ext_next,
                               this->gptr() - this->eback());
          return _M_ext_buf + __gptr_off - _M_ext_end;
        }
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_terminate_output()
    {

      bool __testvalid = true;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __testvalid = false;
 }


      if (_M_writing && !__check_facet(_M_codecvt).always_noconv()
   && __testvalid)
 {



   const size_t __blen = 128;
   char __buf[__blen];
   codecvt_base::result __r;
   streamsize __ilen = 0;

   do
     {
       char* __next;
       __r = _M_codecvt->unshift(_M_state_cur, __buf,
     __buf + __blen, __next);
       if (__r == codecvt_base::error)
  __testvalid = false;
       else if (__r == codecvt_base::ok ||
         __r == codecvt_base::partial)
  {
    __ilen = __next - __buf;
    if (__ilen > 0)
      {
        const streamsize __elen = _M_file.xsputn(__buf, __ilen);
        if (__elen != __ilen)
   __testvalid = false;
      }
  }
     }
   while (__r == codecvt_base::partial && __ilen > 0 && __testvalid);

   if (__testvalid)
     {




       const int_type __tmp = this->overflow();
       if (traits_type::eq_int_type(__tmp, traits_type::eof()))
  __testvalid = false;
     }
 }
      return __testvalid;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_filebuf<_CharT, _Traits>::
    sync()
    {


      int __ret = 0;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __ret = -1;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    imbue(const locale& __loc)
    {
      bool __testvalid = true;

      const __codecvt_type* _M_codecvt_tmp = 0;
      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))
 _M_codecvt_tmp = &use_facet<__codecvt_type>(__loc);

      if (this->is_open())
 {

   if ((_M_reading || _M_writing)
       && __check_facet(_M_codecvt).encoding() == -1)
     __testvalid = false;
   else
     {
       if (_M_reading)
  {
    if (__check_facet(_M_codecvt).always_noconv())
      {
        if (_M_codecvt_tmp
     && !__check_facet(_M_codecvt_tmp).always_noconv())
   __testvalid = this->seekoff(0, ios_base::cur, _M_mode)
                 != pos_type(off_type(-1));
      }
    else
      {

        _M_ext_next = _M_ext_buf
   + _M_codecvt->length(_M_state_last, _M_ext_buf,
          _M_ext_next,
          this->gptr() - this->eback());
        const streamsize __remainder = _M_ext_end - _M_ext_next;
        if (__remainder)
   __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

        _M_ext_next = _M_ext_buf;
        _M_ext_end = _M_ext_buf + __remainder;
        _M_set_buffer(-1);
        _M_state_last = _M_state_cur = _M_state_beg;
      }
  }
       else if (_M_writing && (__testvalid = _M_terminate_output()))
  _M_set_buffer(-1);
     }
 }

      if (__testvalid)
 _M_codecvt = _M_codecvt_tmp;
      else
 _M_codecvt = 0;
    }




  extern template class basic_filebuf<char>;
  extern template class basic_ifstream<char>;
  extern template class basic_ofstream<char>;
  extern template class basic_fstream<char>;


  extern template class basic_filebuf<wchar_t>;
  extern template class basic_ifstream<wchar_t>;
  extern template class basic_ofstream<wchar_t>;
  extern template class basic_fstream<wchar_t>;




}
# 921 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 27 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h" 2
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 1 3
# 37 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3
# 37 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 60 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 28 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h" 2
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iomanip" 1 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iomanip" 3
# 38 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iomanip" 3
# 47 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iomanip" 3
namespace std __attribute__ ((__visibility__ ("default")))
{





  struct _Resetiosflags { ios_base::fmtflags _M_mask; };
# 63 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iomanip" 3
  inline _Resetiosflags
  resetiosflags(ios_base::fmtflags __mask)
  { return { __mask }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Resetiosflags __f)
    {
      __is.setf(ios_base::fmtflags(0), __f._M_mask);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Resetiosflags __f)
    {
      __os.setf(ios_base::fmtflags(0), __f._M_mask);
      return __os;
    }


  struct _Setiosflags { ios_base::fmtflags _M_mask; };
# 93 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iomanip" 3
  inline _Setiosflags
  setiosflags(ios_base::fmtflags __mask)
  { return { __mask }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setiosflags __f)
    {
      __is.setf(__f._M_mask);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setiosflags __f)
    {
      __os.setf(__f._M_mask);
      return __os;
    }


  struct _Setbase { int _M_base; };
# 124 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iomanip" 3
  inline _Setbase
  setbase(int __base)
  { return { __base }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setbase __f)
    {
      __is.setf(__f._M_base == 8 ? ios_base::oct :
  __f._M_base == 10 ? ios_base::dec :
  __f._M_base == 16 ? ios_base::hex :
  ios_base::fmtflags(0), ios_base::basefield);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setbase __f)
    {
      __os.setf(__f._M_base == 8 ? ios_base::oct :
  __f._M_base == 10 ? ios_base::dec :
  __f._M_base == 16 ? ios_base::hex :
  ios_base::fmtflags(0), ios_base::basefield);
      return __os;
    }


  template<typename _CharT>
    struct _Setfill { _CharT _M_c; };
# 161 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iomanip" 3
  template<typename _CharT>
    inline _Setfill<_CharT>
    setfill(_CharT __c)
    { return { __c }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setfill<_CharT> __f)
    {
      __is.fill(__f._M_c);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setfill<_CharT> __f)
    {
      __os.fill(__f._M_c);
      return __os;
    }


  struct _Setprecision { int _M_n; };
# 192 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iomanip" 3
  inline _Setprecision
  setprecision(int __n)
  { return { __n }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setprecision __f)
    {
      __is.precision(__f._M_n);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setprecision __f)
    {
      __os.precision(__f._M_n);
      return __os;
    }


  struct _Setw { int _M_n; };
# 222 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iomanip" 3
  inline _Setw
  setw(int __n)
  { return { __n }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setw __f)
    {
      __is.width(__f._M_n);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setw __f)
    {
      __os.width(__f._M_n);
      return __os;
    }
# 319 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iomanip" 3
  extern template ostream& operator<<(ostream&, _Setfill<char>);
  extern template ostream& operator<<(ostream&, _Setiosflags);
  extern template ostream& operator<<(ostream&, _Resetiosflags);
  extern template ostream& operator<<(ostream&, _Setbase);
  extern template ostream& operator<<(ostream&, _Setprecision);
  extern template ostream& operator<<(ostream&, _Setw);
  extern template istream& operator>>(istream&, _Setfill<char>);
  extern template istream& operator>>(istream&, _Setiosflags);
  extern template istream& operator>>(istream&, _Resetiosflags);
  extern template istream& operator>>(istream&, _Setbase);
  extern template istream& operator>>(istream&, _Setprecision);
  extern template istream& operator>>(istream&, _Setw);


  extern template wostream& operator<<(wostream&, _Setfill<wchar_t>);
  extern template wostream& operator<<(wostream&, _Setiosflags);
  extern template wostream& operator<<(wostream&, _Resetiosflags);
  extern template wostream& operator<<(wostream&, _Setbase);
  extern template wostream& operator<<(wostream&, _Setprecision);
  extern template wostream& operator<<(wostream&, _Setw);
  extern template wistream& operator>>(wistream&, _Setfill<wchar_t>);
  extern template wistream& operator>>(wistream&, _Setiosflags);
  extern template wistream& operator>>(wistream&, _Resetiosflags);
  extern template wistream& operator>>(wistream&, _Setbase);
  extern template wistream& operator>>(wistream&, _Setprecision);
  extern template wistream& operator>>(wistream&, _Setw);




}
# 29 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h" 2

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3




# 1 "/usr/include/math.h" 1 3 4
# 28 "/usr/include/math.h" 3 4
extern "C" {



# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 32 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/huge_val.h" 1 3 4
# 36 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/huge_valf.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/huge_vall.h" 1 3 4
# 39 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/inf.h" 1 3 4
# 42 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/nan.h" 1 3 4
# 45 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3 4
typedef float float_t;
typedef double double_t;
# 49 "/usr/include/math.h" 2 3 4
# 83 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ();






extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();
# 153 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();
# 178 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));
# 204 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinf (double __value) throw () __attribute__ ((__const__));



extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));






extern int isnan (double __value) throw () __attribute__ ((__const__));





extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();
# 375 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));






extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 84 "/usr/include/math.h" 2 3 4
# 104 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ();






extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();
# 153 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();
# 178 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));
# 204 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) throw () __attribute__ ((__const__));



extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));






extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();
# 375 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));






extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 105 "/usr/include/math.h" 2 3 4
# 151 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ();






extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();
# 153 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();
# 178 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));
# 204 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) throw () __attribute__ ((__const__));



extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));






extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();
# 375 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));






extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 152 "/usr/include/math.h" 2 3 4
# 168 "/usr/include/math.h" 3 4
extern int signgam;
# 209 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 347 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 370 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 534 "/usr/include/math.h" 3 4
}
# 46 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 2 3
# 76 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;

  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;

  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;

  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;

  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }

  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;

  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;

  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;

  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;

  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;

  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;

  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;

  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }

  using ::frexp;

  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;

  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
  ldexp(_Tp __x, int __exp)
  { return __builtin_ldexp(__x, __exp); }

  using ::log;

  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;

  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;

  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }

  using ::pow;

  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }




  inline double
  pow(double __x, int __i)
  { return __builtin_powi(__x, __i); }

  inline float
  pow(float __x, int __n)
  { return __builtin_powif(__x, __n); }

  inline long double
  pow(long double __x, int __n)
  { return __builtin_powil(__x, __n); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;

  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;

  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;

  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;

  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;

  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 480 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 730 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_fpclassify(0, 1, 4,
      3, 2, __type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isfinite(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isfinite(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isinf(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isinf(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnan(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnan(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnormal(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnormal(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    signbit(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_signbit(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreaterequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreaterequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isless(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isless(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isunordered(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isunordered(__type(__f1), __type(__f2));
    }




}
# 31 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h" 2
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iterator" 1 3
# 58 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iterator" 3
# 58 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iterator" 3







# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stream_iterator.h" 1 3
# 33 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stream_iterator.h" 3
# 33 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stream_iterator.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{
# 46 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stream_iterator.h" 3
  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t>
    class istream_iterator
    : public iterator<input_iterator_tag, _Tp, _Dist, const _Tp*, const _Tp&>
    {
    public:
      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_istream<_CharT, _Traits> istream_type;

    private:
      istream_type* _M_stream;
      _Tp _M_value;
      bool _M_ok;

    public:

                         istream_iterator()
      : _M_stream(0), _M_value(), _M_ok(false) {}


      istream_iterator(istream_type& __s)
      : _M_stream(&__s)
      { _M_read(); }

      istream_iterator(const istream_iterator& __obj)
      : _M_stream(__obj._M_stream), _M_value(__obj._M_value),
        _M_ok(__obj._M_ok)
      { }

      const _Tp&
      operator*() const
      {


                        ;
 return _M_value;
      }

      const _Tp*
      operator->() const { return &(operator*()); }

      istream_iterator&
      operator++()
      {


                        ;
 _M_read();
 return *this;
      }

      istream_iterator
      operator++(int)
      {


                        ;
 istream_iterator __tmp = *this;
 _M_read();
 return __tmp;
      }

      bool
      _M_equal(const istream_iterator& __x) const
      { return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream); }

    private:
      void
      _M_read()
      {
 _M_ok = (_M_stream && *_M_stream) ? true : false;
 if (_M_ok)
   {
     *_M_stream >> _M_value;
     _M_ok = *_M_stream ? true : false;
   }
      }
    };


  template<typename _Tp, typename _CharT, typename _Traits, typename _Dist>
    inline bool
    operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
        const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
    { return __x._M_equal(__y); }


  template <class _Tp, class _CharT, class _Traits, class _Dist>
    inline bool
    operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
        const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
    { return !__x._M_equal(__y); }
# 151 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stream_iterator.h" 3
  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT> >
    class ostream_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:


      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


    private:
      ostream_type* _M_stream;
      const _CharT* _M_string;

    public:

      ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}
# 182 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stream_iterator.h" 3
      ostream_iterator(ostream_type& __s, const _CharT* __c)
      : _M_stream(&__s), _M_string(__c) { }


      ostream_iterator(const ostream_iterator& __obj)
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string) { }



      ostream_iterator&
      operator=(const _Tp& __value)
      {


                        ;
 *_M_stream << __value;
 if (_M_string) *_M_stream << _M_string;
 return *this;
      }

      ostream_iterator&
      operator*()
      { return *this; }

      ostream_iterator&
      operator++()
      { return *this; }

      ostream_iterator&
      operator++(int)
      { return *this; }
    };




}
# 66 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iterator" 2 3
# 32 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h" 2


# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/default_parameters.h" 1
# 13 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/default_parameters.h"
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/thirdparty/vector_types.h" 1
# 65 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/thirdparty/vector_types.h"
struct __device_builtin__char1 {
 signed char x;
};

struct __device_builtin__uchar1 {
 unsigned char x;
};

struct __device_builtin__char2 {
 signed char x, y;
};

struct __device_builtin__uchar2 {
 unsigned char x, y;
};

struct __device_builtin__char3 {
 signed char x, y, z;
};

struct __device_builtin__uchar3 {
 unsigned char x, y, z;
};

struct __device_builtin__char4 {
 signed char x, y, z, w;
};

struct __device_builtin__uchar4 {
 unsigned char x, y, z, w;
};

struct __device_builtin__short1 {
 short x;
};

struct __device_builtin__ushort1 {
 unsigned short x;
};

struct __device_builtin__short2 {
 short x, y;
};

struct __device_builtin__ushort2 {
 unsigned short x, y;
};

struct __device_builtin__short3 {
 short x, y, z;
};

struct __device_builtin__ushort3 {
 unsigned short x, y, z;
};




struct __device_builtin__int1 {
 int x;
};
struct __device_builtin__int2 {
 int x;
 int y;
};

struct __device_builtin__uint1 {
 unsigned int x;
};
struct __device_builtin__uint2 {
 unsigned int x;
 unsigned int y;
};




struct __device_builtin__int3 {
 int x, y, z;
};

struct __device_builtin__uint3 {
 unsigned int x, y, z;
};

struct __device_builtin__int4 {
 int x, y, z, w;
};

struct __device_builtin__uint4 {
 unsigned int x, y, z, w;
};

struct __device_builtin__long1 {
 long int x;
};

struct __device_builtin__ulong1 {
 unsigned long x;
};

struct __device_builtin__long2 {
 long int x, y;
};

struct __device_builtin__ulong2 {
 unsigned long int x, y;
};

struct __device_builtin__long3 {
 long int x, y, z;
};

struct __device_builtin__ulong3 {
 unsigned long int x, y, z;
};

struct __device_builtin__long4 {
 long int x, y, z, w;
};

struct __device_builtin__ulong4 {
 unsigned long int x, y, z, w;
};

struct __device_builtin__float1 {
 float x;
};

struct __device_builtin__float2 {
 float x;
 float y;
};

struct __device_builtin__float3 {
 float x, y, z;
};

struct __device_builtin__float4 {
 float x, y, z, w;
};

struct __device_builtin__longlong1 {
 long long int x;
};

struct __device_builtin__ulonglong1 {
 unsigned long long int x;
};

struct __device_builtin__longlong2 {
 long long int x, y;
};

struct __device_builtin__ulonglong2 {
 unsigned long long int x, y;
};

struct __device_builtin__longlong3 {
 long long int x, y, z;
};

struct __device_builtin__ulonglong3 {
 unsigned long long int x, y, z;
};

struct __device_builtin__longlong4 {
 long long int x, y, z, w;
};

struct __device_builtin__ulonglong4 {
 unsigned long long int x, y, z, w;
};

struct __device_builtin__double1 {
 double x;
};

struct __device_builtin__double2 {
 double x, y;
};

struct __device_builtin__double3 {
 double x, y, z;
};

struct __device_builtin__double4 {
 double x, y, z, w;
};







typedef struct __device_builtin__char1 char1;
typedef struct __device_builtin__uchar1 uchar1;
typedef struct __device_builtin__char2 char2;
typedef struct __device_builtin__uchar2 uchar2;
typedef struct __device_builtin__char3 char3;
typedef struct __device_builtin__uchar3 uchar3;
typedef struct __device_builtin__char4 char4;
typedef struct __device_builtin__uchar4 uchar4;
typedef struct __device_builtin__short1 short1;
typedef struct __device_builtin__ushort1 ushort1;
typedef struct __device_builtin__short2 short2;
typedef struct __device_builtin__ushort2 ushort2;
typedef struct __device_builtin__short3 short3;
typedef struct __device_builtin__ushort3 ushort3;
typedef struct __device_builtin__short4 short4;
typedef struct __device_builtin__ushort4 ushort4;
typedef struct __device_builtin__int1 int1;
typedef struct __device_builtin__uint1 uint1;
typedef struct __device_builtin__int2 int2;
typedef struct __device_builtin__uint2 uint2;
typedef struct __device_builtin__int3 int3;
typedef struct __device_builtin__uint3 uint3;
typedef struct __device_builtin__int4 int4;
typedef struct __device_builtin__uint4 uint4;
typedef struct __device_builtin__long1 long1;
typedef struct __device_builtin__ulong1 ulong1;
typedef struct __device_builtin__long2 long2;
typedef struct __device_builtin__ulong2 ulong2;
typedef struct __device_builtin__long3 long3;
typedef struct __device_builtin__ulong3 ulong3;
typedef struct __device_builtin__long4 long4;
typedef struct __device_builtin__ulong4 ulong4;
typedef struct __device_builtin__float1 float1;
typedef struct __device_builtin__float2 float2;
typedef struct __device_builtin__float3 float3;
typedef struct __device_builtin__float4 float4;

typedef struct __device_builtin__longlong1 longlong1;
typedef struct __device_builtin__ulonglong1 ulonglong1;
typedef struct __device_builtin__longlong2 longlong2;
typedef struct __device_builtin__ulonglong2 ulonglong2;
typedef struct __device_builtin__longlong3 longlong3;
typedef struct __device_builtin__ulonglong3 ulonglong3;
typedef struct __device_builtin__longlong4 longlong4;
typedef struct __device_builtin__ulonglong4 ulonglong4;
typedef struct __device_builtin__double1 double1;
typedef struct __device_builtin__double2 double2;
typedef struct __device_builtin__double3 double3;
typedef struct __device_builtin__double4 double4;







inline uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z,
  unsigned int w) {

 uint4 val;
 val.x = x;
 val.y = y;
 val.z = z;
 val.w = w;
 return val;
}

inline int4 make_int4(int x, int y, int z, int w) {

 int4 val;
 val.x = x;
 val.y = y;
 val.z = z;
 val.w = w;
 return val;
}
inline uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z) {

 uint3 val;
 val.x = x;
 val.y = y;
 val.z = z;
 return val;
}
inline short2 make_short2(short x, short y) {
 short2 val;
 val.x = x;
 val.y = y;
 return val;
}

inline int3 make_int3(int x, int y, int z) {

 int3 val;
 val.x = x;
 val.y = y;
 val.z = z;
 return val;
}
inline float4 make_float4(float x, float y, float z, float w) {

 float4 val;
 val.x = x;
 val.y = y;
 val.z = z;
 val.w = w;
 return val;
}
inline float3 make_float3(float x, float y, float z) {

 float3 val;
 val.x = x;
 val.y = y;
 val.z = z;
 return val;
}
inline float2 make_float2(float x, float y) {

 float2 val;
 val.x = x;
 val.y = y;
 return val;
}
inline int2 make_int2(int x, int y) {
 int2 val;
 val.x = x;
 val.y = y;
 return val;
}
inline uint2 make_uint2(unsigned int x, unsigned int y) {
 uint2 val;
 val.x = x;
 val.y = y;
 return val;
}
inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) {
 uchar3 val;
 val.x = x;
 val.y = y;
 val.z = z;
 return val;
}
inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z,
  unsigned char w) {
 uchar4 val;
 val.x = x;
 val.y = y;
 val.z = z;
 val.w = w;
 return val;
}

class dim3 {
public:
 unsigned int x, y, z;

 dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) :
   x(vx), y(vy), z(vz) {
 }

 dim3(uint3 v) :
   x(v.x), y(v.y), z(v.z) {
 }
 operator uint3(void) {
  uint3 t;
  t.x = x;
  t.y = y;
  t.z = z;
  return t;
 }

};
# 14 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/default_parameters.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/thirdparty/cutil_math.h" 1
# 26 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/thirdparty/cutil_math.h"
typedef unsigned int uint;
typedef unsigned short ushort;
# 43 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/thirdparty/cutil_math.h"
inline float fminf(float a, float b) {
 return a < b ? a : b;
}

inline float fmaxf(float a, float b) {
 return a > b ? a : b;
}

inline int max(int a, int b) {
 return a > b ? a : b;
}

inline int min(int a, int b) {
 return a < b ? a : b;
}

inline float rsqrtf(float x) {
 return 1.0f / sqrtf(x);
}






inline float2 make_float2(float s) {
 return make_float2(s, s);
}
inline float2 make_float2(float3 a) {
 return make_float2(a.x, a.y);
}
inline float2 make_float2(int2 a) {
 return make_float2(float(a.x), float(a.y));
}
inline float2 make_float2(uint2 a) {
 return make_float2(float(a.x), float(a.y));
}

inline int2 make_int2(int s) {
 return make_int2(s, s);
}
inline int2 make_int2(int3 a) {
 return make_int2(a.x, a.y);
}
inline int2 make_int2(uint2 a) {
 return make_int2(int(a.x), int(a.y));
}
inline int2 make_int2(float2 a) {
 return make_int2(int(a.x), int(a.y));
}

inline uint2 make_uint2(uint s) {
 return make_uint2(s, s);
}
inline uint2 make_uint2(uint3 a) {
 return make_uint2(a.x, a.y);
}
inline uint2 make_uint2(int2 a) {
 return make_uint2(uint(a.x), uint(a.y));
}

inline float3 make_float3(float s) {
 return make_float3(s, s, s);
}
inline float3 make_float3(float2 a) {
 return make_float3(a.x, a.y, 0.0f);
}
inline float3 make_float3(float2 a, float s) {
 return make_float3(a.x, a.y, s);
}
inline float3 make_float3(float4 a) {
 return make_float3(a.x, a.y, a.z);
}
inline float3 make_float3(int3 a) {
 return make_float3(float(a.x), float(a.y), float(a.z));
}
inline float3 make_float3(uint3 a) {
 return make_float3(float(a.x), float(a.y), float(a.z));
}

inline int3 make_int3(int s) {
 return make_int3(s, s, s);
}
inline int3 make_int3(int2 a) {
 return make_int3(a.x, a.y, 0);
}
inline int3 make_int3(int2 a, int s) {
 return make_int3(a.x, a.y, s);
}
inline int3 make_int3(uint3 a) {
 return make_int3(int(a.x), int(a.y), int(a.z));
}
inline int3 make_int3(float3 a) {
 return make_int3(int(a.x), int(a.y), int(a.z));
}

inline uint3 make_uint3(uint s) {
 return make_uint3(s, s, s);
}
inline uint3 make_uint3(uint2 a) {
 return make_uint3(a.x, a.y, 0);
}
inline uint3 make_uint3(uint2 a, uint s) {
 return make_uint3(a.x, a.y, s);
}
inline uint3 make_uint3(uint4 a) {
 return make_uint3(a.x, a.y, a.z);
}
inline uint3 make_uint3(int3 a) {
 return make_uint3(uint(a.x), uint(a.y), uint(a.z));
}

inline float4 make_float4(float s) {
 return make_float4(s, s, s, s);
}
inline float4 make_float4(float3 a) {
 return make_float4(a.x, a.y, a.z, 0.0f);
}
inline float4 make_float4(float3 a, float w) {
 return make_float4(a.x, a.y, a.z, w);
}
inline float4 make_float4(int4 a) {
 return make_float4(float(a.x), float(a.y), float(a.z), float(a.w));
}
inline float4 make_float4(uint4 a) {
 return make_float4(float(a.x), float(a.y), float(a.z), float(a.w));
}

inline int4 make_int4(int s) {
 return make_int4(s, s, s, s);
}
inline int4 make_int4(int3 a) {
 return make_int4(a.x, a.y, a.z, 0);
}
inline int4 make_int4(int3 a, int w) {
 return make_int4(a.x, a.y, a.z, w);
}
inline int4 make_int4(uint4 a) {
 return make_int4(int(a.x), int(a.y), int(a.z), int(a.w));
}
inline int4 make_int4(float4 a) {
 return make_int4(int(a.x), int(a.y), int(a.z), int(a.w));
}

inline uint4 make_uint4(uint s) {
 return make_uint4(s, s, s, s);
}
inline uint4 make_uint4(uint3 a) {
 return make_uint4(a.x, a.y, a.z, 0);
}
inline uint4 make_uint4(uint3 a, uint w) {
 return make_uint4(a.x, a.y, a.z, w);
}
inline uint4 make_uint4(int4 a) {
 return make_uint4(uint(a.x), uint(a.y), uint(a.z), uint(a.w));
}





inline float2 operator-(float2 &a) {
 return make_float2(-a.x, -a.y);
}
inline int2 operator-(int2 &a) {
 return make_int2(-a.x, -a.y);
}
inline float3 operator-(float3 &a) {
 return make_float3(-a.x, -a.y, -a.z);
}
inline int3 operator-(int3 &a) {
 return make_int3(-a.x, -a.y, -a.z);
}
inline float4 operator-(float4 &a) {
 return make_float4(-a.x, -a.y, -a.z, -a.w);
}
inline int4 operator-(int4 &a) {
 return make_int4(-a.x, -a.y, -a.z, -a.w);
}





inline float2 operator+(float2 a, float2 b) {
 return make_float2(a.x + b.x, a.y + b.y);
}
inline void operator+=(float2 &a, float2 b) {
 a.x += b.x;
 a.y += b.y;
}
inline float2 operator+(float2 a, float b) {
 return make_float2(a.x + b, a.y + b);
}
inline float2 operator+(float b, float2 a) {
 return make_float2(a.x + b, a.y + b);
}
inline void operator+=(float2 &a, float b) {
 a.x += b;
 a.y += b;
}

inline int2 operator+(int2 a, int2 b) {
 return make_int2(a.x + b.x, a.y + b.y);
}
inline void operator+=(int2 &a, int2 b) {
 a.x += b.x;
 a.y += b.y;
}
inline int2 operator+(int2 a, int b) {
 return make_int2(a.x + b, a.y + b);
}
inline int2 operator+(int b, int2 a) {
 return make_int2(a.x + b, a.y + b);
}
inline void operator+=(int2 &a, int b) {
 a.x += b;
 a.y += b;
}

inline uint2 operator+(uint2 a, uint2 b) {
 return make_uint2(a.x + b.x, a.y + b.y);
}
inline void operator+=(uint2 &a, uint2 b) {
 a.x += b.x;
 a.y += b.y;
}
inline uint2 operator+(uint2 a, uint b) {
 return make_uint2(a.x + b, a.y + b);
}
inline uint2 operator+(uint b, uint2 a) {
 return make_uint2(a.x + b, a.y + b);
}
inline void operator+=(uint2 &a, uint b) {
 a.x += b;
 a.y += b;
}

inline float3 operator+(float3 a, float3 b) {
 return make_float3(a.x + b.x, a.y + b.y, a.z + b.z);
}
inline void operator+=(float3 &a, float3 b) {
 a.x += b.x;
 a.y += b.y;
 a.z += b.z;
}
inline float3 operator+(float3 a, float b) {
 return make_float3(a.x + b, a.y + b, a.z + b);
}
inline void operator+=(float3 &a, float b) {
 a.x += b;
 a.y += b;
 a.z += b;
}

inline int3 operator+(int3 a, int3 b) {
 return make_int3(a.x + b.x, a.y + b.y, a.z + b.z);
}
inline void operator+=(int3 &a, int3 b) {
 a.x += b.x;
 a.y += b.y;
 a.z += b.z;
}
inline int3 operator+(int3 a, int b) {
 return make_int3(a.x + b, a.y + b, a.z + b);
}
inline void operator+=(int3 &a, int b) {
 a.x += b;
 a.y += b;
 a.z += b;
}

inline uint3 operator+(uint3 a, uint3 b) {
 return make_uint3(a.x + b.x, a.y + b.y, a.z + b.z);
}
inline void operator+=(uint3 &a, uint3 b) {
 a.x += b.x;
 a.y += b.y;
 a.z += b.z;
}
inline uint3 operator+(uint3 a, uint b) {
 return make_uint3(a.x + b, a.y + b, a.z + b);
}
inline void operator+=(uint3 &a, uint b) {
 a.x += b;
 a.y += b;
 a.z += b;
}

inline int3 operator+(int b, int3 a) {
 return make_int3(a.x + b, a.y + b, a.z + b);
}
inline uint3 operator+(uint b, uint3 a) {
 return make_uint3(a.x + b, a.y + b, a.z + b);
}
inline float3 operator+(float b, float3 a) {
 return make_float3(a.x + b, a.y + b, a.z + b);
}

inline float4 operator+(float4 a, float4 b) {
 return make_float4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
inline void operator+=(float4 &a, float4 b) {
 a.x += b.x;
 a.y += b.y;
 a.z += b.z;
 a.w += b.w;
}
inline float4 operator+(float4 a, float b) {
 return make_float4(a.x + b, a.y + b, a.z + b, a.w + b);
}
inline float4 operator+(float b, float4 a) {
 return make_float4(a.x + b, a.y + b, a.z + b, a.w + b);
}
inline void operator+=(float4 &a, float b) {
 a.x += b;
 a.y += b;
 a.z += b;
 a.w += b;
}

inline int4 operator+(int4 a, int4 b) {
 return make_int4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
inline void operator+=(int4 &a, int4 b) {
 a.x += b.x;
 a.y += b.y;
 a.z += b.z;
 a.w += b.w;
}
inline int4 operator+(int4 a, int b) {
 return make_int4(a.x + b, a.y + b, a.z + b, a.w + b);
}
inline int4 operator+(int b, int4 a) {
 return make_int4(a.x + b, a.y + b, a.z + b, a.w + b);
}
inline void operator+=(int4 &a, int b) {
 a.x += b;
 a.y += b;
 a.z += b;
 a.w += b;
}

inline uint4 operator+(uint4 a, uint4 b) {
 return make_uint4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
inline void operator+=(uint4 &a, uint4 b) {
 a.x += b.x;
 a.y += b.y;
 a.z += b.z;
 a.w += b.w;
}
inline uint4 operator+(uint4 a, uint b) {
 return make_uint4(a.x + b, a.y + b, a.z + b, a.w + b);
}
inline uint4 operator+(uint b, uint4 a) {
 return make_uint4(a.x + b, a.y + b, a.z + b, a.w + b);
}
inline void operator+=(uint4 &a, uint b) {
 a.x += b;
 a.y += b;
 a.z += b;
 a.w += b;
}





inline float2 operator-(float2 a, float2 b) {
 return make_float2(a.x - b.x, a.y - b.y);
}
inline void operator-=(float2 &a, float2 b) {
 a.x -= b.x;
 a.y -= b.y;
}
inline float2 operator-(float2 a, float b) {
 return make_float2(a.x - b, a.y - b);
}
inline float2 operator-(float b, float2 a) {
 return make_float2(b - a.x, b - a.y);
}
inline void operator-=(float2 &a, float b) {
 a.x -= b;
 a.y -= b;
}

inline int2 operator-(int2 a, int2 b) {
 return make_int2(a.x - b.x, a.y - b.y);
}
inline void operator-=(int2 &a, int2 b) {
 a.x -= b.x;
 a.y -= b.y;
}
inline int2 operator-(int2 a, int b) {
 return make_int2(a.x - b, a.y - b);
}
inline int2 operator-(int b, int2 a) {
 return make_int2(b - a.x, b - a.y);
}
inline void operator-=(int2 &a, int b) {
 a.x -= b;
 a.y -= b;
}

inline uint2 operator-(uint2 a, uint2 b) {
 return make_uint2(a.x - b.x, a.y - b.y);
}
inline void operator-=(uint2 &a, uint2 b) {
 a.x -= b.x;
 a.y -= b.y;
}
inline uint2 operator-(uint2 a, uint b) {
 return make_uint2(a.x - b, a.y - b);
}
inline uint2 operator-(uint b, uint2 a) {
 return make_uint2(b - a.x, b - a.y);
}
inline void operator-=(uint2 &a, uint b) {
 a.x -= b;
 a.y -= b;
}

inline float3 operator-(float3 a, float3 b) {
 return make_float3(a.x - b.x, a.y - b.y, a.z - b.z);
}
inline void operator-=(float3 &a, float3 b) {
 a.x -= b.x;
 a.y -= b.y;
 a.z -= b.z;
}
inline float3 operator-(float3 a, float b) {
 return make_float3(a.x - b, a.y - b, a.z - b);
}
inline float3 operator-(float b, float3 a) {
 return make_float3(b - a.x, b - a.y, b - a.z);
}
inline void operator-=(float3 &a, float b) {
 a.x -= b;
 a.y -= b;
 a.z -= b;
}

inline int3 operator-(int3 a, int3 b) {
 return make_int3(a.x - b.x, a.y - b.y, a.z - b.z);
}
inline void operator-=(int3 &a, int3 b) {
 a.x -= b.x;
 a.y -= b.y;
 a.z -= b.z;
}
inline int3 operator-(int3 a, int b) {
 return make_int3(a.x - b, a.y - b, a.z - b);
}
inline int3 operator-(int b, int3 a) {
 return make_int3(b - a.x, b - a.y, b - a.z);
}
inline void operator-=(int3 &a, int b) {
 a.x -= b;
 a.y -= b;
 a.z -= b;
}

inline uint3 operator-(uint3 a, uint3 b) {
 return make_uint3(a.x - b.x, a.y - b.y, a.z - b.z);
}
inline void operator-=(uint3 &a, uint3 b) {
 a.x -= b.x;
 a.y -= b.y;
 a.z -= b.z;
}
inline uint3 operator-(uint3 a, uint b) {
 return make_uint3(a.x - b, a.y - b, a.z - b);
}
inline uint3 operator-(uint b, uint3 a) {
 return make_uint3(b - a.x, b - a.y, b - a.z);
}
inline void operator-=(uint3 &a, uint b) {
 a.x -= b;
 a.y -= b;
 a.z -= b;
}

inline float4 operator-(float4 a, float4 b) {
 return make_float4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}
inline void operator-=(float4 &a, float4 b) {
 a.x -= b.x;
 a.y -= b.y;
 a.z -= b.z;
 a.w -= b.w;
}
inline float4 operator-(float4 a, float b) {
 return make_float4(a.x - b, a.y - b, a.z - b, a.w - b);
}
inline void operator-=(float4 &a, float b) {
 a.x -= b;
 a.y -= b;
 a.z -= b;
 a.w -= b;
}

inline int4 operator-(int4 a, int4 b) {
 return make_int4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}
inline void operator-=(int4 &a, int4 b) {
 a.x -= b.x;
 a.y -= b.y;
 a.z -= b.z;
 a.w -= b.w;
}
inline int4 operator-(int4 a, int b) {
 return make_int4(a.x - b, a.y - b, a.z - b, a.w - b);
}
inline int4 operator-(int b, int4 a) {
 return make_int4(b - a.x, b - a.y, b - a.z, b - a.w);
}
inline void operator-=(int4 &a, int b) {
 a.x -= b;
 a.y -= b;
 a.z -= b;
 a.w -= b;
}

inline uint4 operator-(uint4 a, uint4 b) {
 return make_uint4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
}
inline void operator-=(uint4 &a, uint4 b) {
 a.x -= b.x;
 a.y -= b.y;
 a.z -= b.z;
 a.w -= b.w;
}
inline uint4 operator-(uint4 a, uint b) {
 return make_uint4(a.x - b, a.y - b, a.z - b, a.w - b);
}
inline uint4 operator-(uint b, uint4 a) {
 return make_uint4(b - a.x, b - a.y, b - a.z, b - a.w);
}
inline void operator-=(uint4 &a, uint b) {
 a.x -= b;
 a.y -= b;
 a.z -= b;
 a.w -= b;
}





inline float2 operator*(float2 a, float2 b) {
 return make_float2(a.x * b.x, a.y * b.y);
}
inline void operator*=(float2 &a, float2 b) {
 a.x *= b.x;
 a.y *= b.y;
}
inline float2 operator*(float2 a, float b) {
 return make_float2(a.x * b, a.y * b);
}
inline float2 operator*(float b, float2 a) {
 return make_float2(b * a.x, b * a.y);
}
inline void operator*=(float2 &a, float b) {
 a.x *= b;
 a.y *= b;
}

inline int2 operator*(int2 a, int2 b) {
 return make_int2(a.x * b.x, a.y * b.y);
}
inline void operator*=(int2 &a, int2 b) {
 a.x *= b.x;
 a.y *= b.y;
}
inline int2 operator*(int2 a, int b) {
 return make_int2(a.x * b, a.y * b);
}
inline int2 operator*(int b, int2 a) {
 return make_int2(b * a.x, b * a.y);
}
inline void operator*=(int2 &a, int b) {
 a.x *= b;
 a.y *= b;
}

inline uint2 operator*(uint2 a, uint2 b) {
 return make_uint2(a.x * b.x, a.y * b.y);
}
inline void operator*=(uint2 &a, uint2 b) {
 a.x *= b.x;
 a.y *= b.y;
}
inline uint2 operator*(uint2 a, uint b) {
 return make_uint2(a.x * b, a.y * b);
}
inline uint2 operator*(uint b, uint2 a) {
 return make_uint2(b * a.x, b * a.y);
}
inline void operator*=(uint2 &a, uint b) {
 a.x *= b;
 a.y *= b;
}

inline float3 operator*(float3 a, float3 b) {
 return make_float3(a.x * b.x, a.y * b.y, a.z * b.z);
}
inline void operator*=(float3 &a, float3 b) {
 a.x *= b.x;
 a.y *= b.y;
 a.z *= b.z;
}
inline float3 operator*(float3 a, float b) {
 return make_float3(a.x * b, a.y * b, a.z * b);
}
inline float3 operator*(float b, float3 a) {
 return make_float3(b * a.x, b * a.y, b * a.z);
}
inline void operator*=(float3 &a, float b) {
 a.x *= b;
 a.y *= b;
 a.z *= b;
}

inline int3 operator*(int3 a, int3 b) {
 return make_int3(a.x * b.x, a.y * b.y, a.z * b.z);
}
inline void operator*=(int3 &a, int3 b) {
 a.x *= b.x;
 a.y *= b.y;
 a.z *= b.z;
}
inline int3 operator*(int3 a, int b) {
 return make_int3(a.x * b, a.y * b, a.z * b);
}
inline int3 operator*(int b, int3 a) {
 return make_int3(b * a.x, b * a.y, b * a.z);
}
inline void operator*=(int3 &a, int b) {
 a.x *= b;
 a.y *= b;
 a.z *= b;
}

inline uint3 operator*(uint3 a, uint3 b) {
 return make_uint3(a.x * b.x, a.y * b.y, a.z * b.z);
}
inline void operator*=(uint3 &a, uint3 b) {
 a.x *= b.x;
 a.y *= b.y;
 a.z *= b.z;
}
inline uint3 operator*(uint3 a, uint b) {
 return make_uint3(a.x * b, a.y * b, a.z * b);
}
inline uint3 operator*(uint b, uint3 a) {
 return make_uint3(b * a.x, b * a.y, b * a.z);
}
inline void operator*=(uint3 &a, uint b) {
 a.x *= b;
 a.y *= b;
 a.z *= b;
}

inline float4 operator*(float4 a, float4 b) {
 return make_float4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
inline void operator*=(float4 &a, float4 b) {
 a.x *= b.x;
 a.y *= b.y;
 a.z *= b.z;
 a.w *= b.w;
}
inline float4 operator*(float4 a, float b) {
 return make_float4(a.x * b, a.y * b, a.z * b, a.w * b);
}
inline float4 operator*(float b, float4 a) {
 return make_float4(b * a.x, b * a.y, b * a.z, b * a.w);
}
inline void operator*=(float4 &a, float b) {
 a.x *= b;
 a.y *= b;
 a.z *= b;
 a.w *= b;
}

inline int4 operator*(int4 a, int4 b) {
 return make_int4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
inline void operator*=(int4 &a, int4 b) {
 a.x *= b.x;
 a.y *= b.y;
 a.z *= b.z;
 a.w *= b.w;
}
inline int4 operator*(int4 a, int b) {
 return make_int4(a.x * b, a.y * b, a.z * b, a.w * b);
}
inline int4 operator*(int b, int4 a) {
 return make_int4(b * a.x, b * a.y, b * a.z, b * a.w);
}
inline void operator*=(int4 &a, int b) {
 a.x *= b;
 a.y *= b;
 a.z *= b;
 a.w *= b;
}

inline uint4 operator*(uint4 a, uint4 b) {
 return make_uint4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
}
inline void operator*=(uint4 &a, uint4 b) {
 a.x *= b.x;
 a.y *= b.y;
 a.z *= b.z;
 a.w *= b.w;
}
inline uint4 operator*(uint4 a, uint b) {
 return make_uint4(a.x * b, a.y * b, a.z * b, a.w * b);
}
inline uint4 operator*(uint b, uint4 a) {
 return make_uint4(b * a.x, b * a.y, b * a.z, b * a.w);
}
inline void operator*=(uint4 &a, uint b) {
 a.x *= b;
 a.y *= b;
 a.z *= b;
 a.w *= b;
}





inline float2 operator/(float2 a, float2 b) {
 return make_float2(a.x / b.x, a.y / b.y);
}
inline void operator/=(float2 &a, float2 b) {
 a.x /= b.x;
 a.y /= b.y;
}
inline float2 operator/(float2 a, float b) {
 return make_float2(a.x / b, a.y / b);
}
inline void operator/=(float2 &a, float b) {
 a.x /= b;
 a.y /= b;
}
inline float2 operator/(float b, float2 a) {
 return make_float2(b / a.x, b / a.y);
}

inline float3 operator/(float3 a, float3 b) {
 return make_float3(a.x / b.x, a.y / b.y, a.z / b.z);
}
inline void operator/=(float3 &a, float3 b) {
 a.x /= b.x;
 a.y /= b.y;
 a.z /= b.z;
}
inline float3 operator/(float3 a, float b) {
 return make_float3(a.x / b, a.y / b, a.z / b);
}
inline void operator/=(float3 &a, float b) {
 a.x /= b;
 a.y /= b;
 a.z /= b;
}
inline float3 operator/(float b, float3 a) {
 return make_float3(b / a.x, b / a.y, b / a.z);
}

inline float4 operator/(float4 a, float4 b) {
 return make_float4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
}
inline void operator/=(float4 &a, float4 b) {
 a.x /= b.x;
 a.y /= b.y;
 a.z /= b.z;
 a.w /= b.w;
}
inline float4 operator/(float4 a, float b) {
 return make_float4(a.x / b, a.y / b, a.z / b, a.w / b);
}
inline void operator/=(float4 &a, float b) {
 a.x /= b;
 a.y /= b;
 a.z /= b;
 a.w /= b;
}
inline float4 operator/(float b, float4 a) {
 return make_float4(b / a.x, b / a.y, b / a.z, b / a.w);
}





inline float2 fminf(float2 a, float2 b) {
 return make_float2(fminf(a.x, b.x), fminf(a.y, b.y));
}
inline float3 fminf(float3 a, float3 b) {
 return make_float3(fminf(a.x, b.x), fminf(a.y, b.y), fminf(a.z, b.z));
}
inline float4 fminf(float4 a, float4 b) {
 return make_float4(fminf(a.x, b.x), fminf(a.y, b.y), fminf(a.z, b.z),
   fminf(a.w, b.w));
}

inline int2 min(int2 a, int2 b) {
 return make_int2(min(a.x, b.x), min(a.y, b.y));
}
inline int3 min(int3 a, int3 b) {
 return make_int3(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z));
}
inline int4 min(int4 a, int4 b) {
 return make_int4(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z), min(a.w, b.w));
}

inline uint2 min(uint2 a, uint2 b) {
 return make_uint2(min(a.x, b.x), min(a.y, b.y));
}
inline uint3 min(uint3 a, uint3 b) {
 return make_uint3(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z));
}
inline uint4 min(uint4 a, uint4 b) {
 return make_uint4(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z),
   min(a.w, b.w));
}

inline uint min(uint2 a) {
 return min(a.x, a.y);
}
inline uint min(uint3 a) {
 return min(a.x, min(a.y, a.z));
}
inline uint min(uint4 a) {
 return min(min(a.x, a.y), min(a.z, a.w));
}

inline float min(float2 a) {
 return fminf(a.x, a.y);
}
inline float min(float3 a) {
 return fminf(a.x, fminf(a.y, a.z));
}
inline float min(float4 a) {
 return fminf(fminf(a.x, a.y), fminf(a.z, a.w));
}





inline float2 fmaxf(float2 a, float2 b) {
 return make_float2(fmaxf(a.x, b.x), fmaxf(a.y, b.y));
}
inline float3 fmaxf(float3 a, float3 b) {
 return make_float3(fmaxf(a.x, b.x), fmaxf(a.y, b.y), fmaxf(a.z, b.z));
}
inline float4 fmaxf(float4 a, float4 b) {
 return make_float4(fmaxf(a.x, b.x), fmaxf(a.y, b.y), fmaxf(a.z, b.z),
   fmaxf(a.w, b.w));
}

inline int2 max(int2 a, int2 b) {
 return make_int2(max(a.x, b.x), max(a.y, b.y));
}
inline int3 max(int3 a, int3 b) {
 return make_int3(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z));
}
inline int4 max(int4 a, int4 b) {
 return make_int4(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z), max(a.w, b.w));
}

inline uint2 max(uint2 a, uint2 b) {
 return make_uint2(max(a.x, b.x), max(a.y, b.y));
}
inline uint3 max(uint3 a, uint3 b) {
 return make_uint3(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z));
}
inline uint4 max(uint4 a, uint4 b) {
 return make_uint4(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z),
   max(a.w, b.w));
}

inline uint max(uint2 a) {
 return max(a.x, a.y);
}
inline uint max(uint3 a) {
 return max(a.x, max(a.y, a.z));
}
inline uint max(uint4 a) {
 return max(max(a.x, a.y), max(a.z, a.w));
}

inline float max(float2 a) {
 return fmaxf(a.x, a.y);
}
inline float max(float3 a) {
 return fmaxf(a.x, fmaxf(a.y, a.z));
}
inline float max(float4 a) {
 return fmaxf(fmaxf(a.x, a.y), fmaxf(a.z, a.w));
}






inline float lerp(float a, float b, float t) {
 return a + t * (b - a);
}
inline float2 lerp(float2 a, float2 b, float t) {
 return a + t * (b - a);
}
inline float3 lerp(float3 a, float3 b, float t) {
 return a + t * (b - a);
}
inline float4 lerp(float4 a, float4 b, float t) {
 return a + t * (b - a);
}






inline float clamp(float f, float a, float b) {
 return fmaxf(a, fminf(f, b));
}
inline int clamp(int f, int a, int b) {
 return max(a, min(f, b));
}
inline uint clamp(uint f, uint a, uint b) {
 return max(a, min(f, b));
}

inline float2 clamp(float2 v, float a, float b) {
 return make_float2(clamp(v.x, a, b), clamp(v.y, a, b));
}
inline float2 clamp(float2 v, float2 a, float2 b) {
 return make_float2(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y));
}
inline float3 clamp(float3 v, float a, float b) {
 return make_float3(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b));
}
inline float3 clamp(float3 v, float3 a, float3 b) {
 return make_float3(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y),
   clamp(v.z, a.z, b.z));
}
inline float4 clamp(float4 v, float a, float b) {
 return make_float4(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b),
   clamp(v.w, a, b));
}
inline float4 clamp(float4 v, float4 a, float4 b) {
 return make_float4(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y),
   clamp(v.z, a.z, b.z), clamp(v.w, a.w, b.w));
}

inline int2 clamp(int2 v, int a, int b) {
 return make_int2(clamp(v.x, a, b), clamp(v.y, a, b));
}
inline int2 clamp(int2 v, int2 a, int2 b) {
 return make_int2(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y));
}
inline int3 clamp(int3 v, int a, int b) {
 return make_int3(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b));
}
inline int3 clamp(int3 v, int3 a, int3 b) {
 return make_int3(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y),
   clamp(v.z, a.z, b.z));
}
inline int4 clamp(int4 v, int a, int b) {
 return make_int4(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b),
   clamp(v.w, a, b));
}
inline int4 clamp(int4 v, int4 a, int4 b) {
 return make_int4(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y),
   clamp(v.z, a.z, b.z), clamp(v.w, a.w, b.w));
}

inline uint2 clamp(uint2 v, uint a, uint b) {
 return make_uint2(clamp(v.x, a, b), clamp(v.y, a, b));
}
inline uint2 clamp(uint2 v, uint2 a, uint2 b) {
 return make_uint2(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y));
}
inline uint3 clamp(uint3 v, uint a, uint b) {
 return make_uint3(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b));
}
inline uint3 clamp(uint3 v, uint3 a, uint3 b) {
 return make_uint3(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y),
   clamp(v.z, a.z, b.z));
}
inline uint4 clamp(uint4 v, uint a, uint b) {
 return make_uint4(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b),
   clamp(v.w, a, b));
}
inline uint4 clamp(uint4 v, uint4 a, uint4 b) {
 return make_uint4(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y),
   clamp(v.z, a.z, b.z), clamp(v.w, a.w, b.w));
}





inline float dot(float2 a, float2 b) {







 return a.x * b.x + a.y * b.y;

}
inline float dot(float3 a, float3 b) {






 return a.x * b.x + a.y * b.y + a.z * b.z;

}
inline float dot(float4 a, float4 b) {






 return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;

}

inline int dot(int2 a, int2 b) {
 return a.x * b.x + a.y * b.y;
}
inline int dot(int3 a, int3 b) {
 return a.x * b.x + a.y * b.y + a.z * b.z;
}
inline int dot(int4 a, int4 b) {
 return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
}

inline uint dot(uint2 a, uint2 b) {
 return a.x * b.x + a.y * b.y;
}
inline uint dot(uint3 a, uint3 b) {
 return a.x * b.x + a.y * b.y + a.z * b.z;
}
inline uint dot(uint4 a, uint4 b) {
 return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
}





inline float length(float2 v) {





 return sqrtf(dot(v, v));

}
inline float length(float3 v) {





 return sqrtf(dot(v, v));

}
inline float length(float4 v) {





 return sqrtf(dot(v, v));


}





inline float2 normalize(float2 v) {

 float invLen = rsqrtf(dot(v, v));
 return v * invLen;

}
inline float3 normalize(float3 v) {

 float invLen = rsqrtf(dot(v, v));
 return v * invLen;

}
inline float4 normalize(float4 v) {

 float invLen = rsqrtf(dot(v, v));
 return v * invLen;

}





inline float2 floorf(float2 v) {
 return make_float2(floorf(v.x), floorf(v.y));
}
inline float3 floorf(float3 v) {
 return make_float3(floorf(v.x), floorf(v.y), floorf(v.z));
}
inline float4 floorf(float4 v) {
 return make_float4(floorf(v.x), floorf(v.y), floorf(v.z), floorf(v.w));
}





inline float fracf(float v) {
 return v - floorf(v);
}
inline float2 fracf(float2 v) {
 return make_float2(fracf(v.x), fracf(v.y));
}
inline float3 fracf(float3 v) {
 return make_float3(fracf(v.x), fracf(v.y), fracf(v.z));
}
inline float4 fracf(float4 v) {
 return make_float4(fracf(v.x), fracf(v.y), fracf(v.z), fracf(v.w));
}





inline float2 fmodf(float2 a, float2 b) {
 return make_float2(fmodf(a.x, b.x), fmodf(a.y, b.y));
}
inline float3 fmodf(float3 a, float3 b) {
 return make_float3(fmodf(a.x, b.x), fmodf(a.y, b.y), fmodf(a.z, b.z));
}
inline float4 fmodf(float4 a, float4 b) {
 return make_float4(fmodf(a.x, b.x), fmodf(a.y, b.y), fmodf(a.z, b.z),
   fmodf(a.w, b.w));
}





inline float2 fabs(float2 v) {
 return make_float2(fabs(v.x), fabs(v.y));
}
inline float3 fabs(float3 v) {
 return make_float3(fabs(v.x), fabs(v.y), fabs(v.z));
}
inline float4 fabs(float4 v) {
 return make_float4(fabs(v.x), fabs(v.y), fabs(v.z), fabs(v.w));
}

inline int2 abs(int2 v) {
 return make_int2(abs(v.x), abs(v.y));
}
inline int3 abs(int3 v) {
 return make_int3(abs(v.x), abs(v.y), abs(v.z));
}
inline int4 abs(int4 v) {
 return make_int4(abs(v.x), abs(v.y), abs(v.z), abs(v.w));
}







inline float3 reflect(float3 i, float3 n) {
 return i - 2.0f * n * dot(n, i);
}





inline float3 cross(float3 a, float3 b) {
 return make_float3(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z,
   a.x * b.y - a.y * b.x);
}
# 1256 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/thirdparty/cutil_math.h"
inline float smoothstep(float a, float b, float x) {
 float y = clamp((x - a) / (b - a), 0.0f, 1.0f);
 return (y * y * (3.0f - (2.0f * y)));
}
inline float2 smoothstep(float2 a, float2 b, float2 x) {
 float2 y = clamp((x - a) / (b - a), 0.0f, 1.0f);
 return (y * y * (make_float2(3.0f) - (make_float2(2.0f) * y)));
}
inline float3 smoothstep(float3 a, float3 b, float3 x) {
 float3 y = clamp((x - a) / (b - a), 0.0f, 1.0f);
 return (y * y * (make_float3(3.0f) - (make_float3(2.0f) * y)));
}
inline float4 smoothstep(float4 a, float4 b, float4 x) {
 float4 y = clamp((x - a) / (b - a), 0.0f, 1.0f);
 return (y * y * (make_float4(3.0f) - (make_float4(2.0f) * y)));
}





inline uint2 operator<<(uint2 a, int b) {
 return make_uint2(a.x << b, a.y << b);
}

inline uint3 operator<<(uint3 a, int b) {
 return make_uint3(a.x << b, a.y << b, a.z << b);
}

inline uint4 operator<<(uint4 a, int b) {
 return make_uint4(a.x << b, a.y << b, a.z << b, a.w << b);
}

inline uint2 operator>>(uint2 a, int b) {
 return make_uint2(a.x >> b, a.y >> b);
}

inline uint3 operator>>(uint3 a, int b) {
 return make_uint3(a.x >> b, a.y >> b, a.z >> b);
}

inline uint4 operator>>(uint4 a, int b) {
 return make_uint4(a.x >> b, a.y >> b, a.z >> b, a.w >> b);
}

inline int2 operator<<(int2 a, int b) {
 return make_int2(a.x << b, a.y << b);
}

inline int3 operator<<(int3 a, int b) {
 return make_int3(a.x << b, a.y << b, a.z << b);
}

inline int4 operator<<(int4 a, int b) {
 return make_int4(a.x << b, a.y << b, a.z << b, a.w << b);
}

inline int2 operator>>(int2 a, int b) {
 return make_int2(a.x >> b, a.y >> b);
}

inline int3 operator>>(int3 a, int b) {
 return make_int3(a.x >> b, a.y >> b, a.z >> b);
}

inline int4 operator>>(int4 a, int b) {
 return make_int4(a.x >> b, a.y >> b, a.z >> b, a.w >> b);
}
# 15 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/default_parameters.h" 2
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 1 3
# 59 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 3
# 59 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 3



# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 1 3
# 64 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 78 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 3
  template<typename _T1, typename _T2>
    inline void
    _Construct(_T1* __p, const _T2& __value)
    {


      ::new(static_cast<void*>(__p)) _T1(__value);
    }





  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }







  template <typename _Tp> class allocator;

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 __alloc.destroy(std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 63 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 1 3
# 61 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   if (true)
     {
       for (; __first != __last; ++__first, ++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   if (false)
     {
       std::_Destroy(__result, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 107 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
     && __is_trivial(_ValueType2))>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 164 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill<__is_trivial(_ValueType)>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { std::fill_n(__first, __n, __x); }
    };
# 218 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill_n<__is_trivial(_ValueType)>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   for (; __first != __last; ++__first, ++__cur)
     __alloc.construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__result, __cur, __alloc);
                          ;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a((__first),
      (__last),
      __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __cur != __last; ++__cur)
     __alloc.construct(std::__addressof(*__cur), __x);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __n > 0; --__n, ++__cur)
     __alloc.construct(std::__addressof(*__cur), __x);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill_n(__first, __n, __x); }
# 332 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      if (true)
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      if (true)
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      if (true)
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      if (true)
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      if (false)
 {
   std::_Destroy(__first2, __mid2, __alloc);
                          ;
 }
    }
# 653 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
}
# 64 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 1 3
# 65 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 typename _Tp_alloc_type::pointer _M_start;
 typename _Tp_alloc_type::pointer _M_finish;
 typename _Tp_alloc_type::pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }

 _Vector_impl(_Tp_alloc_type const& __a)
 : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
# 141 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      typename _Tp_alloc_type::pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
      {
 if (__p)
   _M_impl.deallocate(__p, __n);
      }
    };
# 179 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;



      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type::pointer pointer;
      typedef typename _Tp_alloc_type::const_pointer const_pointer;
      typedef typename _Tp_alloc_type::reference reference;
      typedef typename _Tp_alloc_type::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:





      vector()
      : _Base() { }





      explicit
      vector(const allocator_type& __a)
      : _Base(__a) { }
# 262 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const value_type& __value = value_type(),
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 278 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(), __x._M_get_Tp_allocator())
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 333 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _InputIterator>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_initialize_dispatch(__first, __last, _Integral());
 }







      ~vector()
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 361 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 411 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 427 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }
# 454 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      using _Base::get_allocator;







      iterator
      begin()
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end()
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }
# 569 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      size_type
      size() const
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const
      { return _M_get_Tp_allocator().max_size(); }
# 628 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, value_type __x = value_type())
      {
 if (__new_size > size())
   insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 649 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      size_type
      capacity() const
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const
      { return begin() == end(); }
# 679 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 694 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      reference
      operator[](size_type __n)
      { return *(this->_M_impl._M_start + __n); }
# 709 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const
      { return *(this->_M_impl._M_start + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("vector::_M_range_check"));
      }

    public:
# 734 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 752 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front()
      { return *begin(); }





      const_reference
      front() const
      { return *begin(); }





      reference
      back()
      { return *(end() - 1); }





      const_reference
      back() const
      { return *(end() - 1); }
# 801 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      pointer

      data()
      { return std::__addressof(front()); }




      const_pointer

      data() const
      { return std::__addressof(front()); }
# 825 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     this->_M_impl.construct(this->_M_impl._M_finish, __x);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(end(), __x);
      }
# 856 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      pop_back()
      {
 --this->_M_impl._M_finish;
 this->_M_impl.destroy(this->_M_impl._M_finish);
      }
# 892 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      insert(iterator __position, const value_type& __x);
# 942 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      insert(iterator __position, size_type __n, const value_type& __x)
      { _M_fill_insert(__position, __n, __x); }
# 960 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        insert(iterator __position, _InputIterator __first,
        _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_insert_dispatch(__position, __first, __last, _Integral());
 }
# 985 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      erase(iterator __position);
# 1006 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1018 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      swap(vector& __x)
      {
 std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 std::swap(this->_M_impl._M_end_of_storage,
    __x._M_impl._M_end_of_storage);



 std::__alloc_swap<_Tp_alloc_type>::_S_do_it(_M_get_Tp_allocator(),
          __x._M_get_Tp_allocator());
      }







      void
      clear()
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   if (true)
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   if (false)
     {
       _M_deallocate(__result, __n);
                              ;
     }
 }
# 1073 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)
     push_back(*__first);
 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
          _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }
# 1147 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);
# 1187 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
# 1229 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      _M_insert_aux(iterator __position, const value_type& __x);







      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos)
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }
    };
# 1271 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1288 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 65 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 1 3
# 62 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() : _M_p(0), _M_mask(0) { }

    operator bool() const
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x)
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x)
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip()
    { *_M_p ^= _M_mask; }
  };

  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename _Alloc::template rebind<_Bit_type>::other
        _Bit_alloc_type;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type* _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator()
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }
# 431 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 3
      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_type*
      _M_allocate(size_t __n)
      { return _M_impl.allocate((__n + int(_S_word_bit) - 1)
    / int(_S_word_bit)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   _M_impl.deallocate(_M_impl._M_start._M_p,
        _M_impl._M_end_of_storage - _M_impl._M_start._M_p);
      }
    };


}




namespace std __attribute__ ((__visibility__ ("default")))
{
# 478 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;





  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()
    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }

    explicit
    vector(size_type __n, const bool& __value = bool(),
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_of_storage,
  __value ? ~0 : 0);
    }

    vector(const vector& __x)
    : _Base(__x._M_get_Bit_allocator())
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }
# 547 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 3
    template<typename _InputIterator>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_initialize_dispatch(__first, __last, _Integral());
      }

    ~vector() { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;
      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }
# 596 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 3
    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }

    template<typename _InputIterator>
      void
      assign(_InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_assign_dispatch(__first, __last, _Integral());
      }







    iterator
    begin()
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const
    { return this->_M_impl._M_start; }

    iterator
    end()
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin()
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend()
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const
    { return const_reverse_iterator(begin()); }
# 664 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 3
    size_type
    size() const
    { return size_type(end() - begin()); }

    size_type
    max_size() const
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize = _M_get_Bit_allocator().max_size();
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const
    { return size_type(const_iterator(this->_M_impl._M_end_of_storage, 0)
         - begin()); }

    bool
    empty() const
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
        __throw_out_of_range(("vector<bool>::_M_range_check"));
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n);

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x)
    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);



      std::__alloc_swap<typename _Base::_Bit_alloc_type>::
 _S_do_it(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y)
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator
    insert(iterator __position, const bool& __x = bool())
    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position, __x);
      return begin() + __n;
    }

    template<typename _InputIterator>
      void
      insert(iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_insert_dispatch(__position, __first, __last, _Integral());
      }

    void
    insert(iterator __position, size_type __n, const bool& __x)
    { _M_fill_insert(__position, __n, __x); }






    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator
    erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

    iterator
    erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }







    void
    flip()
    {
      for (_Bit_type * __p = this->_M_impl._M_start._M_p;
    __p != this->_M_impl._M_end_of_storage; ++__p)
        *__p = ~*__p;
    }

    void
    clear()
    { _M_erase_at_end(begin()); }


  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = (__q
      + ((__n + int(_S_word_bit) - 1)
         / int(_S_word_bit)));
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }





    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }
  };


}
# 66 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3



# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/vector.tcc" 1 3
# 60 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
   (this->_M_impl._M_start),
   (this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }
# 106 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    insert(iterator __position, const value_type& __x)
    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   this->_M_impl.construct(this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {
# 128 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/vector.tcc" 3
     _M_insert_aux(__position, __x);
 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __position)
    {
      if (__position + 1 != end())
 std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      this->_M_impl.destroy(this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::copy(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp.swap(*this);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
     __n - size(), __val,
     _M_get_Tp_allocator());
   this->_M_impl._M_finish += __n - size();
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }
# 298 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)

    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   this->_M_impl.construct(this->_M_impl._M_finish,
      (*(this->_M_impl._M_finish - 1)));

   ++this->_M_impl._M_finish;

   _Tp __x_copy = __x;

   std::copy_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1);



   *__position = __x_copy;



 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   if (true)
     {




       this->_M_impl.construct(__new_start + __elems_before,



                               __x);

       __new_finish = 0;

       __new_finish =
  std::__uninitialized_move_a(this->_M_impl._M_start,
         __position.base(), __new_start,
         _M_get_Tp_allocator());
       ++__new_finish;

       __new_finish =
  std::__uninitialized_move_a(__position.base(),
         this->_M_impl._M_finish,
         __new_finish,
         _M_get_Tp_allocator());
     }
          if (false)
     {
       if (!__new_finish)
  this->_M_impl.destroy(__new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
                              ;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::copy_backward(__position.base(), __old_finish - __n, __old_finish);

    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n - __elems_after;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       if (true)
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = 0;

    __new_finish =
      std::__uninitialized_move_a(this->_M_impl._M_start,
      __position.base(),
      __new_start,
      _M_get_Tp_allocator());
    __new_finish += __n;

    __new_finish =
      std::__uninitialized_move_a(__position.base(),
      this->_M_impl._M_finish,
      __new_finish,
      _M_get_Tp_allocator());
  }
       if (false)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
                           ;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }
# 519 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::copy_backward(__position.base(), __old_finish - __n, __old_finish);

      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  if (true)
    {
      __new_finish =
        std::__uninitialized_move_a(this->_M_impl._M_start,
        __position.base(),
        __new_start,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_copy_a(__first, __last,
        __new_finish,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_move_a(__position.base(),
        this->_M_impl._M_finish,
        __new_finish,
        _M_get_Tp_allocator());
    }
  if (false)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
                             ;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }




  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   _Bit_type* __q = this->_M_allocate(__n);
   this->_M_impl._M_finish = _M_copy_aligned(begin(), end(),
          iterator(__q, 0));
   this->_M_deallocate();
   this->_M_impl._M_start = iterator(__q, 0);
   this->_M_impl._M_end_of_storage = (__q + (__n + int(_S_word_bit) - 1)
          / int(_S_word_bit));
 }
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_type * __q = this->_M_allocate(__len);
  iterator __i = _M_copy_aligned(begin(), __position,
            iterator(__q, 0));
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = (__q
         + ((__len
             + int(_S_word_bit) - 1)
            / int(_S_word_bit)));
  this->_M_impl._M_start = iterator(__q, 0);
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }


}
# 70 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 16 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/default_parameters.h" 2
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 1 3
# 37 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
# 37 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 58 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_string<char_type, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;

    protected:

      ios_base::openmode _M_mode;


      __string_type _M_string;

    public:
# 92 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
      explicit
      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(__mode), _M_string()
      { }
# 105 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
      explicit
      basic_stringbuf(const __string_type& __str,
        ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(), _M_string(__str.data(), __str.size())
      { _M_stringbuf_init(__mode); }
# 120 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
      __string_type
      str() const
      {
 __string_type __ret;
 if (this->pptr())
   {

     if (this->pptr() > this->egptr())
       __ret = __string_type(this->pbase(), this->pptr());
     else
        __ret = __string_type(this->pbase(), this->egptr());
   }
 else
   __ret = _M_string;
 return __ret;
      }
# 144 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
      void
      str(const __string_type& __s)
      {

 _M_string.assign(__s.data(), __s.size());
 _M_stringbuf_init(_M_mode);
      }

    protected:

      void
      _M_stringbuf_init(ios_base::openmode __mode)
      {
 _M_mode = __mode;
 __size_type __len = 0;
 if (_M_mode & (ios_base::ate | ios_base::app))
   __len = _M_string.size();
 _M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
      }

      virtual streamsize
      showmanyc()
      {
 streamsize __ret = -1;
 if (_M_mode & ios_base::in)
   {
     _M_update_egptr();
     __ret = this->egptr() - this->gptr();
   }
 return __ret;
      }

      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = traits_type::eof());

      virtual int_type
      overflow(int_type __c = traits_type::eof());
# 196 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n)
      {
 if (__s && __n >= 0)
   {






     _M_string.clear();


     _M_sync(__s, __n, 0);
   }
 return this;
      }

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __sp,
       ios_base::openmode __mode = ios_base::in | ios_base::out);




      void
      _M_sync(char_type* __base, __size_type __i, __size_type __o);



      void
      _M_update_egptr()
      {
 const bool __testin = _M_mode & ios_base::in;
 if (this->pptr() && this->pptr() > this->egptr())
   {
     if (__testin)
       this->setg(this->eback(), this->gptr(), this->pptr());
     else
       this->setg(this->pptr(), this->pptr(), this->pptr());
   }
      }



      void
      _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);
    };
# 261 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_istringstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 297 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
      explicit
      basic_istringstream(ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__mode | ios_base::in)
      { this->init(&_M_stringbuf); }
# 315 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
      explicit
      basic_istringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
      { this->init(&_M_stringbuf); }







      ~basic_istringstream()
      { }
# 337 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 371 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_ostringstream : public basic_ostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 407 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
      explicit
      basic_ostringstream(ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
      { this->init(&_M_stringbuf); }
# 425 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
      explicit
      basic_ostringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
      { this->init(&_M_stringbuf); }







      ~basic_ostringstream()
      { }
# 447 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 481 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 515 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
      explicit
      basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__m)
      { this->init(&_M_stringbuf); }
# 531 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
      explicit
      basic_stringstream(const __string_type& __str,
    ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__str, __m)
      { this->init(&_M_stringbuf); }







      ~basic_stringstream()
      { }
# 553 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };


}


# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/sstream.tcc" 1 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/sstream.tcc" 3
# 39 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/sstream.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    pbackfail(int_type __c)
    {
      int_type __ret = traits_type::eof();
      if (this->eback() < this->gptr())
 {


   const bool __testeof = traits_type::eq_int_type(__c, __ret);
   if (!__testeof)
     {
       const bool __testeq = traits_type::eq(traits_type::
          to_char_type(__c),
          this->gptr()[-1]);
       const bool __testout = this->_M_mode & ios_base::out;
       if (__testeq || __testout)
  {
    this->gbump(-1);
    if (!__testeq)
      *this->gptr() = traits_type::to_char_type(__c);
    __ret = __c;
  }
     }
   else
     {
       this->gbump(-1);
       __ret = traits_type::not_eof(__c);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    overflow(int_type __c)
    {
      const bool __testout = this->_M_mode & ios_base::out;
      if (__builtin_expect(!__testout, false))
 return traits_type::eof();

      const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());
      if (__builtin_expect(__testeof, false))
 return traits_type::not_eof(__c);

      const __size_type __capacity = _M_string.capacity();
      const __size_type __max_size = _M_string.max_size();
      const bool __testput = this->pptr() < this->epptr();
      if (__builtin_expect(!__testput && __capacity == __max_size, false))
 return traits_type::eof();



      const char_type __conv = traits_type::to_char_type(__c);
      if (!__testput)
 {
# 111 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/sstream.tcc" 3
   const __size_type __opt_len = std::max(__size_type(2 * __capacity),
       __size_type(512));
   const __size_type __len = std::min(__opt_len, __max_size);
   __string_type __tmp;
   __tmp.reserve(__len);
   if (this->pbase())
     __tmp.assign(this->pbase(), this->epptr() - this->pbase());
   __tmp.push_back(__conv);
   _M_string.swap(__tmp);
   _M_sync(const_cast<char_type*>(_M_string.data()),
    this->gptr() - this->eback(), this->pptr() - this->pbase());
 }
      else
 *this->pptr() = __conv;
      this->pbump(1);
      return __c;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = this->_M_mode & ios_base::in;
      if (__testin)
 {

   _M_update_egptr();

   if (this->gptr() < this->egptr())
     __ret = traits_type::to_int_type(*this->gptr());
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;
      const bool __testboth = __testin && __testout && __way != ios_base::cur;
      __testin &= !(__mode & ios_base::out);
      __testout &= !(__mode & ios_base::in);



      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !__off) && (__testin || __testout || __testboth))
 {
   _M_update_egptr();

   off_type __newoffi = __off;
   off_type __newoffo = __newoffi;
   if (__way == ios_base::cur)
     {
       __newoffi += this->gptr() - __beg;
       __newoffo += this->pptr() - __beg;
     }
   else if (__way == ios_base::end)
     __newoffo = __newoffi += this->egptr() - __beg;

   if ((__testin || __testboth)
       && __newoffi >= 0
       && this->egptr() - __beg >= __newoffi)
     {
       this->setg(this->eback(), this->eback() + __newoffi,
    this->egptr());
       __ret = pos_type(__newoffi);
     }
   if ((__testout || __testboth)
       && __newoffo >= 0
       && this->egptr() - __beg >= __newoffo)
     {
       _M_pbump(this->pbase(), this->epptr(), __newoffo);
       __ret = pos_type(__newoffo);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekpos(pos_type __sp, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;

      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !off_type(__sp)) && (__testin || __testout))
 {
   _M_update_egptr();

   const off_type __pos(__sp);
   const bool __testpos = (0 <= __pos
      && __pos <= this->egptr() - __beg);
   if (__testpos)
     {
       if (__testin)
  this->setg(this->eback(), this->eback() + __pos,
      this->egptr());
       if (__testout)
  _M_pbump(this->pbase(), this->epptr(), __pos);
       __ret = __sp;
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_sync(char_type* __base, __size_type __i, __size_type __o)
    {
      const bool __testin = _M_mode & ios_base::in;
      const bool __testout = _M_mode & ios_base::out;
      char_type* __endg = __base + _M_string.size();
      char_type* __endp = __base + _M_string.capacity();

      if (__base != _M_string.data())
 {

   __endg += __i;
   __i = 0;
   __endp = __endg;
 }

      if (__testin)
 this->setg(__base, __base + __i, __endg);
      if (__testout)
 {
   _M_pbump(__base, __endp, __o);



   if (!__testin)
     this->setg(__endg, __endg, __endg);
 }
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off)
    {
      this->setp(__pbeg, __pend);
      while (__off > __gnu_cxx::__numeric_traits<int>::__max)
 {
   this->pbump(__gnu_cxx::__numeric_traits<int>::__max);
   __off -= __gnu_cxx::__numeric_traits<int>::__max;
 }
      this->pbump(__off);
    }




  extern template class basic_stringbuf<char>;
  extern template class basic_istringstream<char>;
  extern template class basic_ostringstream<char>;
  extern template class basic_stringstream<char>;


  extern template class basic_stringbuf<wchar_t>;
  extern template class basic_istringstream<wchar_t>;
  extern template class basic_ostringstream<wchar_t>;
  extern template class basic_stringstream<wchar_t>;




}
# 580 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/sstream" 2 3
# 17 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/default_parameters.h" 2
# 1 "/usr/include/getopt.h" 1 3 4
# 48 "/usr/include/getopt.h" 3 4
extern "C" {
# 57 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 71 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 104 "/usr/include/getopt.h" 3 4
struct option
{
  const char *name;


  int has_arg;
  int *flag;
  int val;
};
# 150 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw ();
# 173 "/usr/include/getopt.h" 3 4
extern int getopt_long (int ___argc, char *const *___argv,
   const char *__shortopts,
          const struct option *__longopts, int *__longind)
       throw ();
extern int getopt_long_only (int ___argc, char *const *___argv,
        const char *__shortopts,
               const struct option *__longopts, int *__longind)
       throw ();




}
# 18 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/default_parameters.h" 2

# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/constant_parameters.h" 1
# 15 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/constant_parameters.h"
const float e_delta = 0.1f;
const int radius = 2;
const float dist_threshold = 0.1f;
const float normal_threshold = 0.8f;
const float track_threshold = 0.15f;
const float maxweight = 100.0f;
const float nearPlane = 0.4f;
const float farPlane = 4.0f;
const float delta = 4.0f;

const float3 light = make_float3(1, 1, -1.0);
const float3 ambient = make_float3(0.1, 0.1, 0.1);
# 20 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/default_parameters.h" 2

extern int optind;




static const int default_iterations[3] = { 10, 5, 4 };

const float default_mu = 0.1f;
const bool default_blocking_read = false;
const int default_fps = 0;
const float default_icp_threshold = 1e-5;
const int default_compute_size_ratio = 1;
const int default_integration_rate = 2;
const int default_rendering_rate = 4;
const int default_tracking_rate = 1;
const uint3 default_volume_resolution = make_uint3(256, 256, 256);
const float3 default_volume_size = make_float3(2.f, 2.f, 2.f);
const float3 default_initial_pos_factor = make_float3(0.5f, 0.5f, 0.0f);
const bool default_no_gui = false;
const bool default_render_volume_fullsize = false;
const std::string default_dump_volume_file = "";
const std::string default_input_file = "";
const std::string default_log_file = "";

inline std::string pyramid2str(std::vector<int> v) {
 std::ostringstream ss;
 for (std::vector<int>::iterator it = v.begin(); it != v.end(); it++)
  ss << *it << " ";
 return ss.str();

}

static std::string short_options = "qc:d:f:i:l:m:k:o:p:r:s:t:v:y:z:";

static struct option long_options[] =
  {
      {"compute-size-ratio", 1, 0, 'c'},
      {"dump-volume", 1, 0, 'd'},
      {"fps", 1, 0, 'f'},
      {"input-file", 1, 0, 'i'},
      {"camera", 1, 0, 'k'},
      {"icp-threshold", 1, 0, 'l'},
      {"log-file", 1, 0, 'o'},
      {"mu", 1, 0, 'm'},
      {"init-pose", 1, 0, 'p'},
      {"no-gui", 0, 0, 'q'},
      {"integration-rate", 1, 0, 'r'},
      {"volume-size", 1, 0, 's'},
      {"tracking-rate", 1, 0, 't'},
      {"volume-resolution", 1, 0, 'v'},
      {"pyramid-levels", 1, 0, 'y'},
      {"rendering-rate", 1, 0, 'z'},
      {0, 0, 0, 0}

};

struct Configuration {



 int compute_size_ratio;
 int integration_rate;
 int rendering_rate;
 int tracking_rate;
 uint3 volume_resolution;
 float3 volume_size;
 float3 initial_pos_factor;
 std::vector<int> pyramid;
 std::string dump_volume_file;
 std::string input_file;
 std::string log_file;
 std::ofstream log_filestream;
 std::ostream *log_stream;

 float4 camera;
 bool camera_overrided;

 float mu;
 int fps;
 bool blocking_read;
 float icp_threshold;
 bool no_gui;
 bool render_volume_fullsize;
 inline
 void print_arguments() {
  std ::cerr << "-c  (--compute-size-ratio)       : default is " << default_compute_size_ratio << "   (same size)      " << std::endl;
  std ::cerr << "-d  (--dump-volume) <filename>   : Output volume file              " << std::endl;
  std ::cerr << "-f  (--fps)                      : default is " << default_fps << std::endl;
  std ::cerr << "-i  (--input-file) <filename>    : Input camera file               " << std::endl;
  std ::cerr << "-k  (--camera)                   : default is defined by input     " << std::endl;
  std ::cerr << "-l  (--icp-threshold)                : default is " << default_icp_threshold << std::endl;
  std ::cerr << "-o  (--log-file) <filename>      : default is stdout               " << std::endl;
  std ::cerr << "-m  (--mu)                       : default is " << default_mu << "               " << std::endl;
  std ::cerr << "-p  (--init-pose)                : default is " << default_initial_pos_factor.x << "," << default_initial_pos_factor.y << "," << default_initial_pos_factor.z << "     " << std::endl;
  std ::cerr << "-q  (--no-gui)                   : default is to display gui"<<std::endl;
  std ::cerr << "-r  (--integration-rate)         : default is " << default_integration_rate << "     " << std::endl;
  std ::cerr << "-s  (--volume-size)              : default is " << default_volume_size.x << "," << default_volume_size.y << "," << default_volume_size.z << "      " << std::endl;
  std ::cerr << "-t  (--tracking-rate)            : default is " << default_tracking_rate << "     " << std::endl;
  std ::cerr << "-v  (--volume-resolution)        : default is " << default_volume_resolution.x << "," << default_volume_resolution.y << "," << default_volume_resolution.z << "    " << std::endl;
  std ::cerr << "-y  (--pyramid-levels)           : default is 10,5,4     " << std::endl;
  std ::cerr << "-z  (--rendering-rate)   : default is " << default_rendering_rate << std::endl;
 }
 void print_values(std::ostream& out) {
time_t rawtime;
  struct tm *timeinfo;
  char buffer[80];
  time(&rawtime);
  timeinfo=localtime(&rawtime);
  strftime(buffer,80,"%Y-%m-%d %I:%M:%S",timeinfo);
  out << "SLAMBench Report run started:\t" << buffer << std::endl<< std::endl;
  out << "Scene properties:" << std::endl<<"=================" << std::endl<< std::endl;
  out << "input-file: " << input_file <<std::endl;
  out << "volume-size: " << volume_size.x << "," << volume_size.y << "," << volume_size.z << std::endl;
  out << "camera: "<< camera.x<<","<< camera.y<<","<< camera.z<<","<< camera.w<< std::endl;
  out << "init-pose: " << initial_pos_factor.x << "," << initial_pos_factor.y << "," <<initial_pos_factor.z << std::endl;

  out << std::endl;
  out << "Algorithmic properties:"<<std::endl<<"======================="<<std::endl << std::endl;
  out << "compute-size-ratio: " << compute_size_ratio << std::endl;
  out << "volume-resolution: " << volume_resolution.x << "," << volume_resolution.y << "," << volume_resolution.z << "    " << std::endl;
  out << "mu: " << mu << std::endl;
  out << "icp-threshold: " << icp_threshold << std::endl;
  out << "pyramid-levels: " ;
  for(int i=0; i< pyramid.size();i++){
   if(i!=0)
    out<<",";
   out<<pyramid[i];
  }
  out << std::endl;
  out << "tracking-rate: " << tracking_rate << std::endl;
  out << "integration-rate: " << integration_rate << std::endl;
  out << "rendering-rate: " << rendering_rate << std::endl;
  out << "fps: " << fps << std::endl;
}
 inline float3 atof3(char * optarg) {
  float3 res;
  std::istringstream dotargs(optarg);
  std::string s;
  if (getline(dotargs, s, ',')) {
   res.x = atof(s.c_str());
  } else
   return res;
  if (getline(dotargs, s, ',')) {
   res.y = atof(s.c_str());
  } else {
   res.y = res.x;
   res.z = res.y;
   return res;
  }
  if (getline(dotargs, s, ',')) {
   res.z = atof(s.c_str());
  } else {
   res.z = res.y;
  }
  return res;
 }

 inline uint3 atoi3(char * optarg) {
  uint3 res;
  std::istringstream dotargs(optarg);
  std::string s;
  if (getline(dotargs, s, ',')) {
   res.x = atoi(s.c_str());
  } else
   return res;
  if (getline(dotargs, s, ',')) {
   res.y = atoi(s.c_str());
  } else {
   res.y = res.x;
   res.z = res.y;
   return res;
  }
  if (getline(dotargs, s, ',')) {
   res.z = atoi(s.c_str());
  } else {
   res.z = res.y;
  }
  return res;
 }

 inline float4 atof4(char * optarg) {
  float4 res;
  std::istringstream dotargs(optarg);
  std::string s;
  if (getline(dotargs, s, ',')) {
   res.x = atof(s.c_str());
  } else
   return res;
  if (getline(dotargs, s, ',')) {
   res.y = atof(s.c_str());
  } else {
   res.y = res.x;
   res.z = res.y;
   res.w = res.z;
   return res;
  }
  if (getline(dotargs, s, ',')) {
   res.z = atof(s.c_str());
  } else {
   res.z = res.y;
   res.w = res.z;
   return res;
  }
  if (getline(dotargs, s, ',')) {
   res.w = atof(s.c_str());
  } else {
   res.w = res.z;
  }
  return res;
 }

 Configuration(unsigned int argc, char ** argv) {

  compute_size_ratio = default_compute_size_ratio;
  integration_rate = default_integration_rate;
  tracking_rate = default_tracking_rate;
  rendering_rate = default_rendering_rate;
  volume_resolution = default_volume_resolution;
  volume_size = default_volume_size;
  initial_pos_factor = default_initial_pos_factor;

  dump_volume_file = default_dump_volume_file;
  input_file = default_input_file;
  log_file = default_log_file;

  mu = default_mu;
  fps = default_fps;
  blocking_read = default_blocking_read;
  icp_threshold = default_icp_threshold;
  no_gui = default_no_gui;
  render_volume_fullsize = default_render_volume_fullsize;
  camera_overrided = false;

  this->pyramid.clear();
  for (int i = 0; i < 3; i++) {
   this->pyramid.push_back(default_iterations[i]);
  }

  int c;
  int option_index = 0;
  int flagErr = 0;
  optind = 1;
  while ((c = getopt_long(argc, argv, short_options.c_str(), long_options,
    &option_index)) != -1)
   switch (c) {
   case 'b':
    this->blocking_read = true;
    std::cerr << "activate blocking read" << std::endl;
    break;
   case 'c':
    this->compute_size_ratio = atoi(optarg);
    std::cerr << "update compute_size_ratio to "
      << this->compute_size_ratio << std::endl;
    if ((this->compute_size_ratio != 1)
      && (this->compute_size_ratio != 2)
      && (this->compute_size_ratio != 4)
      && (this->compute_size_ratio != 8)) {
     std::cerr
       << "ERROR: --compute-size-ratio (-c) must be 1, 2 ,4 or 8  (was "
       << optarg << ")\n";
     flagErr++;
    }
    break;
   case 'd':
    this->dump_volume_file = optarg;
    std::cerr << "update dump_volume_file to "
      << this->dump_volume_file << std::endl;
    break;
   case 'f':
    this->fps = atoi(optarg);
    std::cerr << "update fps to " << this->fps << std::endl;

    if (this->fps < 0) {
     std::cerr << "ERROR: --fps (-f) must be >= 0 (was "
       << optarg << ")\n";
     flagErr++;
    }
    break;
   case 'i':
    this->input_file = optarg;
    std::cerr << "update input_file to " << this->input_file
      << std::endl;
    struct stat st;
    if (stat(this->input_file.c_str(), &st) != 0) {
     std::cerr << "ERROR: --input-file (-i) does not exist (was "
       << this->input_file << ")\n";
     flagErr++;
    }
    break;
   case 'k':
    this->camera = atof4(optarg);
    this->camera_overrided = true;
    std::cerr << "update camera to " << this->camera.x << ","
      << this->camera.y << "," << this->camera.z << ","
      << this->camera.w << std::endl;
    break;
   case 'o':
    this->log_file = optarg;
    std::cerr << "update log_file to " << this->log_file
      << std::endl;
    break;
   case 'l':
    this->icp_threshold = atof(optarg);
    std::cerr << "update icp_threshold to " << this->icp_threshold
      << std::endl;
    break;
   case 'm':
    this->mu = atof(optarg);
    std::cerr << "update mu to " << this->mu << std::endl;
    break;
   case 'p':
    this->initial_pos_factor = atof3(optarg);
    std::cerr << "update init_poseFactors to "
      << this->initial_pos_factor.x << ","
      << this->initial_pos_factor.y << ","
      << this->initial_pos_factor.z << std::endl;
    break;
   case 'q':
    this->no_gui = true;
    break;
   case 'r':
    this->integration_rate = atoi(optarg);
    std::cerr << "update integration_rate to "
      << this->integration_rate << std::endl;
    if (this->integration_rate < 1) {
     std::cerr
       << "ERROR: --integration-rate (-r) must >= 1 (was "
       << optarg << ")\n";
     flagErr++;
    }
    break;
   case 's':
    this->volume_size = atof3(optarg);
    std::cerr << "update map_size to " << this->volume_size.x
      << "mx" << this->volume_size.y << "mx"
      << this->volume_size.z << "m" << std::endl;
    if ((this->volume_size.x <= 0) || (this->volume_size.y <= 0)
      || (this->volume_size.z <= 0)) {
     std::cerr
       << "ERROR: --volume-size (-s) all dimensions must > 0 (was "
       << optarg << ")\n";
     flagErr++;
    }
    break;
   case 't':
    this->tracking_rate = atof(optarg);
    std::cerr << "update tracking_rate to " << this->tracking_rate
      << std::endl;
    break;
   case 'z':
    this->rendering_rate = atof(optarg);
    std::cerr << "update rendering_rate to " << this->rendering_rate
      << std::endl;
    break;
   case 'v':
    this->volume_resolution = atoi3(optarg);
    std::cerr << "update volumetric_size to "
      << this->volume_resolution.x << "x"
      << this->volume_resolution.y << "x"
      << this->volume_resolution.z << std::endl;
    if ((this->volume_resolution.x <= 0)
      || (this->volume_resolution.y <= 0)
      || (this->volume_resolution.z <= 0)) {
     std::cerr
       << "ERROR: --volume-size (-s) all dimensions must > 0 (was "
       << optarg << ")\n";
     flagErr++;
    }

    break;
   case 'y': {
    std::istringstream dotargs(optarg);
    std::string s;
    pyramid.clear();
    while (getline(dotargs, s, ',')) {
     pyramid.push_back(atof(s.c_str()));
    }
   }
    std::cerr << "update pyramid levels to " << pyramid2str(pyramid)
      << std::endl;
    break;
   case 0:
   case '?':
    std::cerr << "Unknown option character -" << char(optopt)
      << " or bad usage.\n";
    print_arguments();
    exit(0);
   default:
    std::cerr << "GetOpt abort.";
    flagErr = true;
   }

  if (flagErr) {
   std::cerr << "Exited due to " << flagErr << " error"
     << (flagErr == 1 ? "" : "s")
     << " in command line options\n";
   exit(1);
  }

 }

};
# 35 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h" 2








# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 1
# 33 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h"
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 34 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
# 147 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 191 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
  struct __numeric_limits_base
  {


    static const bool is_specialized = false;




    static const int digits = 0;


    static const int digits10 = 0;
# 212 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
    static const bool is_signed = false;



    static const bool is_integer = false;





    static const bool is_exact = false;



    static const int radix = 0;



    static const int min_exponent = 0;



    static const int min_exponent10 = 0;




    static const int max_exponent = 0;



    static const int max_exponent10 = 0;


    static const bool has_infinity = false;



    static const bool has_quiet_NaN = false;



    static const bool has_signaling_NaN = false;


    static const float_denorm_style has_denorm = denorm_absent;



    static const bool has_denorm_loss = false;



    static const bool is_iec559 = false;




    static const bool is_bounded = false;





    static const bool is_modulo = false;


    static const bool traps = false;


    static const bool tinyness_before = false;




    static const float_round_style round_style =
          round_toward_zero;
  };
# 302 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static _Tp
      min() throw() { return static_cast<_Tp>(0); }


      static _Tp
      max() throw() { return static_cast<_Tp>(0); }
# 323 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
      static _Tp
      epsilon() throw() { return static_cast<_Tp>(0); }


      static _Tp
      round_error() throw() { return static_cast<_Tp>(0); }


      static _Tp
      infinity() throw() { return static_cast<_Tp>(0); }



      static _Tp
      quiet_NaN() throw() { return static_cast<_Tp>(0); }



      static _Tp
      signaling_NaN() throw() { return static_cast<_Tp>(0); }




      static _Tp
      denorm_min() throw() { return static_cast<_Tp>(0); }
    };
# 369 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
  template<>
    struct numeric_limits<bool>
    {
      static const bool is_specialized = true;

      static bool
      min() throw() { return false; }

      static bool
      max() throw() { return true; }





      static const int digits = 1;
      static const int digits10 = 0;



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static bool
      epsilon() throw() { return false; }

      static bool
      round_error() throw() { return false; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static bool
      infinity() throw() { return false; }

      static bool
      quiet_NaN() throw() { return false; }

      static bool
      signaling_NaN() throw() { return false; }

      static bool
      denorm_min() throw() { return false; }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;




      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static const bool is_specialized = true;

      static char
      min() throw() { return (((char)(-1) < 0) ? (char)1 << (sizeof(char) * 8 - ((char)(-1) < 0)) : (char)0); }

      static char
      max() throw() { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }






      static const int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static const int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = ((char)(-1) < 0);
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static char
      epsilon() throw() { return 0; }

      static char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static
      char infinity() throw() { return char(); }

      static char
      quiet_NaN() throw() { return char(); }

      static char
      signaling_NaN() throw() { return char(); }

      static char
      denorm_min() throw() { return static_cast<char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static const bool is_specialized = true;

      static signed char
      min() throw() { return -127 - 1; }

      static signed char
      max() throw() { return 127; }






      static const int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static const int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static signed char
      epsilon() throw() { return 0; }

      static signed char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static signed char
      infinity() throw() { return static_cast<signed char>(0); }

      static signed char
      quiet_NaN() throw() { return static_cast<signed char>(0); }

      static signed char
      signaling_NaN() throw() { return static_cast<signed char>(0); }

      static signed char
      denorm_min() throw() { return static_cast<signed char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static const bool is_specialized = true;

      static unsigned char
      min() throw() { return 0; }

      static unsigned char
      max() throw() { return 127 * 2U + 1; }






      static const int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned char
      epsilon() throw() { return 0; }

      static unsigned char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned char
      infinity() throw() { return static_cast<unsigned char>(0); }

      static unsigned char
      quiet_NaN() throw() { return static_cast<unsigned char>(0); }

      static unsigned char
      signaling_NaN() throw() { return static_cast<unsigned char>(0); }

      static unsigned char
      denorm_min() throw() { return static_cast<unsigned char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static const bool is_specialized = true;

      static wchar_t
      min() throw() { return (((wchar_t)(-1) < 0) ? (wchar_t)1 << (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) : (wchar_t)0); }

      static wchar_t
      max() throw() { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }






      static const int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static const int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = ((wchar_t)(-1) < 0);
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static wchar_t
      epsilon() throw() { return 0; }

      static wchar_t
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static wchar_t
      infinity() throw() { return wchar_t(); }

      static wchar_t
      quiet_NaN() throw() { return wchar_t(); }

      static wchar_t
      signaling_NaN() throw() { return wchar_t(); }

      static wchar_t
      denorm_min() throw() { return wchar_t(); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };
# 851 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
  template<>
    struct numeric_limits<short>
    {
      static const bool is_specialized = true;

      static short
      min() throw() { return -32767 - 1; }

      static short
      max() throw() { return 32767; }






      static const int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static const int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static short
      epsilon() throw() { return 0; }

      static short
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static short
      infinity() throw() { return short(); }

      static short
      quiet_NaN() throw() { return short(); }

      static short
      signaling_NaN() throw() { return short(); }

      static short
      denorm_min() throw() { return short(); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static const bool is_specialized = true;

      static unsigned short
      min() throw() { return 0; }

      static unsigned short
      max() throw() { return 32767 * 2U + 1; }






      static const int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned short
      epsilon() throw() { return 0; }

      static unsigned short
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned short
      infinity() throw() { return static_cast<unsigned short>(0); }

      static unsigned short
      quiet_NaN() throw() { return static_cast<unsigned short>(0); }

      static unsigned short
      signaling_NaN() throw() { return static_cast<unsigned short>(0); }

      static unsigned short
      denorm_min() throw() { return static_cast<unsigned short>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static const bool is_specialized = true;

      static int
      min() throw() { return -2147483647 - 1; }

      static int
      max() throw() { return 2147483647; }






      static const int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static const int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static int
      epsilon() throw() { return 0; }

      static int
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static int
      infinity() throw() { return static_cast<int>(0); }

      static int
      quiet_NaN() throw() { return static_cast<int>(0); }

      static int
      signaling_NaN() throw() { return static_cast<int>(0); }

      static int
      denorm_min() throw() { return static_cast<int>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static const bool is_specialized = true;

      static unsigned int
      min() throw() { return 0; }

      static unsigned int
      max() throw() { return 2147483647 * 2U + 1; }






      static const int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned int
      epsilon() throw() { return 0; }

      static unsigned int
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned int
      infinity() throw() { return static_cast<unsigned int>(0); }

      static unsigned int
      quiet_NaN() throw() { return static_cast<unsigned int>(0); }

      static unsigned int
      signaling_NaN() throw() { return static_cast<unsigned int>(0); }

      static unsigned int
      denorm_min() throw() { return static_cast<unsigned int>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static const bool is_specialized = true;

      static long
      min() throw() { return -9223372036854775807L - 1; }

      static long
      max() throw() { return 9223372036854775807L; }






      static const int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static const int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static long
      epsilon() throw() { return 0; }

      static long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static long
      infinity() throw() { return static_cast<long>(0); }

      static long
      quiet_NaN() throw() { return static_cast<long>(0); }

      static long
      signaling_NaN() throw() { return static_cast<long>(0); }

      static long
      denorm_min() throw() { return static_cast<long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static const bool is_specialized = true;

      static unsigned long
      min() throw() { return 0; }

      static unsigned long
      max() throw() { return 9223372036854775807L * 2UL + 1; }






      static const int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned long
      epsilon() throw() { return 0; }

      static unsigned long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned long
      infinity() throw() { return static_cast<unsigned long>(0); }

      static unsigned long
      quiet_NaN() throw() { return static_cast<unsigned long>(0); }

      static unsigned long
      signaling_NaN() throw() { return static_cast<unsigned long>(0); }

      static unsigned long
      denorm_min() throw() { return static_cast<unsigned long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static const bool is_specialized = true;

      static long long
      min() throw() { return -9223372036854775807LL - 1; }

      static long long
      max() throw() { return 9223372036854775807LL; }






      static const int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static const int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static long long
      epsilon() throw() { return 0; }

      static long long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static long long
      infinity() throw() { return static_cast<long long>(0); }

      static long long
      quiet_NaN() throw() { return static_cast<long long>(0); }

      static long long
      signaling_NaN() throw() { return static_cast<long long>(0); }

      static long long
      denorm_min() throw() { return static_cast<long long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static const bool is_specialized = true;

      static unsigned long long
      min() throw() { return 0; }

      static unsigned long long
      max() throw() { return 9223372036854775807LL * 2ULL + 1; }






      static const int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned long long
      epsilon() throw() { return 0; }

      static unsigned long long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned long long
      infinity() throw() { return static_cast<unsigned long long>(0); }

      static unsigned long long
      quiet_NaN() throw() { return static_cast<unsigned long long>(0); }

      static unsigned long long
      signaling_NaN() throw() { return static_cast<unsigned long long>(0); }

      static unsigned long long
      denorm_min() throw() { return static_cast<unsigned long long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<float>
    {
      static const bool is_specialized = true;

      static float
      min() throw() { return 1.17549435e-38F; }

      static float
      max() throw() { return 3.40282347e+38F; }






      static const int digits = 24;
      static const int digits10 = 6;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static float
      epsilon() throw() { return 1.19209290e-7F; }

      static float
      round_error() throw() { return 0.5F; }

      static const int min_exponent = (-125);
      static const int min_exponent10 = (-37);
      static const int max_exponent = 128;
      static const int max_exponent10 = 38;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
       = false;

      static float
      infinity() throw() { return __builtin_huge_valf (); }

      static float
      quiet_NaN() throw() { return __builtin_nanf (""); }

      static float
      signaling_NaN() throw() { return __builtin_nansf (""); }

      static float
      denorm_min() throw() { return 1.40129846e-45F; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before
       = false;
      static const float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static const bool is_specialized = true;

      static double
      min() throw() { return 2.2250738585072014e-308; }

      static double
      max() throw() { return 1.7976931348623157e+308; }






      static const int digits = 53;
      static const int digits10 = 15;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static double
      epsilon() throw() { return 2.2204460492503131e-16; }

      static double
      round_error() throw() { return 0.5; }

      static const int min_exponent = (-1021);
      static const int min_exponent10 = (-307);
      static const int max_exponent = 1024;
      static const int max_exponent10 = 308;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
        = false;

      static double
      infinity() throw() { return __builtin_huge_val(); }

      static double
      quiet_NaN() throw() { return __builtin_nan (""); }

      static double
      signaling_NaN() throw() { return __builtin_nans (""); }

      static double
      denorm_min() throw() { return 4.9406564584124654e-324; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before
       = false;
      static const float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static const bool is_specialized = true;

      static long double
      min() throw() { return 3.36210314311209350626e-4932L; }

      static long double
      max() throw() { return 1.18973149535723176502e+4932L; }






      static const int digits = 64;
      static const int digits10 = 18;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static long double
      epsilon() throw() { return 1.08420217248550443401e-19L; }

      static long double
      round_error() throw() { return 0.5L; }

      static const int min_exponent = (-16381);
      static const int min_exponent10 = (-4931);
      static const int max_exponent = 16384;
      static const int max_exponent10 = 4932;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
 = false;

      static long double
      infinity() throw() { return __builtin_huge_vall (); }

      static long double
      quiet_NaN() throw() { return __builtin_nanl (""); }

      static long double
      signaling_NaN() throw() { return __builtin_nansl (""); }

      static long double
      denorm_min() throw() { return 3.64519953188247460253e-4951L; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before =
      false;
      static const float_round_style round_style =
            round_to_nearest;
    };






}
# 35 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 1 3
# 59 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 59 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 69 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 1 3
# 68 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace rel_ops
  {
# 86 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 99 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 112 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 125 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }


  }

}
# 70 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 2 3
# 37 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3




# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 46 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 61 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
  template<typename _Tp> class complex;
  template<> class complex<float>;
  template<> class complex<double>;
  template<> class complex<long double>;


  template<typename _Tp> _Tp abs(const complex<_Tp>&);

  template<typename _Tp> _Tp arg(const complex<_Tp>&);

  template<typename _Tp> _Tp norm(const complex<_Tp>&);


  template<typename _Tp> complex<_Tp> conj(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> polar(const _Tp&, const _Tp& = 0);



  template<typename _Tp> complex<_Tp> cos(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> cosh(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> exp(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> log(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> log10(const complex<_Tp>&);



  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, int);


  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, const _Tp&);

  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&,
                                          const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> pow(const _Tp&, const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> sin(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> sinh(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> sqrt(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> tan(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> tanh(const complex<_Tp>&);
# 122 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
  template<typename _Tp>
    struct complex
    {

      typedef _Tp value_type;



                         complex(const _Tp& __r = _Tp(), const _Tp& __i = _Tp())
      : _M_real(__r), _M_imag(__i) { }




      template<typename _Up>
                           complex(const complex<_Up>& __z)
 : _M_real(__z.real()), _M_imag(__z.imag()) { }
# 150 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
      _Tp&
      real() { return _M_real; }


      const _Tp&
      real() const { return _M_real; }


      _Tp&
      imag() { return _M_imag; }


      const _Tp&
      imag() const { return _M_imag; }




      void
      real(_Tp __val) { _M_real = __val; }

      void
      imag(_Tp __val) { _M_imag = __val; }


      complex<_Tp>& operator=(const _Tp&);



      complex<_Tp>&
      operator+=(const _Tp& __t)
      {
 _M_real += __t;
 return *this;
      }



      complex<_Tp>&
      operator-=(const _Tp& __t)
      {
 _M_real -= __t;
 return *this;
      }


      complex<_Tp>& operator*=(const _Tp&);

      complex<_Tp>& operator/=(const _Tp&);





      template<typename _Up>
        complex<_Tp>& operator=(const complex<_Up>&);

      template<typename _Up>
        complex<_Tp>& operator+=(const complex<_Up>&);

      template<typename _Up>
        complex<_Tp>& operator-=(const complex<_Up>&);

      template<typename _Up>
        complex<_Tp>& operator*=(const complex<_Up>&);

      template<typename _Up>
        complex<_Tp>& operator/=(const complex<_Up>&);

      const complex __rep() const
      { return *this; }

    private:
      _Tp _M_real;
      _Tp _M_imag;
    };

  template<typename _Tp>
    complex<_Tp>&
    complex<_Tp>::operator=(const _Tp& __t)
    {
     _M_real = __t;
     _M_imag = _Tp();
     return *this;
    }


  template<typename _Tp>
    complex<_Tp>&
    complex<_Tp>::operator*=(const _Tp& __t)
    {
      _M_real *= __t;
      _M_imag *= __t;
      return *this;
    }


  template<typename _Tp>
    complex<_Tp>&
    complex<_Tp>::operator/=(const _Tp& __t)
    {
      _M_real /= __t;
      _M_imag /= __t;
      return *this;
    }

  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator=(const complex<_Up>& __z)
    {
      _M_real = __z.real();
      _M_imag = __z.imag();
      return *this;
    }


  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator+=(const complex<_Up>& __z)
    {
      _M_real += __z.real();
      _M_imag += __z.imag();
      return *this;
    }


  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator-=(const complex<_Up>& __z)
    {
      _M_real -= __z.real();
      _M_imag -= __z.imag();
      return *this;
    }



  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator*=(const complex<_Up>& __z)
    {
      const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
      _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
      _M_real = __r;
      return *this;
    }



  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator/=(const complex<_Up>& __z)
    {
      const _Tp __r = _M_real * __z.real() + _M_imag * __z.imag();
      const _Tp __n = std::norm(__z);
      _M_imag = (_M_imag * __z.real() - _M_real * __z.imag()) / __n;
      _M_real = __r / __n;
      return *this;
    }




  template<typename _Tp>
    inline complex<_Tp>
    operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r += __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator+(const complex<_Tp>& __x, const _Tp& __y)
    {
      complex<_Tp> __r = __x;
      __r += __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator+(const _Tp& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __y;
      __r += __x;
      return __r;
    }




  template<typename _Tp>
    inline complex<_Tp>
    operator-(const complex<_Tp>& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r -= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator-(const complex<_Tp>& __x, const _Tp& __y)
    {
      complex<_Tp> __r = __x;
      __r -= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator-(const _Tp& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r(__x, -__y.imag());
      __r -= __y.real();
      return __r;
    }




  template<typename _Tp>
    inline complex<_Tp>
    operator*(const complex<_Tp>& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r *= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator*(const complex<_Tp>& __x, const _Tp& __y)
    {
      complex<_Tp> __r = __x;
      __r *= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator*(const _Tp& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __y;
      __r *= __x;
      return __r;
    }




  template<typename _Tp>
    inline complex<_Tp>
    operator/(const complex<_Tp>& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r /= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator/(const complex<_Tp>& __x, const _Tp& __y)
    {
      complex<_Tp> __r = __x;
      __r /= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator/(const _Tp& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r /= __y;
      return __r;
    }



  template<typename _Tp>
    inline complex<_Tp>
    operator+(const complex<_Tp>& __x)
    { return __x; }


  template<typename _Tp>
    inline complex<_Tp>
    operator-(const complex<_Tp>& __x)
    { return complex<_Tp>(-__x.real(), -__x.imag()); }



  template<typename _Tp>
    inline bool
    operator==(const complex<_Tp>& __x, const complex<_Tp>& __y)
    { return __x.real() == __y.real() && __x.imag() == __y.imag(); }

  template<typename _Tp>
    inline bool
    operator==(const complex<_Tp>& __x, const _Tp& __y)
    { return __x.real() == __y && __x.imag() == _Tp(); }

  template<typename _Tp>
    inline bool
    operator==(const _Tp& __x, const complex<_Tp>& __y)
    { return __x == __y.real() && _Tp() == __y.imag(); }




  template<typename _Tp>
    inline bool
    operator!=(const complex<_Tp>& __x, const complex<_Tp>& __y)
    { return __x.real() != __y.real() || __x.imag() != __y.imag(); }

  template<typename _Tp>
    inline bool
    operator!=(const complex<_Tp>& __x, const _Tp& __y)
    { return __x.real() != __y || __x.imag() != _Tp(); }

  template<typename _Tp>
    inline bool
    operator!=(const _Tp& __x, const complex<_Tp>& __y)
    { return __x != __y.real() || _Tp() != __y.imag(); }



  template<typename _Tp, typename _CharT, class _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, complex<_Tp>& __x)
    {
      _Tp __re_x, __im_x;
      _CharT __ch;
      __is >> __ch;
      if (__ch == '(')
 {
   __is >> __re_x >> __ch;
   if (__ch == ',')
     {
       __is >> __im_x >> __ch;
       if (__ch == ')')
  __x = complex<_Tp>(__re_x, __im_x);
       else
  __is.setstate(ios_base::failbit);
     }
   else if (__ch == ')')
     __x = __re_x;
   else
     __is.setstate(ios_base::failbit);
 }
      else
 {
   __is.putback(__ch);
   __is >> __re_x;
   __x = __re_x;
 }
      return __is;
    }


  template<typename _Tp, typename _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const complex<_Tp>& __x)
    {
      basic_ostringstream<_CharT, _Traits> __s;
      __s.flags(__os.flags());
      __s.imbue(__os.getloc());
      __s.precision(__os.precision());
      __s << '(' << __x.real() << ',' << __x.imag() << ')';
      return __os << __s.str();
    }
# 542 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
  template<typename _Tp>
    inline _Tp&
    real(complex<_Tp>& __z)
    { return __z.real(); }

  template<typename _Tp>
    inline const _Tp&
    real(const complex<_Tp>& __z)
    { return __z.real(); }

  template<typename _Tp>
    inline _Tp&
    imag(complex<_Tp>& __z)
    { return __z.imag(); }

  template<typename _Tp>
    inline const _Tp&
    imag(const complex<_Tp>& __z)
    { return __z.imag(); }



  template<typename _Tp>
    inline _Tp
    __complex_abs(const complex<_Tp>& __z)
    {
      _Tp __x = __z.real();
      _Tp __y = __z.imag();
      const _Tp __s = std::max(abs(__x), abs(__y));
      if (__s == _Tp())
        return __s;
      __x /= __s;
      __y /= __s;
      return __s * sqrt(__x * __x + __y * __y);
    }


  inline float
  __complex_abs(__complex__ float __z) { return __builtin_cabsf(__z); }

  inline double
  __complex_abs(__complex__ double __z) { return __builtin_cabs(__z); }

  inline long double
  __complex_abs(const __complex__ long double& __z)
  { return __builtin_cabsl(__z); }

  template<typename _Tp>
    inline _Tp
    abs(const complex<_Tp>& __z) { return __complex_abs(__z.__rep()); }
# 600 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
  template<typename _Tp>
    inline _Tp
    __complex_arg(const complex<_Tp>& __z)
    { return atan2(__z.imag(), __z.real()); }


  inline float
  __complex_arg(__complex__ float __z) { return __builtin_cargf(__z); }

  inline double
  __complex_arg(__complex__ double __z) { return __builtin_carg(__z); }

  inline long double
  __complex_arg(const __complex__ long double& __z)
  { return __builtin_cargl(__z); }

  template<typename _Tp>
    inline _Tp
    arg(const complex<_Tp>& __z) { return __complex_arg(__z.__rep()); }
# 630 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
  template<bool>
    struct _Norm_helper
    {
      template<typename _Tp>
        static inline _Tp _S_do_it(const complex<_Tp>& __z)
        {
          const _Tp __x = __z.real();
          const _Tp __y = __z.imag();
          return __x * __x + __y * __y;
        }
    };

  template<>
    struct _Norm_helper<true>
    {
      template<typename _Tp>
        static inline _Tp _S_do_it(const complex<_Tp>& __z)
        {
          _Tp __res = std::abs(__z);
          return __res * __res;
        }
    };

  template<typename _Tp>
    inline _Tp
    norm(const complex<_Tp>& __z)
    {
      return _Norm_helper<__is_floating<_Tp>::__value
 && !0>::_S_do_it(__z);
    }

  template<typename _Tp>
    inline complex<_Tp>
    polar(const _Tp& __rho, const _Tp& __theta)
    { return complex<_Tp>(__rho * cos(__theta), __rho * sin(__theta)); }

  template<typename _Tp>
    inline complex<_Tp>
    conj(const complex<_Tp>& __z)
    { return complex<_Tp>(__z.real(), -__z.imag()); }




  template<typename _Tp>
    inline complex<_Tp>
    __complex_cos(const complex<_Tp>& __z)
    {
      const _Tp __x = __z.real();
      const _Tp __y = __z.imag();
      return complex<_Tp>(cos(__x) * cosh(__y), -sin(__x) * sinh(__y));
    }


  inline __complex__ float
  __complex_cos(__complex__ float __z) { return __builtin_ccosf(__z); }

  inline __complex__ double
  __complex_cos(__complex__ double __z) { return __builtin_ccos(__z); }

  inline __complex__ long double
  __complex_cos(const __complex__ long double& __z)
  { return __builtin_ccosl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    cos(const complex<_Tp>& __z) { return __complex_cos(__z.__rep()); }







  template<typename _Tp>
    inline complex<_Tp>
    __complex_cosh(const complex<_Tp>& __z)
    {
      const _Tp __x = __z.real();
      const _Tp __y = __z.imag();
      return complex<_Tp>(cosh(__x) * cos(__y), sinh(__x) * sin(__y));
    }


  inline __complex__ float
  __complex_cosh(__complex__ float __z) { return __builtin_ccoshf(__z); }

  inline __complex__ double
  __complex_cosh(__complex__ double __z) { return __builtin_ccosh(__z); }

  inline __complex__ long double
  __complex_cosh(const __complex__ long double& __z)
  { return __builtin_ccoshl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    cosh(const complex<_Tp>& __z) { return __complex_cosh(__z.__rep()); }







  template<typename _Tp>
    inline complex<_Tp>
    __complex_exp(const complex<_Tp>& __z)
    { return std::polar(exp(__z.real()), __z.imag()); }


  inline __complex__ float
  __complex_exp(__complex__ float __z) { return __builtin_cexpf(__z); }

  inline __complex__ double
  __complex_exp(__complex__ double __z) { return __builtin_cexp(__z); }

  inline __complex__ long double
  __complex_exp(const __complex__ long double& __z)
  { return __builtin_cexpl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    exp(const complex<_Tp>& __z) { return __complex_exp(__z.__rep()); }
# 761 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
  template<typename _Tp>
    inline complex<_Tp>
    __complex_log(const complex<_Tp>& __z)
    { return complex<_Tp>(log(std::abs(__z)), std::arg(__z)); }


  inline __complex__ float
  __complex_log(__complex__ float __z) { return __builtin_clogf(__z); }

  inline __complex__ double
  __complex_log(__complex__ double __z) { return __builtin_clog(__z); }

  inline __complex__ long double
  __complex_log(const __complex__ long double& __z)
  { return __builtin_clogl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    log(const complex<_Tp>& __z) { return __complex_log(__z.__rep()); }






  template<typename _Tp>
    inline complex<_Tp>
    log10(const complex<_Tp>& __z)
    { return std::log(__z) / log(_Tp(10.0)); }


  template<typename _Tp>
    inline complex<_Tp>
    __complex_sin(const complex<_Tp>& __z)
    {
      const _Tp __x = __z.real();
      const _Tp __y = __z.imag();
      return complex<_Tp>(sin(__x) * cosh(__y), cos(__x) * sinh(__y));
    }


  inline __complex__ float
  __complex_sin(__complex__ float __z) { return __builtin_csinf(__z); }

  inline __complex__ double
  __complex_sin(__complex__ double __z) { return __builtin_csin(__z); }

  inline __complex__ long double
  __complex_sin(const __complex__ long double& __z)
  { return __builtin_csinl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    sin(const complex<_Tp>& __z) { return __complex_sin(__z.__rep()); }







  template<typename _Tp>
    inline complex<_Tp>
    __complex_sinh(const complex<_Tp>& __z)
    {
      const _Tp __x = __z.real();
      const _Tp __y = __z.imag();
      return complex<_Tp>(sinh(__x) * cos(__y), cosh(__x) * sin(__y));
    }


  inline __complex__ float
  __complex_sinh(__complex__ float __z) { return __builtin_csinhf(__z); }

  inline __complex__ double
  __complex_sinh(__complex__ double __z) { return __builtin_csinh(__z); }

  inline __complex__ long double
  __complex_sinh(const __complex__ long double& __z)
  { return __builtin_csinhl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    sinh(const complex<_Tp>& __z) { return __complex_sinh(__z.__rep()); }
# 853 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
  template<typename _Tp>
    complex<_Tp>
    __complex_sqrt(const complex<_Tp>& __z)
    {
      _Tp __x = __z.real();
      _Tp __y = __z.imag();

      if (__x == _Tp())
        {
          _Tp __t = sqrt(abs(__y) / 2);
          return complex<_Tp>(__t, __y < _Tp() ? -__t : __t);
        }
      else
        {
          _Tp __t = sqrt(2 * (std::abs(__z) + abs(__x)));
          _Tp __u = __t / 2;
          return __x > _Tp()
            ? complex<_Tp>(__u, __y / __t)
            : complex<_Tp>(abs(__y) / __t, __y < _Tp() ? -__u : __u);
        }
    }


  inline __complex__ float
  __complex_sqrt(__complex__ float __z) { return __builtin_csqrtf(__z); }

  inline __complex__ double
  __complex_sqrt(__complex__ double __z) { return __builtin_csqrt(__z); }

  inline __complex__ long double
  __complex_sqrt(const __complex__ long double& __z)
  { return __builtin_csqrtl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    sqrt(const complex<_Tp>& __z) { return __complex_sqrt(__z.__rep()); }
# 897 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
  template<typename _Tp>
    inline complex<_Tp>
    __complex_tan(const complex<_Tp>& __z)
    { return std::sin(__z) / std::cos(__z); }


  inline __complex__ float
  __complex_tan(__complex__ float __z) { return __builtin_ctanf(__z); }

  inline __complex__ double
  __complex_tan(__complex__ double __z) { return __builtin_ctan(__z); }

  inline __complex__ long double
  __complex_tan(const __complex__ long double& __z)
  { return __builtin_ctanl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    tan(const complex<_Tp>& __z) { return __complex_tan(__z.__rep()); }
# 925 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
  template<typename _Tp>
    inline complex<_Tp>
    __complex_tanh(const complex<_Tp>& __z)
    { return std::sinh(__z) / std::cosh(__z); }


  inline __complex__ float
  __complex_tanh(__complex__ float __z) { return __builtin_ctanhf(__z); }

  inline __complex__ double
  __complex_tanh(__complex__ double __z) { return __builtin_ctanh(__z); }

  inline __complex__ long double
  __complex_tanh(const __complex__ long double& __z)
  { return __builtin_ctanhl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    tanh(const complex<_Tp>& __z) { return __complex_tanh(__z.__rep()); }
# 955 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
  template<typename _Tp>
    complex<_Tp>
    __complex_pow_unsigned(complex<_Tp> __x, unsigned __n)
    {
      complex<_Tp> __y = __n % 2 ? __x : complex<_Tp>(1);

      while (__n >>= 1)
        {
          __x *= __x;
          if (__n % 2)
            __y *= __x;
        }

      return __y;
    }



  template<typename _Tp>
    inline complex<_Tp>
    pow(const complex<_Tp>& __z, int __n)
    {
      return __n < 0
        ? complex<_Tp>(1) / std::__complex_pow_unsigned(__z, -__n)
        : std::__complex_pow_unsigned(__z, __n);
    }


  template<typename _Tp>
    complex<_Tp>
    pow(const complex<_Tp>& __x, const _Tp& __y)
    {




      if (__x.imag() == _Tp() && __x.real() > _Tp())
        return pow(__x.real(), __y);

      complex<_Tp> __t = std::log(__x);
      return std::polar(exp(__y * __t.real()), __y * __t.imag());
    }

  template<typename _Tp>
    inline complex<_Tp>
    __complex_pow(const complex<_Tp>& __x, const complex<_Tp>& __y)
    { return __x == _Tp() ? _Tp() : std::exp(__y * std::log(__x)); }


  inline __complex__ float
  __complex_pow(__complex__ float __x, __complex__ float __y)
  { return __builtin_cpowf(__x, __y); }

  inline __complex__ double
  __complex_pow(__complex__ double __x, __complex__ double __y)
  { return __builtin_cpow(__x, __y); }

  inline __complex__ long double
  __complex_pow(const __complex__ long double& __x,
  const __complex__ long double& __y)
  { return __builtin_cpowl(__x, __y); }

  template<typename _Tp>
    inline complex<_Tp>
    pow(const complex<_Tp>& __x, const complex<_Tp>& __y)
    { return __complex_pow(__x.__rep(), __y.__rep()); }







  template<typename _Tp>
    inline complex<_Tp>
    pow(const _Tp& __x, const complex<_Tp>& __y)
    {
      return __x > _Tp() ? std::polar(pow(__x, __y.real()),
          __y.imag() * log(__x))
                  : std::pow(complex<_Tp>(__x), __y);
    }



  template<>
    struct complex<float>
    {
      typedef float value_type;
      typedef __complex__ float _ComplexT;

                         complex(_ComplexT __z) : _M_value(__z) { }

                         complex(float __r = 0.0f, float __i = 0.0f)






      {
 __real__ _M_value = __r;
 __imag__ _M_value = __i;
      }


      explicit complex(const complex<double>&);
      explicit complex(const complex<long double>&);
# 1072 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
      float&
      real() { return __real__ _M_value; }

      const float&
      real() const { return __real__ _M_value; }

      float&
      imag() { return __imag__ _M_value; }

      const float&
      imag() const { return __imag__ _M_value; }




      void
      real(float __val) { __real__ _M_value = __val; }

      void
      imag(float __val) { __imag__ _M_value = __val; }

      complex&
      operator=(float __f)
      {
 _M_value = __f;
 return *this;
      }

      complex&
      operator+=(float __f)
      {
 _M_value += __f;
 return *this;
      }

      complex&
      operator-=(float __f)
      {
 _M_value -= __f;
 return *this;
      }

      complex&
      operator*=(float __f)
      {
 _M_value *= __f;
 return *this;
      }

      complex&
      operator/=(float __f)
      {
 _M_value /= __f;
 return *this;
      }





      template<typename _Tp>
        complex&
        operator=(const complex<_Tp>& __z)
 {
   __real__ _M_value = __z.real();
   __imag__ _M_value = __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex&
        operator+=(const complex<_Tp>& __z)
 {
   __real__ _M_value += __z.real();
   __imag__ _M_value += __z.imag();
   return *this;
 }

      template<class _Tp>
        complex&
        operator-=(const complex<_Tp>& __z)
 {
   __real__ _M_value -= __z.real();
   __imag__ _M_value -= __z.imag();
   return *this;
 }

      template<class _Tp>
        complex&
        operator*=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value *= __t;
   return *this;
 }

      template<class _Tp>
        complex&
        operator/=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value /= __t;
   return *this;
 }

      const _ComplexT __rep() const { return _M_value; }

    private:
      _ComplexT _M_value;
    };



  template<>
    struct complex<double>
    {
      typedef double value_type;
      typedef __complex__ double _ComplexT;

                         complex(_ComplexT __z) : _M_value(__z) { }

                         complex(double __r = 0.0, double __i = 0.0)






      {
 __real__ _M_value = __r;
 __imag__ _M_value = __i;
      }


                         complex(const complex<float>& __z)
      : _M_value(__z.__rep()) { }

      explicit complex(const complex<long double>&);
# 1224 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
      double&
      real() { return __real__ _M_value; }

      const double&
      real() const { return __real__ _M_value; }

      double&
      imag() { return __imag__ _M_value; }

      const double&
      imag() const { return __imag__ _M_value; }




      void
      real(double __val) { __real__ _M_value = __val; }

      void
      imag(double __val) { __imag__ _M_value = __val; }

      complex&
      operator=(double __d)
      {
 _M_value = __d;
 return *this;
      }

      complex&
      operator+=(double __d)
      {
 _M_value += __d;
 return *this;
      }

      complex&
      operator-=(double __d)
      {
 _M_value -= __d;
 return *this;
      }

      complex&
      operator*=(double __d)
      {
 _M_value *= __d;
 return *this;
      }

      complex&
      operator/=(double __d)
      {
 _M_value /= __d;
 return *this;
      }




      template<typename _Tp>
        complex&
        operator=(const complex<_Tp>& __z)
 {
   __real__ _M_value = __z.real();
   __imag__ _M_value = __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex&
        operator+=(const complex<_Tp>& __z)
 {
   __real__ _M_value += __z.real();
   __imag__ _M_value += __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex&
        operator-=(const complex<_Tp>& __z)
 {
   __real__ _M_value -= __z.real();
   __imag__ _M_value -= __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex&
        operator*=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value *= __t;
   return *this;
 }

      template<typename _Tp>
        complex&
        operator/=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value /= __t;
   return *this;
 }

      const _ComplexT __rep() const { return _M_value; }

    private:
      _ComplexT _M_value;
    };



  template<>
    struct complex<long double>
    {
      typedef long double value_type;
      typedef __complex__ long double _ComplexT;

                         complex(_ComplexT __z) : _M_value(__z) { }

                         complex(long double __r = 0.0L,
     long double __i = 0.0L)






      {
 __real__ _M_value = __r;
 __imag__ _M_value = __i;
      }


                         complex(const complex<float>& __z)
      : _M_value(__z.__rep()) { }

                         complex(const complex<double>& __z)
      : _M_value(__z.__rep()) { }
# 1377 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/complex" 3
      long double&
      real() { return __real__ _M_value; }

      const long double&
      real() const { return __real__ _M_value; }

      long double&
      imag() { return __imag__ _M_value; }

      const long double&
      imag() const { return __imag__ _M_value; }




      void
      real(long double __val) { __real__ _M_value = __val; }

      void
      imag(long double __val) { __imag__ _M_value = __val; }

      complex&
      operator=(long double __r)
      {
 _M_value = __r;
 return *this;
      }

      complex&
      operator+=(long double __r)
      {
 _M_value += __r;
 return *this;
      }

      complex&
      operator-=(long double __r)
      {
 _M_value -= __r;
 return *this;
      }

      complex&
      operator*=(long double __r)
      {
 _M_value *= __r;
 return *this;
      }

      complex&
      operator/=(long double __r)
      {
 _M_value /= __r;
 return *this;
      }




      template<typename _Tp>
        complex&
        operator=(const complex<_Tp>& __z)
 {
   __real__ _M_value = __z.real();
   __imag__ _M_value = __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex&
 operator+=(const complex<_Tp>& __z)
 {
   __real__ _M_value += __z.real();
   __imag__ _M_value += __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex&
 operator-=(const complex<_Tp>& __z)
 {
   __real__ _M_value -= __z.real();
   __imag__ _M_value -= __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex&
 operator*=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value *= __t;
   return *this;
 }

      template<typename _Tp>
        complex&
 operator/=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value /= __t;
   return *this;
 }

      const _ComplexT __rep() const { return _M_value; }

    private:
      _ComplexT _M_value;
    };



  inline
  complex<float>::complex(const complex<double>& __z)
  : _M_value(__z.__rep()) { }

  inline
  complex<float>::complex(const complex<long double>& __z)
  : _M_value(__z.__rep()) { }

  inline
  complex<double>::complex(const complex<long double>& __z)
  : _M_value(__z.__rep()) { }





  extern template istream& operator>>(istream&, complex<float>&);
  extern template ostream& operator<<(ostream&, const complex<float>&);
  extern template istream& operator>>(istream&, complex<double>&);
  extern template ostream& operator<<(ostream&, const complex<double>&);
  extern template istream& operator>>(istream&, complex<long double>&);
  extern template ostream& operator<<(ostream&, const complex<long double>&);


  extern template wistream& operator>>(wistream&, complex<float>&);
  extern template wostream& operator<<(wostream&, const complex<float>&);
  extern template wistream& operator>>(wistream&, complex<double>&);
  extern template wostream& operator<<(wostream&, const complex<double>&);
  extern template wistream& operator>>(wistream&, complex<long double>&);
  extern template wostream& operator<<(wostream&, const complex<long double>&);






}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Up>
    struct __promote_2<std::complex<_Tp>, _Up>
    {
    public:
      typedef std::complex<typename __promote_2<_Tp, _Up>::__type> __type;
    };

  template<typename _Tp, typename _Up>
    struct __promote_2<_Tp, std::complex<_Up> >
    {
    public:
      typedef std::complex<typename __promote_2<_Tp, _Up>::__type> __type;
    };

  template<typename _Tp, typename _Up>
    struct __promote_2<std::complex<_Tp>, std::complex<_Up> >
    {
    public:
      typedef std::complex<typename __promote_2<_Tp, _Up>::__type> __type;
    };


}
# 39 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/config.hh" 1
# 40 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/typeof.hh" 1
# 41 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/deprecated.hh" 1
# 42 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 61 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h"
namespace TooN {
# 79 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h"
 using std::numeric_limits;
# 114 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h"
 template<class C> struct IsField
 {
  static const int value = numeric_limits<C>::is_specialized;
 };

 template<class C> struct IsField<std::complex<C> >
 {
  static const int value = numeric_limits<C>::is_specialized;
 };





 template<class C> struct IsField<const C>
 {
  static const int value = IsField<C>::value;
 };

 template<class C, class D> struct These_Types_Do_Not_Form_A_Field;



 namespace Internal
 {



  static const unsigned int max_bytes_on_stack=1000;



  struct Slicing{};
  template<int RowStride, int ColStride> struct Slice;
  template<int Size, typename Precision, int Stride, typename Mem> struct GenericVBase;
 }

 template<int Size, class Precision, class Base> struct Vector;
 template<int Rows, int Cols, class Precision, class Base> struct Matrix;
 template<int Size, class Precision, class Base> struct DiagonalMatrix;
# 281 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h"
  template<typename T> struct Operator;



 static const int Dynamic = -1;
 static const int Resizable = -0x7fffffff;

 namespace Internal
 {
  template<int i, int j> struct SimpleSizer{static const int size=i;};
  template<int i> struct SimpleSizer<Dynamic, i>{static const int size=i;};
  template<int i> struct SimpleSizer<i, Dynamic>{static const int size=i;};
  template<> struct SimpleSizer<Dynamic, Dynamic> {static const int size=-1;};

  template<int i> struct IsStatic
  {
   static const bool is = (i!=Dynamic && i != Resizable);
  };


  template<int i, int j=i> struct Sizer{
   static const int size=SimpleSizer<Sizer<i>::size, Sizer<j>::size>::size;
  };



  template<int i> struct Sizer<i,i>{
   static const int size = IsStatic<i>::is?i:Dynamic;
  };
 }



 typedef double DefaultPrecision;
# 326 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h"
 typedef int FortranInteger;


}


# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/debug.hh" 1
# 26 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/debug.hh"
namespace TooN {

namespace Internal
{
# 50 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/debug.hh"
  static inline void check_index(int, int){}
# 125 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/debug.hh"
  template<class P> static void debug_initialize(P*, int)
  {
  }



}

}
# 332 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2

# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/introspection.hh" 1
# 41 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/introspection.hh"
namespace TooN{
namespace Internal{

template<class C>
const C& get();


typedef char OneSized[1];
typedef char TwoSized[2];




template<int S>
struct SFINAE_dummy
{
        typedef TwoSized Type;
};
# 77 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/introspection.hh"
}}
# 334 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2


# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/dchecktest.hh" 1
# 26 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/dchecktest.hh"
namespace TooN {

struct Argument_Needed_For_Dynamic_Parameter{};

namespace Internal {
 template<int N>
 struct DCheck {
  static int val() {return N;}
 };

 template<>
 struct DCheck<-1>{
  static Argument_Needed_For_Dynamic_Parameter val();
 };
}

}
# 337 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/allocator.hh" 1
# 44 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/allocator.hh"
namespace TooN {

namespace Internal
{

template<class Precision> struct DefaultTypes
{
 typedef Precision* PointerType;
 typedef const Precision* ConstPointerType;
 typedef Precision& ReferenceType;
 typedef const Precision& ConstReferenceType;
};


template<int Size, class Precision, bool heap> class StackOrHeap;

template<int Size, class Precision> class StackOrHeap<Size,Precision,0>
{
public:
 StackOrHeap()
 {
  debug_initialize(my_data, Size);
 }
 Precision my_data[Size];
};

template<int Size> class StackOrHeap<Size,double,0>
{
public:
 StackOrHeap()
 {
  debug_initialize(my_data, Size);
 }
 double my_data[Size] __attribute__ ((aligned(8))) ;
};


template<int Size, class Precision> class StackOrHeap<Size, Precision, 1>
{
 public:
  StackOrHeap()
  :my_data(new Precision[Size])
  {
   debug_initialize(my_data, Size);
  }


  ~StackOrHeap()
  {
   delete[] my_data;
  }

  Precision *my_data;

  StackOrHeap(const StackOrHeap& from)
  :my_data(new Precision[Size])
  {
   for(int i=0; i < Size; i++)
    my_data[i] = from.my_data[i];
  }
};







template<int Size, class Precision> class StaticSizedAllocator: public StackOrHeap<Size, Precision, (sizeof(Precision)*Size>max_bytes_on_stack) >
{
};







template<int Size, class Precision> struct VectorAlloc : public StaticSizedAllocator<Size, Precision>, DefaultTypes<Precision> {


 VectorAlloc() { }


 VectorAlloc(int ) { }


 template<class Op>
 VectorAlloc(const Operator<Op>&) {}


 int size() const {
  return Size;
 }

 using StaticSizedAllocator<Size, Precision>::my_data;

 Precision *get_data_ptr()
 {
  return my_data;
 };

 const Precision *get_data_ptr() const
 {
  return my_data;
 }

 protected:

  Precision *data()
  {
   return my_data;
  };

  const Precision *data() const
  {
   return my_data;
  };

  void try_destructive_resize(int)
  {}

  template<class Op> void try_destructive_resize(const Operator<Op>&)
  {}
};





template<class Precision> struct VectorAlloc<Dynamic, Precision>: public DefaultTypes<Precision> {
 Precision * const my_data;
 const int my_size;

 VectorAlloc(const VectorAlloc& v)
 :my_data(new Precision[v.my_size]), my_size(v.my_size)
 {
  for(int i=0; i < my_size; i++)
   my_data[i] = v.my_data[i];
 }

 VectorAlloc(int s)
 :my_data(new Precision[s]), my_size(s)
 {
  debug_initialize(my_data, my_size);
 }

 template <class Op>
 VectorAlloc(const Operator<Op>& op)
 : my_data(new Precision[op.size()]), my_size(op.size())
 {
  debug_initialize(my_data, my_size);
 }

 int size() const {
  return my_size;
 }

 ~VectorAlloc(){
  delete[] my_data;
 }

 Precision *get_data_ptr()
 {
  return my_data;
 };

 const Precision *get_data_ptr() const
 {
  return my_data;
 }

 protected:

  Precision *data()
  {
   return my_data;
  };

  const Precision *data() const
  {
   return my_data;
  };

  void try_destructive_resize(int)
  {}

  template<class Op> void try_destructive_resize(const Operator<Op>&)
  {}
};







template<class Precision> struct VectorAlloc<Resizable, Precision>: public DefaultTypes<Precision> {
 protected:
  std::vector<Precision> numbers;

 public:

  VectorAlloc()
  {
  }

  VectorAlloc(int s)
  :numbers(s)
  {
   debug_initialize(data(), size());
  }

  template <class Op>
  VectorAlloc(const Operator<Op>& op)
  :numbers(op.size())
  {
   debug_initialize(data(), size());
  }

  int size() const {
   return numbers.size();
  }

  Precision *get_data_ptr()
  {
   return data();
  };

  const Precision *get_data_ptr() const
  {
   return data();
  }

  void swap(VectorAlloc& s)
  {
   numbers.swap(s.numbers);
  }

 protected:

  Precision* data() {
   return &numbers[0];
  }

  const Precision* data()const {
   return &numbers[0];
  }

 private:


  template<int S> struct SFINAE_dummy{typedef void type;};

 protected:
# 307 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/allocator.hh"
  template<class Op>
  typename SFINAE_dummy<sizeof(&Operator<Op>::size)>::type try_destructive_resize(const Operator<Op>& op)
  {
   try_destructive_resize(op.size());
  }


  template<class Op>
  void try_destructive_resize(const Op&)
  {}

  void try_destructive_resize(int newsize)
  {
   numbers.resize(newsize);
   debug_initialize(data(), newsize);
  }

 public:

  void resize(int s)
  {
   int old_size = size();
   numbers.resize(s);
   if(s > old_size)
    debug_initialize(data()+old_size, s-old_size);
  }
};






template<int S, class Precision, class PtrType=Precision*, class ConstPtrType=const Precision*, class RefType=Precision&, class ConstRefType=const Precision&> struct VectorSlice
{
 int size() const {
  return S;
 }



 const PtrType my_data;
 VectorSlice(PtrType p)
 :my_data(p){}

 VectorSlice(PtrType p, int )
 :my_data(p){}

 template<class Op>
 VectorSlice(const Operator<Op>& op) : my_data(op.data()) {}

 protected:
  PtrType data()
  {
   return my_data;
  };

  ConstPtrType data() const
  {
   return my_data;
  };

  void try_destructive_resize(int)
  {}

  template<class Op> void try_destructive_resize(const Operator<Op>&)
  {}

 public:
  typedef PtrType PointerType;
  typedef ConstPtrType ConstPointerType;
  typedef RefType ReferenceType;
  typedef ConstRefType ConstReferenceType;
};





template<class Precision, class PtrType, class ConstPtrType, class RefType, class ConstRefType> struct VectorSlice<Dynamic, Precision, PtrType, ConstPtrType, RefType, ConstRefType>
{
 const PtrType my_data;
 const int my_size;

 VectorSlice(PtrType d, int s)
 :my_data(d), my_size(s)
 { }

 template<class Op>
 VectorSlice(const Operator<Op>& op) : my_data(op.data()), my_size(op.size()) {}

 int size() const {
  return my_size;
 }

 protected:

  PtrType data()
  {
   return my_data;
  };

  ConstPtrType data() const
  {
   return my_data;
  };

  void try_destructive_resize(int)
  {}

  template<class Op> void try_destructive_resize(const Operator<Op>&)
  {}

 public:
  typedef PtrType PointerType;
  typedef ConstPtrType ConstPointerType;
  typedef RefType ReferenceType;
  typedef ConstRefType ConstReferenceType;
};
# 437 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/allocator.hh"
template<int s> struct SizeHolder
{

 SizeHolder(){}
 SizeHolder(int){}


 int size() const{
  return s;
 }
};




template<> struct SizeHolder<-1>
{


 SizeHolder(int s)
 :my_size(s){}


 const int my_size;

 int size() const {
  return my_size;
 }
};





template<int S> struct RowSizeHolder: private SizeHolder<S>
{



 RowSizeHolder(int i)
 :SizeHolder<S>(i){}

 RowSizeHolder()
 {}




 template<typename Op>
 RowSizeHolder(const Operator<Op>& op) : SizeHolder<S>(op.num_rows()) {}


 int num_rows() const {return SizeHolder<S>::size();}
};






template<int S> struct ColSizeHolder: private SizeHolder<S>
{



 ColSizeHolder(int i)
 :SizeHolder<S>(i){}

 ColSizeHolder()
 {}




 template<typename Op>
 ColSizeHolder(const Operator<Op>& op) : SizeHolder<S>(op.num_cols()) {}


 int num_cols() const {return SizeHolder<S>::size();}
};



template<int R, int C, class Precision, bool FullyStatic=(R>=0 && C>=0)>
struct MatrixAlloc: public StaticSizedAllocator<R*C, Precision>
{
 MatrixAlloc(int,int)
 {}

 MatrixAlloc()
 {}

 template <class Op>
 MatrixAlloc(const Operator<Op>&)
 {}

 int num_rows() const {
  return R;
 }

 int num_cols() const {
  return C;
 }

 using StaticSizedAllocator<R*C, Precision>::my_data;

 Precision* get_data_ptr()
 {
  return my_data;
 }

 const Precision* get_data_ptr() const
 {
  return my_data;
 }
};


template<int R, int C, class Precision> struct MatrixAlloc<R, C, Precision, false>
 : public RowSizeHolder<R>,
 ColSizeHolder<C>
{
 Precision* const my_data;

 using RowSizeHolder<R>::num_rows;
 using ColSizeHolder<C>::num_cols;


 MatrixAlloc(const MatrixAlloc& m)
  :RowSizeHolder<R>(m.num_rows()),
   ColSizeHolder<C>(m.num_cols()),
   my_data(new Precision[num_rows()*num_cols()]) {
  const int size=num_rows()*num_cols();
  for(int i=0; i < size; i++) {
   my_data[i] = m.my_data[i];
  }
 }

 MatrixAlloc(int r, int c)
 :RowSizeHolder<R>(r),
  ColSizeHolder<C>(c),
  my_data(new Precision[num_rows()*num_cols()])
 {
  debug_initialize(my_data, num_rows()*num_cols());
 }

 template <class Op> MatrixAlloc(const Operator<Op>& op)
  :RowSizeHolder<R>(op),
   ColSizeHolder<C>(op),
   my_data(new Precision[num_rows()*num_cols()])
 {
  debug_initialize(my_data, num_rows()*num_cols());
 }

 ~MatrixAlloc() {
  delete[] my_data;
 }

 Precision* get_data_ptr()
 {
  return my_data;
 }

 const Precision* get_data_ptr() const
 {
  return my_data;
 }
};


template<int R, int C, class Precision> struct MatrixSlice
 : public RowSizeHolder<R>,
 ColSizeHolder<C>
{
 Precision* const my_data;

 using RowSizeHolder<R>::num_rows;
 using ColSizeHolder<C>::num_cols;


 MatrixSlice(Precision* p)
 :my_data(p){}

 MatrixSlice(Precision* p, int r, int c)
  :RowSizeHolder<R>(r),
   ColSizeHolder<C>(c),
   my_data(p){}

 template<class Op>
 MatrixSlice(const Operator<Op>& op)
  :RowSizeHolder<R>(op),
   ColSizeHolder<C>(op),
   my_data(op.data())
 {}
};







template<int s> struct StrideHolder
{

 StrideHolder(){}
 StrideHolder(int){}

 template<class Op>
 StrideHolder(const Operator<Op>&) {}

 int stride() const{
  return s;
 }
};

template<> struct StrideHolder<-1>
{
 StrideHolder(int s)
 :my_stride(s){}

 template<class Op>
 StrideHolder(const Operator<Op>& op) : my_stride(op.stride()) {}

 const int my_stride;
 int stride() const {
  return my_stride;
 }
};


template<int S> struct RowStrideHolder: public StrideHolder<S>
{
 RowStrideHolder(int i)
 :StrideHolder<S>(i){}

 RowStrideHolder()
 {}

 template<class Op>
 RowStrideHolder(const Operator<Op>& op)
  : StrideHolder<S>(op)
 {}

};


template<int S> struct ColStrideHolder: public StrideHolder<S>
{
 ColStrideHolder(int i)
 :StrideHolder<S>(i){}

 ColStrideHolder()
 {}

 template<class Op>
 ColStrideHolder(const Operator<Op>& op)
  : StrideHolder<S>(op)
 {}
};

}

}
# 338 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2

# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/size_mismatch.hh" 1
# 29 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/size_mismatch.hh"
namespace TooN {



template<int Size1, int Size2>
struct SizeMismatch_;


template<int Size>
struct SizeMismatch_<Size,Size>{
  static inline void test(int, int){}
};

template<int Size>
struct SizeMismatch_<Dynamic,Size>{
  static inline void test(int size1, int size2){
    if(size1!=size2){



    std::cerr << "TooN Size Mismatch" << std::endl;
    std::abort();

    }
  }
};

template<int Size>
struct SizeMismatch_<Size,Dynamic>{
  static inline void test(int size1, int size2){
    if(size1!=size2){



    std::cerr << "TooN Size Mismatch" << std::endl;
    std::abort();

    }
  }
};

template <>
struct SizeMismatch_<Dynamic,Dynamic>{
  static inline void test(int size1, int size2){
    if(size1!=size2){



    std::cerr << "TooN Size Mismatch" << std::endl;
    std::abort();

    }
  }
};
# 102 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/size_mismatch.hh"
template<int Size1, int Size2>
struct SizeMismatch
{
 static inline void test(int s1, int s2)
 {
  SizeMismatch_< (Size1 == Dynamic || Size1 == Resizable)?Dynamic:Size1,
                 (Size2 == Dynamic || Size2 == Resizable)?Dynamic:Size2 >::test(s1, s2);
 }
};

}
# 340 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/overfill_error.hh" 1
# 26 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/overfill_error.hh"
namespace TooN{
namespace Internal{

template<bool b> struct overfill;
template<> struct overfill<0>{};

template<int N, int Size> struct CheckOverFill
{
 static void check(int)
 {




   Internal::overfill<(N>=Size)> overfilled_vector;

 };
};

template<int N> struct CheckOverFill<N, -1>
{
 static void check(int s)
 {




   if(N >= s)
   {
    std::cerr << "TooN overfilled vector" << std::endl;
    std::abort();
   }

 };
};


template<int N, int R, int C, bool IsDynamic=(R==-1||C==-1)> struct CheckMOverFill
{
 static void check(int)
 {




   Internal::overfill<(N>=R*C)>();

 }
};

template<int N, int R, int C> struct CheckMOverFill<N, R, C, 1>
{
 static void check(int s)
 {




   if(N >= s)
   {
    std::cerr << "TooN overfilled matrix" << std::endl;
    std::abort();
   }

 }
};

}}
# 341 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/slice_error.hh" 1
# 28 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/slice_error.hh"
namespace TooN {

namespace Internal
{
 template<bool StaticBad>
 struct BadSlice;
# 42 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/slice_error.hh"
 template<>
 struct BadSlice<0>{
  static void check(){}
 };
# 55 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/slice_error.hh"
 template<int Size, int Start, int Length>
 struct CheckSlice
 {



  template<int Num> struct N
  {
   static int n(int num)
   {
    return (Num==Dynamic||Num==Resizable)?num:Num;
   }
  };







  static void check()
  {

   BadSlice<!(Size== Dynamic || Size==Resizable || Size > 0)>::check();
   BadSlice<!(Start >= 0)>::check();
   BadSlice<!(Length >= 0)>::check();
   BadSlice<(Size != Dynamic && Size != Resizable && (Start + Length > Size))>::check();
  }
# 93 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/slice_error.hh"
  static void check(int size, int start, int length)
  {

   BadSlice<!(Size == Dynamic || Size==Resizable || Size > 0)>::check();
   BadSlice<!(Start == Dynamic || Start >= 0)>::check();
   BadSlice<!(Length == Dynamic || Length >= 0)>::check();


   BadSlice<(Size!=Dynamic && Size != Resizable && Length != Dynamic && Length > Size)>::check();


   BadSlice<(Start != Dynamic && Size != Dynamic && Size != Resizable && Start > Size)>::check();

   BadSlice<(Size != Dynamic && Size != Resizable && Start != Dynamic && Length != Dynamic && Start + Length > Size)>::check();

    if(Start != Dynamic && Size != Resizable && Start != start)
    {
     std::cerr << "TooN slice: mismatch between static and dynamic start.\n";
     std::abort();
    }
    if(Length != Dynamic && Size != Resizable && Length != length)
    {
     std::cerr << "TooN slice: mismatch between static and dynamic length.\n";
     std::abort();
    }
    if(Size != Dynamic && Size != Resizable && Size != size)
    {
     std::cerr << "TooN slice: mismatch between static and dynamic size.\n";
     std::abort();
    }

   if( N<Start>::n(start) + N<Length>::n(length) > N<Size>::n(size) ||
      N<Start>::n(start) < 0 ||
      N<Length>::n(length) < 0)
   {



     std::cerr << "TooN slice out of range" << std::endl;
     std::abort();

   }
  }
 };
# 146 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/slice_error.hh"
}

}
# 342 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2

# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/comma.hh" 1
# 26 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/comma.hh"
namespace TooN{



namespace Internal
{
 template<int N, int Size, class P, class B> struct VectorFiller
 {
  Vector<Size, P, B>& v;
  VectorFiller<N-1, Size, P, B>* parent;
  bool underfill;

  VectorFiller(Vector<Size, P, B>& v_, VectorFiller<N-1, Size, P, B>* p)
  :v(v_),parent(p),underfill(N<v.size())
  {
  }

  VectorFiller<N+1, Size, P, B> operator,(const P& p)
  {
   Internal::CheckOverFill<N, Size>::check(v.size());
   v[N] = p;
   return VectorFiller<N+1, Size, P, B>(v, this);
  }

  ~VectorFiller()
  {

    if(underfill)
    {



      std::cerr << "TooN: underfilled vector\n";
      std::abort();

    }
    else if(parent)
     parent->underfill = 0;

  }
 };

 template<int Size, class P, class B> struct VectorStartFill
 {
  Vector<Size, P, B>& v;
  VectorStartFill(Vector<Size, P, B> & v_)
  :v(v_){}

  VectorFiller<1, Size, P, B> operator=(const P& p)
  {
   Internal::CheckOverFill<1, Size>::check(v.size());
   v[0] = p;
   return VectorFiller<1, Size, P, B>(v, 0);
  }
 };


 template<int N, int R, int C, class P, class B> struct MatrixFiller
 {
  Matrix<R, C, P, B>& m;
  MatrixFiller<N-1, R, C, P, B>* parent;
  int r, c;
  bool underfill;

  MatrixFiller(Matrix<R, C, P, B>& m_, MatrixFiller<N-1, R, C, P, B>*p, int r_, int c_)
  :m(m_),parent(p),r(r_),c(c_),underfill(r < m.num_rows())
  {}

  MatrixFiller<N+1, R, C, P, B> operator,(const P& p)
  {
   Internal::CheckMOverFill<N, R, C>::check(m.num_rows() * m.num_cols());
   m[r][c] = p;
   c++;
   if(c == m.num_cols())
   {
    c=0;
    r++;
   }

   return MatrixFiller<N+1, R, C, P, B>(m, this, r, c);
  }

  ~MatrixFiller()
  {

    if(underfill)
    {



      std::cerr << "TooN: underfilled matrix\n";
      std::abort();

    }
    else if(parent)
     parent->underfill = 0;

  }
 };

 template<int R, int C, class P, class B> struct MatrixStartFill
 {
  Matrix<R, C, P, B>& m;
  MatrixStartFill(Matrix<R, C, P, B> & m_)
  :m(m_){}

  MatrixFiller<1, R, C, P, B> operator=(const P& p)
  {
   Internal::CheckMOverFill<0, R, C>::check(m.num_rows() * m.num_cols());
   m[0][0] = p;
   return MatrixFiller<1, R, C, P, B>(m, 0, 0, 1);
  }
 };

}
# 155 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/comma.hh"
template<int R, int C, class Precision, class Base> Internal::MatrixStartFill<R, C, Precision, Base> Fill(Matrix<R, C, Precision, Base>& m)
{
 return m;
}
# 172 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/comma.hh"
template<int Size, class Precision, class Base> Internal::VectorStartFill<Size, Precision, Base> Fill(Vector<Size, Precision, Base>& v)
{
 return v;
}

}
# 344 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2

# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/vbase.hh" 1
# 29 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/vbase.hh"
namespace TooN {

namespace Internal{
template<int Size, class Precision, int Stride, class Mem> struct GenericVBase;





struct Default{};

template<int Stride, class Ptr=Default, class CPtr=Default, class Ref=Default, class CRef=Default>
struct SliceVBase {


 template<int Size, typename Precision>
 struct VLayout
  : public GenericVBase<Size, Precision, Stride, VectorSlice<Size, Precision, Ptr, CPtr, Ref, CRef> > {
  typedef typename VectorSlice<Size, Precision, Ptr, CPtr, Ref, CRef>::PointerType PointerType;

  VLayout(PointerType d, int length, int stride)
   :GenericVBase<Size, Precision, Stride, VectorSlice<Size, Precision, Ptr, CPtr, Ref, CRef> >(d, length, stride){
  }

  template<class Op>
  VLayout(const Operator<Op>& op)
   :GenericVBase<Size, Precision, Stride, VectorSlice<Size, Precision> >(op) {}
 };

};

template<int Stride>
struct SliceVBase<Stride, Default, Default, Default, Default> {


 template<int Size, typename Precision>
 struct VLayout
  : public GenericVBase<Size, Precision, Stride, VectorSlice<Size, Precision> > {

  typedef typename VectorSlice<Size, Precision>::PointerType PointerType;

  VLayout(PointerType d, int length, int stride)
   :GenericVBase<Size, Precision, Stride, VectorSlice<Size, Precision> >(d, length, stride){
  }

  template<class Op>
  VLayout(const Operator<Op>& op)
   :GenericVBase<Size, Precision, Stride, VectorSlice<Size, Precision> >(op) {}
 };

};






struct VBase {


 template<int Size, class Precision>
 struct VLayout
  : public GenericVBase<Size, Precision, 1, VectorAlloc<Size, Precision> > {

  VLayout(){}

  VLayout(int s)
   :GenericVBase<Size, Precision, 1, VectorAlloc<Size, Precision> >(s)
  {}

  template<class Op>
  VLayout(const Operator<Op>& op)
   :GenericVBase<Size, Precision, 1, VectorAlloc<Size, Precision> >(op) {}
 };
};






template<int Size, typename Precision, int Stride, typename Mem> struct GenericVBase: public Mem, public StrideHolder<Stride>
{
 int stride() const{
  return StrideHolder<Stride>::stride();
 }


 GenericVBase(){}

 GenericVBase(int s)
 :Mem(s)
 {}

 typedef typename Mem::PointerType PointerType;
 typedef typename Mem::ConstPointerType ConstPointerType;
 typedef typename Mem::ReferenceType ReferenceType;
 typedef typename Mem::ConstReferenceType ConstReferenceType;

 GenericVBase(PointerType d, int length, int stride)
 :Mem(d, length),StrideHolder<Stride>(stride){
 }

 template<class Op>
 GenericVBase(const Operator<Op> & op) : Mem(op), StrideHolder<Stride>(op) {}

 using Mem::data;
 using Mem::size;

 ReferenceType operator[](int i) {
  Internal::check_index(size(), i);
  return data()[i * stride()];
 }

 ConstReferenceType operator[](int i) const {
  Internal::check_index(size(), i);
  return data()[i * stride()];
 }

 typedef SliceVBase<Stride, PointerType, ConstPointerType, ReferenceType, ConstReferenceType> SliceBase;
 typedef SliceVBase<Stride, ConstPointerType, ConstPointerType, ConstReferenceType, ConstReferenceType> ConstSliceBase;



 template<int Start, int Length>
 Vector<Length, Precision, SliceBase> slice(int start, int length){
  Internal::CheckSlice<Size, Start, Length>::check(size(), start, length);
  return Vector<Length, Precision, SliceBase>(data() + stride() * (Start==Dynamic?start:Start), Length==Dynamic?length:Length, stride(), Slicing());
 }

 template<int Start, int Length>
 const Vector<Length, const Precision, ConstSliceBase> slice(int start, int length) const{
  Internal::CheckSlice<Size, Start, Length>::check(size(), start, length);
  return Vector<Length, const Precision, ConstSliceBase>(data() + stride() * (Start==Dynamic?start:Start), Length==Dynamic?length:Length, stride(), Slicing());
 }




 template<int Start, int Length> Vector<Length, Precision, SliceBase> slice(){
  Internal::CheckSlice<Size, Start, Length>::check();
  return slice<Start, Length>(Start, Length);
 }

 template<int Start, int Length> const Vector<Length, const Precision, ConstSliceBase> slice() const {
  Internal::CheckSlice<Size, Start, Length>::check();
  return slice<Start, Length>(Start, Length);
 }

 Vector<Dynamic, Precision, SliceBase> slice(int start, int length){
  return slice<Dynamic, Dynamic>(start, length);
 }

 const Vector<Dynamic, const Precision, ConstSliceBase> slice(int start, int length) const{
  return slice<Dynamic, Dynamic>(start, length);
 }


 const Matrix<1, Size, const Precision, Slice<1,Stride> > as_row() const{
  return Matrix<1, Size, const Precision, Slice<1,Stride> >(data(), 1, size(), 1, stride(), Slicing());
 }

 Matrix<1, Size, Precision, Slice<1,Stride> > as_row(){
  return Matrix<1, Size, Precision, Slice<1,Stride> >(data(), 1, size(), 1, stride(), Slicing());
 }

 const Matrix<Size, 1, const Precision, Slice<Stride,1> > as_col() const{
  return Matrix<Size, 1, const Precision, Slice<Stride,1> >(data(), size(), 1, stride(), 1, Slicing());
 }

 Matrix<Size, 1, Precision, Slice<Stride,1> > as_col(){
  return Matrix<Size, 1, Precision, Slice<Stride,1> >(data(), size(), 1, stride(), 1, Slicing());
 }

 typedef Vector<Size, Precision, SliceBase> as_slice_type;

 Vector<Size, Precision, SliceBase> as_slice(){
  return Vector<Size, Precision, SliceBase>(data(), size(), stride(), Slicing());
 }

 const Vector<Size, const Precision, ConstSliceBase> as_slice() const {
  return Vector<Size, const Precision, ConstSliceBase>(data(), size(), stride(), Slicing());
 }

 DiagonalMatrix<Size,Precision, SliceBase> as_diagonal() {
  return DiagonalMatrix<Size, Precision, SliceBase> (data(), size(), stride(), Slicing());
 }

 const DiagonalMatrix<Size,const Precision, ConstSliceBase> as_diagonal() const {
  return DiagonalMatrix<Size, const Precision, ConstSliceBase> (data(), size(), stride(), Slicing());
 }

};

}

}
# 346 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/vector.hh" 1
# 31 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/vector.hh"
namespace TooN {
# 125 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/vector.hh"
template<int Size=Dynamic, typename Precision=DefaultPrecision, typename Base=Internal::VBase>
struct Vector : public Base::template VLayout<Size, Precision> {
protected:
public:




 static const int SizeParameter = Size;

 typedef typename Base::template VLayout<Size, Precision>::PointerType PointerType;
# 148 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/vector.hh"
 inline Vector(){}




 explicit inline Vector(int size_in) : Base::template VLayout<Size, Precision>(size_in) {}







 explicit inline Vector(PointerType data) : Base::template VLayout<Size, Precision> (data) {}
# 170 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/vector.hh"
 inline Vector(PointerType data, int size_in) : Base::template VLayout<Size, Precision> (data, size_in) {}


 inline Vector(PointerType data_in, int size_in, int stride_in, Internal::Slicing)
  : Base::template VLayout<Size, Precision>(data_in, size_in, stride_in) {}

 using Base::template VLayout<Size, Precision>::size;
 using Base::template VLayout<Size, Precision>::try_destructive_resize;






 template <class Op>
 inline Vector(const Operator<Op>& op)
  : Base::template VLayout<Size, Precision> (op)
 {
  op.eval(*this);
 }
# 201 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/vector.hh"
 template<int Size2, typename Precision2, typename Base2>
 inline Vector(const Vector<Size2,Precision2,Base2>& from):
  Base::template VLayout<Size, Precision>(from.size()) {
  operator=(from);
 }
# 242 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/vector.hh"
 inline Vector& operator= (const Vector& from){
  try_destructive_resize(from.size());
  SizeMismatch<Size,Size>::test(size(), from.size());
  const int s=size();
  for(int i=0; i<s; i++){
   (*this)[i]=from[i];
  }
  return *this;
 }




 template<int Size2, typename Precision2, typename Base2>
 Vector<Size,Precision,Base >& operator= (const Vector<Size2, Precision2, Base2>& from){
  try_destructive_resize(from.size());
  SizeMismatch<Size,Size2>::test(size(), from.size());
  const int s=size();
  for(int i=0; i<s; i++){
   (*this)[i]=from[i];
  }
  return *this;
 }





 template <class Op>
 inline Vector & operator=(const Operator<Op>& op){
  try_destructive_resize(op);
  op.eval(*this);
  return *this;
 }






 Vector& operator/=(const Precision rhs) {
  for(int i=0; i<size(); i++)
   (*this)[i]/=rhs;
  return *this;
 }


 Vector& operator*=(const Precision rhs) {
  for(int i=0; i<size(); i++)
   (*this)[i]*=rhs;
  return *this;
 }


 template<int Size2, class Precision2, class Base2>
 Vector& operator+=(const Vector<Size2, Precision2, Base2>& rhs) {
  SizeMismatch<Size,Size2>::test(size(),rhs.size());
  for(int i=0; i<size(); i++)
   (*this)[i]+=rhs[i];
  return *this;
 }
# 311 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/vector.hh"
 template<class Op>
 Vector& operator+=(const Operator<Op>& op)
 {
  op.plusequals(*this);
  return *this;
 }

 template<class Op>
 Vector& operator-=(const Operator<Op>& op)
 {
  op.minusequals(*this);
  return *this;
 }


 template<int Size2, class Precision2, class Base2>
 Vector& operator-=(const Vector<Size2, Precision2, Base2>& rhs) {
  SizeMismatch<Size,Size2>::test(size(),rhs.size());
  for(int i=0; i<size(); i++)
   (*this)[i]-=rhs[i];
  return *this;
 }







 template<int Size2, class Precision2, class Base2>
 bool operator==(const Vector<Size2, Precision2, Base2>& rhs) const {
  SizeMismatch<Size,Size2>::test(size(),rhs.size());
  for(int i=0; i<size(); i++)
    if((*this)[i]!=rhs[i])
      return 0;
  return 1;
 }


 template<int Size2, class Precision2, class Base2>
 bool operator!=(const Vector<Size2, Precision2, Base2>& rhs) const {
  SizeMismatch<Size,Size2>::test(size(),rhs.size());
  for(int i=0; i<size(); i++)
    if((*this)[i]!=rhs[i])
      return 1;
  return 0;
 }


 template<class Op>
 bool operator!=(const Operator<Op>& op)
 {
  return op.notequal(*this);
 }







 Vector& ref()
 {
  return *this;
 }
# 507 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/vector.hh"
};

}
# 347 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2

# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/mbase.hh" 1
# 29 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/mbase.hh"
namespace TooN {

namespace Internal
{




template<int, int, class, int, int, class> struct GenericMBase;





template<int RowStride, int ColStride> struct Slice
{

 template<int Rows, int Cols, class Precision> struct MLayout: public GenericMBase<Rows, Cols, Precision, RowStride, ColStride, MatrixSlice<Rows, Cols, Precision> >
 {
  MLayout(Precision* p, int rows, int cols, int rowstride, int colstride)
   :GenericMBase<Rows,Cols,Precision,RowStride,ColStride,MatrixSlice<Rows, Cols, Precision> >(p, rows, cols, rowstride, colstride)
  {
  }
 };
};


template<int Rows, int Cols, bool D = (Rows == Dynamic || Cols == Dynamic)>
struct DiagSize
{
 static const int size = Dynamic;
};
template<int Rows, int Cols>
struct DiagSize<Rows, Cols, 0>
{
 static const int size = (Rows<Cols?Rows:Cols);
};

template<int Rs, int Cs, bool D = (Rs == Dynamic || Cs == Dynamic)>
struct DiagStride
{
 static const int stride = Dynamic;
};
template<int Rs, int Cs>
struct DiagStride<Rs, Cs, 0>
{
 static const int stride = Rs + Cs;
};


template<int Rows, int Cols, class Precision, int RowStride, int ColStride, class Mem> struct GenericMBase
 : public Mem,
 RowStrideHolder<RowStride>,
 ColStrideHolder<ColStride>
{

 static const int SliceRowStride = RowStride == -2?-1: RowStride;
 static const int SliceColStride = ColStride == -2?-1: ColStride;

 typedef Slice<SliceRowStride,SliceColStride> SliceBase;

 int rowstride() const {
  if(RowStride == -2) {
   return num_cols();
  } else {
   return RowStrideHolder<RowStride>::stride();
  }
 }

 int colstride() const {
  if(ColStride == -2) {
   return num_rows();
  } else {
   return ColStrideHolder<ColStride>::stride();
  }
 }


 GenericMBase(){}

 GenericMBase(Precision* p)
 :Mem(p)
 {}


 GenericMBase(Precision* p, int r, int c, int rowstride, int colstride)
 :Mem(p, r, c),
  RowStrideHolder<RowStride>(rowstride),
  ColStrideHolder<ColStride>(colstride)
 {}

 GenericMBase(int r, int c)
 :Mem(r, c) {}

 template<class Op>
 GenericMBase(const Operator<Op>& op)
  : Mem(op),
    RowStrideHolder<RowStride>(op),
    ColStrideHolder<ColStride>(op)
 {}

 using Mem::my_data;
 using Mem::num_cols;
 using Mem::num_rows;

 Precision& operator()(int r, int c){
  Internal::check_index(num_rows(), r);
  Internal::check_index(num_cols(), c);
  return my_data[r*rowstride() + c*colstride()];
 }

 const Precision& operator()(int r, int c) const {
  Internal::check_index(num_rows(), r);
  Internal::check_index(num_cols(), c);
  return my_data[r*rowstride() + c*colstride()];
 }

 Precision& operator[](const std::pair<int, int>& index) {
  Internal::check_index(num_rows(), index.first);
  Internal::check_index(num_cols(), index.second);
  return (*this)(index.first, index.second);
 }

 const Precision& operator[](const std::pair<int, int>& index) const {
  Internal::check_index(num_rows(), index.first);
  Internal::check_index(num_cols(), index.second);
  return (*this)(index.first, index.second);
 }


 typedef Vector<Cols, Precision, SliceVBase<SliceColStride> > Vec;
 typedef Vector<Cols, const Precision, SliceVBase<SliceColStride> > CVec;

 Vec operator[](int r) {
  Internal::check_index(num_rows(), r);
  return Vec(my_data + rowstride()* r, num_cols(), colstride(), Slicing());
 }

 const CVec operator[](int r) const {
  Internal::check_index(num_rows(), r);
  return CVec(my_data + rowstride()* r, num_cols(), colstride(), Slicing());
 }



 template<int Rstart, int Cstart, int Rlength, int Clength>
 Matrix<Rlength, Clength, Precision, Slice<SliceRowStride,SliceColStride> > slice(int rs, int cs, int rl, int cl){
  Internal::CheckSlice<Rows, Rstart, Rlength>::check(num_rows(), rs, rl);
  Internal::CheckSlice<Cols, Cstart, Clength>::check(num_cols(), cs, cl);



  return Matrix<Rlength, Clength, Precision, Slice<SliceRowStride,SliceColStride> >(
         my_data+rowstride()*(Rstart==Dynamic?rs:Rstart) + colstride()*(Cstart==Dynamic?cs:Cstart),
      Rlength==Dynamic?rl:Rlength,
      Clength==Dynamic?cl:Clength,
      rowstride(), colstride(), Slicing());
 }

 template<int Rstart, int Cstart, int Rlength, int Clength>
 const Matrix<Rlength, Clength, const Precision, Slice<SliceRowStride,SliceColStride> > slice(int rs, int cs, int rl, int cl) const{
  Internal::CheckSlice<Rows, Rstart, Rlength>::check(num_rows(), rs, rl);
  Internal::CheckSlice<Cols, Cstart, Clength>::check(num_cols(), cs, cl);



  return Matrix<Rlength, Clength, const Precision, Slice<SliceRowStride,SliceColStride> >(
         my_data+rowstride()*(Rstart==Dynamic?rs:Rstart) + colstride()*(Cstart==Dynamic?cs:Cstart),
      Rlength==Dynamic?rl:Rlength,
      Clength==Dynamic?cl:Clength,
      rowstride(), colstride(), Slicing());
 }


 template<int Rstart, int Cstart, int Rlength, int Clength>
 Matrix<Rlength, Clength, Precision, Slice<SliceRowStride,SliceColStride> > slice()
 {

  Internal::CheckSlice<Rows, Rstart, Rlength>::check();
  Internal::CheckSlice<Cols, Cstart, Clength>::check();
  return slice<Rstart, Cstart, Rlength, Clength>(Rstart, Cstart, Rlength, Clength);
 }

 template<int Rstart, int Cstart, int Rlength, int Clength>
 const Matrix<Rlength, Clength, const Precision, Slice<SliceRowStride,SliceColStride> > slice() const
 {
  Internal::CheckSlice<Rows, Rstart, Rlength>::check();
  Internal::CheckSlice<Cols, Cstart, Clength>::check();
  return slice<Rstart, Cstart, Rlength, Clength>(Rstart, Cstart, Rlength, Clength);
 }

 Matrix<-1, -1, Precision, Slice<SliceRowStride,SliceColStride> > slice(int rs, int cs, int rl, int cl){
  return slice<Dynamic, Dynamic, Dynamic, Dynamic>(rs, cs, rl, cl);
 }

 const Matrix<-1, -1, const Precision, Slice<SliceRowStride,SliceColStride> > slice(int rs, int cs, int rl, int cl) const {
  return slice<Dynamic, Dynamic, Dynamic, Dynamic>(rs, cs, rl, cl);
 }


 Matrix<Cols, Rows, Precision, Slice<SliceColStride,SliceRowStride> > T(){
  return Matrix<Cols, Rows, Precision, Slice<SliceColStride,SliceRowStride> >(my_data, num_cols(), num_rows(), colstride(), rowstride(), Slicing());
 }

 const Matrix<Cols, Rows, const Precision, Slice<SliceColStride,SliceRowStride> > T() const{
  return Matrix<Cols, Rows, const Precision, Slice<SliceColStride,SliceRowStride> >(my_data, num_cols(), num_rows(), colstride(), rowstride(), Slicing());
 }

 static const int DiagSize = Internal::DiagSize<Rows, Cols>::size;
 static const int DiagStride = Internal::DiagStride<SliceRowStride, SliceColStride>::stride;

 Vector<DiagSize, Precision, SliceVBase<DiagStride> > diagonal_slice()
 {
  return Vector<DiagSize, Precision, SliceVBase<DiagStride> >(my_data, std::min(num_cols(), num_rows()), rowstride() + colstride(), Slicing());
 }

 Vector<DiagSize, const Precision, SliceVBase<DiagStride> > diagonal_slice() const
 {
  return Vector<DiagSize, const Precision, SliceVBase<DiagStride> >(my_data, std::min(num_cols(), num_rows()), rowstride() + colstride(), Slicing());
 }
};

}






struct RowMajor
{
 template<int Rows, int Cols, class Precision> struct MLayout: public Internal::GenericMBase<Rows, Cols, Precision, (Cols==-1?-2:Cols), 1, Internal::MatrixAlloc<Rows, Cols, Precision> >
 {


  MLayout(){}

  MLayout(int rows, int cols)
   :Internal::GenericMBase<Rows, Cols, Precision, (Cols == -1 ? -2 : Cols), 1, Internal::MatrixAlloc<Rows, Cols, Precision> >(rows, cols)
  {}

  template<class Op>
  MLayout(const Operator<Op>& op)
   :Internal::GenericMBase<Rows, Cols, Precision, (Cols == -1 ? -2 : Cols), 1, Internal::MatrixAlloc<Rows, Cols, Precision> >(op)
  {}

 };
};

struct ColMajor
{
 template<int Rows, int Cols, class Precision> struct MLayout: public Internal::GenericMBase<Rows, Cols, Precision, 1, (Rows==-1?-2:Rows), Internal::MatrixAlloc<Rows, Cols, Precision> >
 {


  MLayout(){}

  MLayout(int rows, int cols)
  :Internal::GenericMBase<Rows, Cols, Precision, 1, (Rows == -1 ? -2 : Rows), Internal::MatrixAlloc<Rows, Cols, Precision> >(rows, cols)
  {}

  template<class Op>
  MLayout(const Operator<Op>& op)
   :Internal::GenericMBase<Rows, Cols, Precision, 1, (Rows == -1 ? -2 : Rows), Internal::MatrixAlloc<Rows, Cols, Precision> >(op)
  {}

 };
};

}
# 349 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/matrix.hh" 1
# 29 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/matrix.hh"
namespace TooN {
# 104 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/matrix.hh"
template <int Rows=Dynamic, int Cols=Rows, class Precision=DefaultPrecision, class Layout = RowMajor>
struct Matrix : public Layout::template MLayout<Rows, Cols, Precision>
{
public:

 using Layout::template MLayout<Rows, Cols, Precision>::my_data;
 using Layout::template MLayout<Rows, Cols, Precision>::num_rows;
 using Layout::template MLayout<Rows, Cols, Precision>::num_cols;







 Matrix(){}


 Matrix(int rows, int cols) :
  Layout::template MLayout<Rows,Cols,Precision>(rows, cols)
 {}


 Matrix(Precision* p) :
  Layout::template MLayout<Rows, Cols, Precision>(p)
 {}


 Matrix(Precision* p, int r, int c) :
  Layout::template MLayout<Rows, Cols, Precision>(p, r, c)
 {}



 Matrix(Precision* data, int rows, int cols, int rowstride, int colstride, Internal::Slicing)
 :Layout::template MLayout<Rows, Cols, Precision>(data, rows, cols, rowstride, colstride){}





 template <class Op>
 inline Matrix(const Operator<Op>& op)
  :Layout::template MLayout<Rows,Cols,Precision>(op)
 {
  op.eval(*this);
 }


 template<int Rows2, int Cols2, typename Precision2, typename Base2>
 inline Matrix(const Matrix<Rows2, Cols2,Precision2,Base2>& from)
 :Layout::template MLayout<Rows,Cols,Precision>(from.num_rows(), from.num_cols())
 {
     operator=(from);
 }





 inline Matrix& operator= (const Matrix& from)
 {
  SizeMismatch<Rows, Rows>::test(num_rows(), from.num_rows());
  SizeMismatch<Cols, Cols>::test(num_cols(), from.num_cols());

     for(int r=0; r < num_rows(); r++)
      for(int c=0; c < num_cols(); c++)
       (*this)[r][c] = from[r][c];

     return *this;
 }


 template<class Op> inline Matrix& operator= (const Operator<Op>& op)
 {
  op.eval(*this);
  return *this;
 }


 template<int Rows2, int Cols2, typename Precision2, typename Base2>
 Matrix& operator= (const Matrix<Rows2, Cols2, Precision2, Base2>& from)
 {
  SizeMismatch<Rows, Rows2>::test(num_rows(), from.num_rows());
  SizeMismatch<Cols, Cols2>::test(num_cols(), from.num_cols());

     for(int r=0; r < num_rows(); r++)
      for(int c=0; c < num_cols(); c++)
       (*this)[r][c] = from[r][c];

     return *this;
 }





 Matrix& operator*=(const Precision rhs)
 {
    for(int r=0; r < num_rows(); r++)
     for(int c=0; c < num_cols(); c++)
      (*this)[r][c] *= rhs;

    return *this;
 }

 Matrix& operator/=(const Precision rhs)
 {
    for(int r=0; r < num_rows(); r++)
     for(int c=0; c < num_cols(); c++)
      (*this)[r][c] /= rhs;

    return *this;
 }

 template<int Rows2, int Cols2, typename Precision2, typename Base2>
 Matrix& operator+= (const Matrix<Rows2, Cols2, Precision2, Base2>& from)
 {
  SizeMismatch<Rows, Rows2>::test(num_rows(), from.num_rows());
  SizeMismatch<Cols, Cols2>::test(num_cols(), from.num_cols());

     for(int r=0; r < num_rows(); r++)
      for(int c=0; c < num_cols(); c++)
       (*this)[r][c] += from[r][c];

     return *this;
 }

 template<class Op>
 Matrix& operator+=(const Operator<Op>& op)
 {
  op.plusequals(*this);
  return *this;
 }

 template<class Op>
 Matrix& operator-=(const Operator<Op>& op)
 {
  op.minusequals(*this);
  return *this;
 }

 template<int Rows2, int Cols2, typename Precision2, typename Base2>
 Matrix& operator-= (const Matrix<Rows2, Cols2, Precision2, Base2>& from)
 {
  SizeMismatch<Rows, Rows2>::test(num_rows(), from.num_rows());
  SizeMismatch<Cols, Cols2>::test(num_cols(), from.num_cols());

     for(int r=0; r < num_rows(); r++)
      for(int c=0; c < num_cols(); c++)
       (*this)[r][c] -= from[r][c];

     return *this;
 }

   template<int Rows2, int Cols2, typename Precision2, typename Base2>
 bool operator== (const Matrix<Rows2, Cols2, Precision2, Base2>& rhs) const
 {
  SizeMismatch<Rows, Rows2>::test(num_rows(), rhs.num_rows());
  SizeMismatch<Cols, Cols2>::test(num_cols(), rhs.num_cols());

     for(int r=0; r < num_rows(); r++)
      for(int c=0; c < num_cols(); c++)
      if((*this)[r][c] != rhs[r][c])
        return 0;
     return 1;
 }

   template<int Rows2, int Cols2, typename Precision2, typename Base2>
 bool operator!= (const Matrix<Rows2, Cols2, Precision2, Base2>& rhs) const
 {
  SizeMismatch<Rows, Rows2>::test(num_rows(), rhs.num_rows());
  SizeMismatch<Cols, Cols2>::test(num_cols(), rhs.num_cols());

     for(int r=0; r < num_rows(); r++)
      for(int c=0; c < num_cols(); c++)
      if((*this)[r][c] != rhs[r][c])
        return 1;
     return 0;
 }

 template<class Op>
 bool operator!=(const Operator<Op>& op)
 {
  return op.notequal(*this);
 }
# 298 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/matrix.hh"
 Matrix& ref()
 {
  return *this;
 }
# 513 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/matrix.hh"
};

}
# 350 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/reference.hh" 1
# 29 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/reference.hh"
namespace TooN {






struct Reference
{

 template<int Size, typename Precision>
 struct VLayout
  : public Internal::GenericVBase<Size, Precision, 1, Internal::VectorSlice<Size, Precision> >
 {

  VLayout(Precision* p, int sz=0)
   : Internal::GenericVBase<Size, Precision, 1, Internal::VectorSlice<Size, Precision> >(p, sz, 0)
  {}
 };


 struct RowMajor
 {
  template<int Rows, int Cols, class Precision>
  struct MLayout
   : public Internal::GenericMBase<Rows, Cols, Precision, (Cols==-1?-2:Cols), 1, Internal::MatrixSlice<Rows, Cols, Precision> >
  {

   MLayout(Precision* p)
    : Internal::GenericMBase<Rows,Cols,Precision, (Cols==-1?-2:Cols), 1, Internal::MatrixSlice<Rows, Cols, Precision> > (p)
   {}
   MLayout(Precision* p, int r, int c)
    : Internal::GenericMBase<Rows,Cols,Precision, (Cols==-1?-2:Cols), 1, Internal::MatrixSlice<Rows, Cols, Precision> > (p, r, c, 0, 0)
   {}
  };
 };

 struct ColMajor
 {
  template<int Rows, int Cols, class Precision> struct MLayout: public Internal::GenericMBase<Rows, Cols, Precision, 1, (Rows==-1?-2:Rows), Internal::MatrixSlice<Rows, Cols, Precision> >
  {
   MLayout(Precision* p)
    : Internal::GenericMBase<Rows, Cols, Precision, 1, (Rows==-1?-2:Rows), Internal::MatrixSlice<Rows, Cols, Precision> >(p)
   {}
   MLayout(Precision* p, int r, int c)
    : Internal::GenericMBase<Rows, Cols, Precision, 1, (Rows==-1?-2:Rows), Internal::MatrixSlice<Rows, Cols, Precision> >(p, r, c, 0, 0)
   {}
  };
 };
};


                                    inline Vector<Dynamic, double, Reference> wrapVector(double* data, int size) { return Vector<Dynamic, double, Reference>(data, size); }
                                    inline const Vector<Dynamic, const double, Reference> wrapVector(const double* data, int size) { return Vector<Dynamic, const double, Reference>(data, size); }
template<int Size> inline Vector<Size, double, Reference> wrapVector(double* data) { return Vector<Size, double, Reference>(data); }
template<int Size> inline const Vector<Size, const double, Reference> wrapVector(const double* data) { return Vector<Size, const double, Reference>(data); }
template<class Precision> inline Vector<Dynamic, Precision, Reference> wrapVector(Precision* data, int size) { return Vector<Dynamic, Precision, Reference>(data, size); }
template<class Precision> inline const Vector<Dynamic, const Precision, Reference> wrapVector(const Precision* data, int size) { return Vector<Dynamic, const Precision, Reference>(data, size); }
template<int Size, class Precision> inline Vector<Size, Precision, Reference> wrapVector(Precision* data) { return Vector<Size, Precision, Reference>(data); }
template<int Size, class Precision> inline const Vector<Size, const Precision, Reference> wrapVector(const Precision* data) { return Vector<Size, const Precision, Reference>(data); }







template<int Rows, int Cols> inline Matrix<Rows, Cols, double, Reference::RowMajor> wrapMatrix(double* data) { return Matrix<Rows, Cols, double, Reference::RowMajor>(data);}
template<int Rows, int Cols> inline const Matrix<Rows, Cols, const double, Reference::RowMajor> wrapMatrix(const double* data) { return Matrix<Rows, Cols, const double, Reference::RowMajor>(data);}
template<int Rows, int Cols, class Precision> inline Matrix<Rows, Cols, Precision, Reference::RowMajor> wrapMatrix(Precision* data) { return Matrix<Rows, Cols, Precision, Reference::RowMajor>(data);}
template<int Rows, int Cols, class Precision> inline const Matrix<Rows, Cols, const Precision, Reference::RowMajor> wrapMatrix(const Precision* data) { return Matrix<Rows, Cols, const Precision, Reference::RowMajor>(data);}

template<int Rows, int Cols> inline Matrix<Rows, Cols, double, Reference::RowMajor> wrapMatrix(double* data, int rows, int cols) { return Matrix<Rows, Cols, double, Reference::RowMajor>(data, rows, cols);}
template<int Rows, int Cols> inline const Matrix<Rows, Cols, const double, Reference::RowMajor> wrapMatrix(const double* data, int rows, int cols) { return Matrix<Rows, Cols, const double, Reference::RowMajor>(data, rows, cols);}
template<int Rows, int Cols, class Precision> inline Matrix<Rows, Cols, Precision, Reference::RowMajor> wrapMatrix(Precision* data, int rows, int cols) { return Matrix<Rows, Cols, Precision, Reference::RowMajor>(data, rows, cols);}
template<int Rows, int Cols, class Precision> inline const Matrix<Rows, Cols, const Precision, Reference::RowMajor> wrapMatrix(const Precision* data, int rows, int cols) { return Matrix<Rows, Cols, const Precision, Reference::RowMajor>(data, rows, cols);}

                                              inline Matrix<Dynamic, Dynamic, double, Reference::RowMajor> wrapMatrix(double* data, int rows, int cols) { return Matrix<Dynamic, Dynamic, double, Reference::RowMajor>(data, rows, cols);}
                                              inline const Matrix<Dynamic, Dynamic, const double, Reference::RowMajor> wrapMatrix(const double* data, int rows, int cols) { return Matrix<Dynamic, Dynamic, const double, Reference::RowMajor>(data, rows, cols);}
template<class Precision> inline Matrix<Dynamic, Dynamic, Precision, Reference::RowMajor> wrapMatrix(Precision* data, int rows, int cols) { return Matrix<Dynamic, Dynamic, Precision, Reference::RowMajor>(data, rows, cols);}
template<class Precision> inline const Matrix<Dynamic, Dynamic, const Precision, Reference::RowMajor> wrapMatrix(const Precision* data, int rows, int cols) { return Matrix<Dynamic, Dynamic, const Precision, Reference::RowMajor>(data, rows, cols);}

}
# 351 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2

# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/make_vector.hh" 1

namespace TooN {

inline Vector<1> makeVector(double x1){
  Vector<1> vals;
  vals[0] = x1;
  return vals;
}
template<typename Precision> inline Vector<1, Precision> makeVector(const Precision& x1){
  Vector<1, Precision> vals;
  vals[0] = x1;
  return vals;
}
inline Vector<2> makeVector(double x1, double x2){
  Vector<2> vals;
  vals[0] = x1;
  vals[1] = x2;
  return vals;
}
template<typename Precision> inline Vector<2, Precision> makeVector(const Precision& x1, const Precision& x2){
  Vector<2, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  return vals;
}
inline Vector<3> makeVector(double x1, double x2, double x3){
  Vector<3> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  return vals;
}
template<typename Precision> inline Vector<3, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3){
  Vector<3, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  return vals;
}
inline Vector<4> makeVector(double x1, double x2, double x3, double x4){
  Vector<4> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  return vals;
}
template<typename Precision> inline Vector<4, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4){
  Vector<4, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  return vals;
}
inline Vector<5> makeVector(double x1, double x2, double x3, double x4, double x5){
  Vector<5> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  return vals;
}
template<typename Precision> inline Vector<5, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5){
  Vector<5, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  return vals;
}
inline Vector<6> makeVector(double x1, double x2, double x3, double x4, double x5, double x6){
  Vector<6> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  return vals;
}
template<typename Precision> inline Vector<6, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6){
  Vector<6, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  return vals;
}
inline Vector<7> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7){
  Vector<7> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  return vals;
}
template<typename Precision> inline Vector<7, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7){
  Vector<7, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  return vals;
}
inline Vector<8> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8){
  Vector<8> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  return vals;
}
template<typename Precision> inline Vector<8, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8){
  Vector<8, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  return vals;
}
inline Vector<9> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9){
  Vector<9> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  return vals;
}
template<typename Precision> inline Vector<9, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9){
  Vector<9, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  return vals;
}
inline Vector<10> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10){
  Vector<10> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  return vals;
}
template<typename Precision> inline Vector<10, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10){
  Vector<10, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  return vals;
}
inline Vector<11> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11){
  Vector<11> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  return vals;
}
template<typename Precision> inline Vector<11, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11){
  Vector<11, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  return vals;
}
inline Vector<12> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12){
  Vector<12> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  return vals;
}
template<typename Precision> inline Vector<12, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12){
  Vector<12, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  return vals;
}
inline Vector<13> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13){
  Vector<13> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  return vals;
}
template<typename Precision> inline Vector<13, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13){
  Vector<13, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  return vals;
}
inline Vector<14> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14){
  Vector<14> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  return vals;
}
template<typename Precision> inline Vector<14, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14){
  Vector<14, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  return vals;
}
inline Vector<15> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15){
  Vector<15> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  return vals;
}
template<typename Precision> inline Vector<15, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15){
  Vector<15, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  return vals;
}
inline Vector<16> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16){
  Vector<16> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  return vals;
}
template<typename Precision> inline Vector<16, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16){
  Vector<16, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  return vals;
}
inline Vector<17> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17){
  Vector<17> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  return vals;
}
template<typename Precision> inline Vector<17, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17){
  Vector<17, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  return vals;
}
inline Vector<18> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18){
  Vector<18> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  return vals;
}
template<typename Precision> inline Vector<18, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18){
  Vector<18, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  return vals;
}
inline Vector<19> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19){
  Vector<19> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  return vals;
}
template<typename Precision> inline Vector<19, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19){
  Vector<19, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  return vals;
}
inline Vector<20> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20){
  Vector<20> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  return vals;
}
template<typename Precision> inline Vector<20, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20){
  Vector<20, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  return vals;
}
inline Vector<21> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21){
  Vector<21> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  return vals;
}
template<typename Precision> inline Vector<21, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21){
  Vector<21, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  return vals;
}
inline Vector<22> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22){
  Vector<22> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  return vals;
}
template<typename Precision> inline Vector<22, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22){
  Vector<22, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  return vals;
}
inline Vector<23> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23){
  Vector<23> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  return vals;
}
template<typename Precision> inline Vector<23, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23){
  Vector<23, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  return vals;
}
inline Vector<24> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24){
  Vector<24> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  vals[23] = x24;
  return vals;
}
template<typename Precision> inline Vector<24, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24){
  Vector<24, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  vals[23] = x24;
  return vals;
}
inline Vector<25> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25){
  Vector<25> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  vals[23] = x24;
  vals[24] = x25;
  return vals;
}
template<typename Precision> inline Vector<25, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25){
  Vector<25, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  vals[23] = x24;
  vals[24] = x25;
  return vals;
}
inline Vector<26> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26){
  Vector<26> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  vals[23] = x24;
  vals[24] = x25;
  vals[25] = x26;
  return vals;
}
template<typename Precision> inline Vector<26, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26){
  Vector<26, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  vals[23] = x24;
  vals[24] = x25;
  vals[25] = x26;
  return vals;
}
inline Vector<27> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27){
  Vector<27> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  vals[23] = x24;
  vals[24] = x25;
  vals[25] = x26;
  vals[26] = x27;
  return vals;
}
template<typename Precision> inline Vector<27, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27){
  Vector<27, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  vals[23] = x24;
  vals[24] = x25;
  vals[25] = x26;
  vals[26] = x27;
  return vals;
}
inline Vector<28> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28){
  Vector<28> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  vals[23] = x24;
  vals[24] = x25;
  vals[25] = x26;
  vals[26] = x27;
  vals[27] = x28;
  return vals;
}
template<typename Precision> inline Vector<28, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28){
  Vector<28, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  vals[23] = x24;
  vals[24] = x25;
  vals[25] = x26;
  vals[26] = x27;
  vals[27] = x28;
  return vals;
}
inline Vector<29> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29){
  Vector<29> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  vals[23] = x24;
  vals[24] = x25;
  vals[25] = x26;
  vals[26] = x27;
  vals[27] = x28;
  vals[28] = x29;
  return vals;
}
template<typename Precision> inline Vector<29, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29){
  Vector<29, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  vals[23] = x24;
  vals[24] = x25;
  vals[25] = x26;
  vals[26] = x27;
  vals[27] = x28;
  vals[28] = x29;
  return vals;
}
inline Vector<30> makeVector(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30){
  Vector<30> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  vals[23] = x24;
  vals[24] = x25;
  vals[25] = x26;
  vals[26] = x27;
  vals[27] = x28;
  vals[28] = x29;
  vals[29] = x30;
  return vals;
}
template<typename Precision> inline Vector<30, Precision> makeVector(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30){
  Vector<30, Precision> vals;
  vals[0] = x1;
  vals[1] = x2;
  vals[2] = x3;
  vals[3] = x4;
  vals[4] = x5;
  vals[5] = x6;
  vals[6] = x7;
  vals[7] = x8;
  vals[8] = x9;
  vals[9] = x10;
  vals[10] = x11;
  vals[11] = x12;
  vals[12] = x13;
  vals[13] = x14;
  vals[14] = x15;
  vals[15] = x16;
  vals[16] = x17;
  vals[17] = x18;
  vals[18] = x19;
  vals[19] = x20;
  vals[20] = x21;
  vals[21] = x22;
  vals[22] = x23;
  vals[23] = x24;
  vals[24] = x25;
  vals[25] = x26;
  vals[26] = x27;
  vals[27] = x28;
  vals[28] = x29;
  vals[29] = x30;
  return vals;
}
}
# 353 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/operators.hh" 1
# 29 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/operators.hh"
namespace TooN {
# 39 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/operators.hh"
template<class L, class R> struct Field
{

 static const int is = IsField<L>::value & IsField<R>::value;
};

namespace Internal {





 template<class C> C gettype();


 template<class C> struct Clean
 {
  typedef C type;
 };

 template<class C> struct Clean<const C>
 {
  typedef C type;
 };

 template<class C> struct Clean<const C&>
 {
  typedef C type;
 };

 template<class C> struct Clean<C&>
 {
  typedef C type;
 };

 template<class L, class R> struct CField
 {
  static const int is = TooN::Field<typename Clean<L>::type, typename Clean<R>::type>::is;
 };






 template<class L, class R, int F = CField<L,R>::is> struct AddType { typedef __typeof__((gettype<L>()+gettype<R>())) type;};
 template<class L, class R, int F = CField<L,R>::is> struct SubtractType { typedef __typeof__((gettype<L>()-gettype<R>())) type;};
 template<class L, class R, int F = CField<L,R>::is> struct MultiplyType { typedef __typeof__((gettype<L>()*gettype<R>())) type;};
 template<class L, class R, int F = CField<L,R>::is> struct DivideType { typedef __typeof__((gettype<L>()/gettype<R>())) type;};

 template<class L, class R> struct AddType<L, R, 0> { typedef These_Types_Do_Not_Form_A_Field<L, R> type;};
 template<class L, class R> struct SubtractType<L, R, 0> { typedef These_Types_Do_Not_Form_A_Field<L, R> type;};
 template<class L, class R> struct MultiplyType<L, R, 0> { typedef These_Types_Do_Not_Form_A_Field<L, R> type;};
 template<class L, class R> struct DivideType<L, R, 0> { typedef These_Types_Do_Not_Form_A_Field<L, R> type;};



 struct Add{
  template<class A, class B, class C> static A op(const B& b, const C& c){return b+c;}
  template<class P1, class P2> struct Return { typedef typename AddType<P1,P2>::type Type;};
 };
 struct Subtract{
  template<class A, class B, class C> static A op(const B& b, const C& c){return b-c;}
  template<class P1, class P2> struct Return { typedef typename SubtractType<P1,P2>::type Type;};
 };
 struct Multiply{
  template<class A, class B, class C> static A op(const B& b, const C& c){return b*c;}
  template<class P1, class P2> struct Return { typedef typename MultiplyType<P1,P2>::type Type;};
 };
 struct Divide{
  template<class A, class B, class C> static A op(const B& b, const C& c){return b/c;}
  template<class P1, class P2> struct Return { typedef typename DivideType<P1,P2>::type Type;};
 };

};





template<class Op> struct Operator{};






namespace Internal {
 template<typename Op,
    int S1, typename P1, typename B1,
    int S2, typename P2, typename B2>
 struct VPairwise;

 template <int S, typename P, typename A>
 struct VNegate;
};

template<typename Op,
   int S1, typename P1, typename B1,
   int S2, typename P2, typename B2>
struct Operator<Internal::VPairwise<Op, S1, P1, B1, S2, P2, B2> > {
 const Vector<S1, P1, B1> & lhs;
 const Vector<S2, P2, B2> & rhs;

 Operator(const Vector<S1, P1, B1> & lhs_in, const Vector<S2, P2, B2> & rhs_in) : lhs(lhs_in), rhs(rhs_in) {}

 template<int S0, typename P0, typename Ba0>
 void eval(Vector<S0, P0, Ba0>& res) const
 {
  for(int i=0; i < res.size(); ++i)
   res[i] = Op::template op<P0,P1, P2>(lhs[i],rhs[i]);
 }
 int size() const {return lhs.size();}
};


template<int S1, int S2, typename P1, typename P2, typename B1, typename B2>
Vector<Internal::Sizer<S1,S2>::size, typename Internal::AddType<P1, P2>::type>
operator+(const Vector<S1, P1, B1>& v1, const Vector<S2, P2, B2>& v2)
{
 SizeMismatch<S1, S2>:: test(v1.size(),v2.size());
 return Operator<Internal::VPairwise<Internal::Add,S1,P1,B1,S2,P2,B2> >(v1,v2);
}


template<int S1, int S2, typename P1, typename P2, typename B1, typename B2>
Vector<Internal::Sizer<S1,S2>::size, typename Internal::SubtractType<P1, P2>::type> operator-(const Vector<S1, P1, B1>& v1, const Vector<S2, P2, B2>& v2)
{
 SizeMismatch<S1, S2>:: test(v1.size(),v2.size());
 return Operator<Internal::VPairwise<Internal::Subtract,S1,P1,B1,S2,P2,B2> >(v1,v2);
}


template <int S1, int S2, typename P1, typename P2, typename B1, typename B2>
Vector<Internal::Sizer<S1,S2>::size, typename Internal::MultiplyType<P1,P2>::type> diagmult(const Vector<S1,P1,B1>& v1, const Vector<S2,P2,B2>& v2)
{
 SizeMismatch<S1,S2>::test(v1.size(),v2.size());
 return Operator<Internal::VPairwise<Internal::Multiply,S1,P1,B1,S2,P2,B2> >(v1,v2);
}

template<int S, typename P, typename A>
struct Operator<Internal::VNegate<S, P, A> > {
 const Vector<S, P, A> & input;
 Operator( const Vector<S, P, A> & in ) : input(in) {}

 template<int S0, typename P0, typename A0>
 void eval(Vector<S0, P0, A0> & res) const
 {
  res = input * -1;
 }
 int size() const { return input.size(); }
};


template <int S, typename P, typename A>
Vector<S, P> operator-(const Vector<S,P,A> & v){
 return Operator<Internal::VNegate<S,P,A> >(v);
}


template<int Size1, typename Precision1, typename Base1, int Size2, typename Precision2, typename Base2>
typename Internal::MultiplyType<Precision1, Precision2>::type operator*(const Vector<Size1, Precision1, Base1>& v1, const Vector<Size2, Precision2, Base2>& v2){
  SizeMismatch<Size1, Size2>:: test(v1.size(),v2.size());
  const int s=v1.size();
  typename Internal::MultiplyType<Precision1, Precision2>::type result=0;
  for(int i=0; i<s; i++){
    result+=v1[i]*v2[i];
  }
  return result;
}

template <typename P1, typename P2, typename B1, typename B2>
Vector<3, typename Internal::MultiplyType<P1,P2>::type> operator^(const Vector<3,P1,B1>& v1, const Vector<3,P2,B2>& v2){

 typedef typename Internal::MultiplyType<P1,P2>::type restype;

 Vector<3, restype> result;

 result[0] = v1[1]*v2[2] - v1[2]*v2[1];
 result[1] = v1[2]*v2[0] - v1[0]*v2[2];
 result[2] = v1[0]*v2[1] - v1[1]*v2[0];

 return result;
}
# 231 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/operators.hh"
namespace Internal {
 template<typename Op,
    int R1, int C1, typename P1, typename B1,
    int R2, int C2, typename P2, typename B2>
 struct MPairwise;

 template<int R1, int C1, typename P1, typename B1,
    int R2, int C2, typename P2, typename B2>
 struct MatrixMultiply;

 template<int R, int C, typename P, typename A>
 struct MNegate;
};

template<typename Op,
   int R1, int C1, typename P1, typename B1,
   int R2, int C2, typename P2, typename B2>
struct Operator<Internal::MPairwise<Op, R1, C1, P1, B1, R2, C2, P2, B2> > {
 const Matrix<R1, C1, P1, B1> & lhs;
 const Matrix<R2, C2, P2, B2> & rhs;

 Operator(const Matrix<R1, C1, P1, B1> & lhs_in, const Matrix<R2, C2, P2, B2> & rhs_in) : lhs(lhs_in), rhs(rhs_in) {}

 template<int R0, int C0, typename P0, typename Ba0>
 void eval(Matrix<R0, C0, P0, Ba0>& res) const
 {
  for(int r=0; r < res.num_rows(); ++r){
   for(int c=0; c < res.num_cols(); ++c){
    res(r,c) = Op::template op<P0,P1, P2>(lhs(r,c),rhs(r,c));
   }
  }
 }
 int num_rows() const {return lhs.num_rows();}
 int num_cols() const {return lhs.num_cols();}
};


template<int R1, int R2, int C1, int C2, typename P1, typename P2, typename B1, typename B2>
Matrix<Internal::Sizer<R1,R2>::size, Internal::Sizer<C1,C2>::size, typename Internal::AddType<P1, P2>::type>
operator+(const Matrix<R1, C1, P1, B1>& m1, const Matrix<R2, C2, P2, B2>& m2)
{
 SizeMismatch<R1, R2>:: test(m1.num_rows(),m2.num_rows());
 SizeMismatch<C1, C2>:: test(m1.num_cols(),m2.num_cols());
 return Operator<Internal::MPairwise<Internal::Add,R1,C1,P1,B1,R2,C2,P2,B2> >(m1,m2);
}


template<int R1, int R2, int C1, int C2, typename P1, typename P2, typename B1, typename B2>
Matrix<Internal::Sizer<R1,R2>::size, Internal::Sizer<C1,C2>::size, typename Internal::SubtractType<P1, P2>::type>
operator-(const Matrix<R1, C1, P1, B1>& m1, const Matrix<R2, C2, P2, B2>& m2)
{
 SizeMismatch<R1, R2>:: test(m1.num_rows(),m2.num_rows());
 SizeMismatch<C1, C2>:: test(m1.num_cols(),m2.num_cols());
 return Operator<Internal::MPairwise<Internal::Subtract,R1,C1,P1,B1,R2,C2,P2,B2> >(m1,m2);
}

template<int R, int C, typename P, typename A>
struct Operator<Internal::MNegate<R,C, P, A> > {
 const Matrix<R,C,P,A> & input;
 Operator( const Matrix<R,C,P,A> & in ) : input(in) {}

 template<int R0, int C0, typename P0, typename A0>
 void eval(Matrix<R0,C0,P0,A0> & res) const
 {
  res = input * -1;
 }
 int num_rows() const { return input.num_rows(); }
 int num_cols() const { return input.num_cols(); }
};


template <int R, int C, typename P, typename A>
Matrix<R, C, P> operator-(const Matrix<R,C,P,A> & v){
 return Operator<Internal::MNegate<R,C,P,A> >(v);
}

template<int R1, int C1, typename P1, typename B1,
   int R2, int C2, typename P2, typename B2>
struct Operator<Internal::MatrixMultiply<R1, C1, P1, B1, R2, C2, P2, B2> > {
 const Matrix<R1, C1, P1, B1> & lhs;
 const Matrix<R2, C2, P2, B2> & rhs;

 Operator(const Matrix<R1, C1, P1, B1> & lhs_in, const Matrix<R2, C2, P2, B2> & rhs_in) : lhs(lhs_in), rhs(rhs_in) {}

 template<int R0, int C0, typename P0, typename Ba0>
 void eval(Matrix<R0, C0, P0, Ba0>& res) const
 {

  for(int r=0; r < res.num_rows(); ++r) {
   for(int c=0; c < res.num_cols(); ++c) {
    res(r,c) = lhs[r] * (rhs.T()[c]);
   }
  }
 }
 int num_rows() const {return lhs.num_rows();}
 int num_cols() const {return rhs.num_cols();}
};






template<int R1, int C1, int R2, int C2, typename P1, typename P2, typename B1, typename B2>
Matrix<R1, C2, typename Internal::MultiplyType<P1, P2>::type> operator*(const Matrix<R1, C1, P1, B1>& m1, const Matrix<R2, C2, P2, B2>& m2)
{
 SizeMismatch<C1, R2>:: test(m1.num_cols(),m2.num_rows());
 return Operator<Internal::MatrixMultiply<R1,C1,P1,B1,R2,C2,P2,B2> >(m1,m2);
}






namespace Internal {

 template<int R, int C, typename P1, typename B1, int Size, typename P2, typename B2>
 struct MatrixVectorMultiply;


 template<int Size, typename P1, typename B1, int R, int C, typename P2, typename B2>
 struct VectorMatrixMultiply;


 template<int R, int C, typename P1, typename B1, int Size, typename P2, typename B2>
 struct MatrixVectorDiagMultiply;


 template<int Size, typename P1, typename B1, int R, int C, typename P2, typename B2>
 struct VectorMatrixDiagMultiply;

};


template<int R, int C, typename P1, typename B1, int Size, typename P2, typename B2>
struct Operator<Internal::MatrixVectorMultiply<R,C,P1,B1,Size,P2,B2> > {
 const Matrix<R,C,P1,B1>& lhs;
 const Vector<Size,P2,B2>& rhs;

 Operator(const Matrix<R,C,P1,B1>& lhs_in, const Vector<Size,P2,B2>& rhs_in) : lhs(lhs_in), rhs(rhs_in) {}

 int size() const {return lhs.num_rows();}

 template<int Sout, typename Pout, typename Bout>
 void eval(Vector<Sout, Pout, Bout>& res) const {
  for(int i=0; i < res.size(); ++i){
   res[i] = lhs[i] * rhs;
  }
 }
};

template<int R, int C, int Size, typename P1, typename P2, typename B1, typename B2>
Vector<R, typename Internal::MultiplyType<P1,P2>::type> operator*(const Matrix<R, C, P1, B1>& m, const Vector<Size, P2, B2>& v)
{
 SizeMismatch<C,Size>::test(m.num_cols(), v.size());
 return Operator<Internal::MatrixVectorMultiply<R,C,P1,B1,Size,P2,B2> >(m,v);
}


template<int R, int C, typename P1, typename B1, int Size, typename P2, typename B2>
struct Operator<Internal::VectorMatrixMultiply<Size,P1,B1,R,C,P2,B2> > {
 const Vector<Size,P1,B1>& lhs;
 const Matrix<R,C,P2,B2>& rhs;

 Operator(const Vector<Size,P1,B1>& lhs_in, const Matrix<R,C,P2,B2>& rhs_in) : lhs(lhs_in), rhs(rhs_in) {}

 int size() const {return rhs.num_cols();}

 template<int Sout, typename Pout, typename Bout>
 void eval(Vector<Sout, Pout, Bout>& res) const {
  for(int i=0; i < res.size(); ++i){
   res[i] = lhs * rhs.T()[i];
  }
 }
};

template<int R, int C, typename P1, typename B1, int Size, typename P2, typename B2>
Vector<C, typename Internal::MultiplyType<P1,P2>::type> operator*(const Vector<Size,P1,B1>& v,
                  const Matrix<R,C,P2,B2>& m)
{
 SizeMismatch<R,Size>::test(m.num_rows(), v.size());
 return Operator<Internal::VectorMatrixMultiply<Size,P1,B1,R,C,P2,B2> >(v,m);
}



template<int R, int C, typename P1, typename B1, int Size, typename P2, typename B2>
struct Operator<Internal::MatrixVectorDiagMultiply<R,C,P1,B1,Size,P2,B2> > {
 const Matrix<R,C,P1,B1>& lhs;
 const Vector<Size,P2,B2>& rhs;

 Operator(const Matrix<R,C,P1,B1>& lhs_in, const Vector<Size,P2,B2>& rhs_in) : lhs(lhs_in), rhs(rhs_in) {}

 int num_rows() const {return lhs.num_rows();}
 int num_cols() const {return lhs.num_cols();}

 template<int Rout, int Cout, typename Pout, typename Bout>
 void eval(Matrix<Rout, Cout, Pout, Bout>& res) const {
  for(int c=0; c < res.num_cols(); ++c) {
   P2 temp = rhs[c];
   for(int r=0; r < res.num_rows(); ++r) {
    res(r,c) = lhs(r,c)*temp;
   }
  }
 }
};

template<int R, int C, int Size, typename P1, typename P2, typename B1, typename B2>
Matrix<R, C, typename Internal::MultiplyType<P1,P2>::type> diagmult(const Matrix<R, C, P1, B1>& m, const Vector<Size, P2, B2>& v)
{
 SizeMismatch<C,Size>::test(m.num_cols(), v.size());
 return Operator<Internal::MatrixVectorDiagMultiply<R,C,P1,B1,Size,P2,B2> >(m,v);
}


template<int R, int C, typename P1, typename B1, int Size, typename P2, typename B2>
struct Operator<Internal::VectorMatrixDiagMultiply<Size,P1,B1,R,C,P2,B2> > {
 const Vector<Size,P1,B1>& lhs;
 const Matrix<R,C,P2,B2>& rhs;

 Operator(const Vector<Size,P1,B1>& lhs_in, const Matrix<R,C,P2,B2>& rhs_in) : lhs(lhs_in), rhs(rhs_in) {}

 int num_rows() const {return rhs.num_rows();}
 int num_cols() const {return rhs.num_cols();}

 template<int Rout, int Cout, typename Pout, typename Bout>
 void eval(Matrix<Rout, Cout, Pout, Bout>& res) const {
  for(int r=0; r < res.num_rows(); ++r){
   const P1 temp = lhs[r];
   for(int c=0; c<res.num_cols(); ++c){
    res(r,c) = temp * rhs(r,c);
   }
  }
 }
};

template<int R, int C, typename P1, typename B1, int Size, typename P2, typename B2>
Matrix<R, C, typename Internal::MultiplyType<P1,P2>::type> diagmult(const Vector<Size,P1,B1>& v,
                 const Matrix<R,C,P2,B2>& m)
{
 SizeMismatch<R,Size>::test(m.num_rows(), v.size());
 return Operator<Internal::VectorMatrixDiagMultiply<Size,P1,B1,R,C,P2,B2> >(v,m);
}
# 486 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/operators.hh"
namespace Internal {
 template<int Size, typename P1, typename B1, typename P2, typename Op>
 struct ApplyScalarV;

 template<int Size, typename P1, typename B1, typename P2, typename Op>
 struct ApplyScalarVL;

 template<int R, int C, typename P1, typename B1, typename P2, typename Op>
 struct ApplyScalarM;

 template<int R, int C, typename P1, typename B1, typename P2, typename Op>
 struct ApplyScalarML;
};

template<int Size, typename P1, typename B1, typename P2, typename Op>
struct Operator<Internal::ApplyScalarV<Size,P1,B1,P2,Op> > {
 const Vector<Size,P1,B1>& lhs;
 const P2& rhs;

 Operator(const Vector<Size,P1,B1>& v, const P2& s) : lhs(v), rhs(s) {}

 template<int S0, typename P0, typename Ba0>
 void eval(Vector<S0,P0,Ba0>& v) const {
  for(int i=0; i<v.size(); i++){
   v[i]= Op::template op<P0,P1,P2> (lhs[i],rhs);
  }
 }

 int size() const {
  return lhs.size();
 }
};

template <int Size, typename P1, typename B1, typename P2>
Vector<Size, typename Internal::Multiply::Return<P1,P2>::Type> operator*(const Vector<Size, P1, B1>& v, const P2& s){
 return Operator<Internal::ApplyScalarV<Size,P1,B1,P2,Internal::Multiply> > (v,s);
}
template <int Size, typename P1, typename B1, typename P2>
Vector<Size, typename Internal::Divide::Return<P1,P2>::Type> operator/(const Vector<Size, P1, B1>& v, const P2& s){
 return Operator<Internal::ApplyScalarV<Size,P1,B1,P2,Internal::Divide> > (v,s);
}

template<int Size, typename P1, typename B1, typename P2, typename Op>
struct Operator<Internal::ApplyScalarVL<Size,P1,B1,P2,Op> > {
 const P2& lhs;
 const Vector<Size,P1,B1>& rhs;

 Operator(const P2& s, const Vector<Size,P1,B1>& v) : lhs(s), rhs(v) {}

 template<int S0, typename P0, typename Ba0>
 void eval(Vector<S0,P0,Ba0>& v) const {
  for(int i=0; i<v.size(); i++){
   v[i]= Op::template op<P0,P2,P1> (lhs,rhs[i]);
  }
 }

 int size() const {
  return rhs.size();
 }
};
template <int Size, typename P1, typename B1, typename P2>
Vector<Size, typename Internal::Multiply::Return<P2,P1>::Type> operator*(const P2& s, const Vector<Size, P1, B1>& v){
 return Operator<Internal::ApplyScalarVL<Size,P1,B1,P2,Internal::Multiply> > (s,v);
}





template<int R, int C, typename P1, typename B1, typename P2, typename Op>
struct Operator<Internal::ApplyScalarM<R,C,P1,B1,P2,Op> > {
 const Matrix<R,C,P1,B1>& lhs;
 const P2& rhs;

 Operator(const Matrix<R,C,P1,B1>& m, const P2& s) : lhs(m), rhs(s) {}

 template<int R0, int C0, typename P0, typename Ba0>
 void eval(Matrix<R0,C0,P0,Ba0>& m) const {
  for(int r=0; r<m.num_rows(); r++){
   for(int c=0; c<m.num_cols(); c++){
    m(r,c)= Op::template op<P0,P1,P2> (lhs(r,c),rhs);
   }
  }
 }

 int num_rows() const {
  return lhs.num_rows();
 }
 int num_cols() const {
  return lhs.num_cols();
 }
};

template <int R, int C, typename P1, typename B1, typename P2>
Matrix<R,C, typename Internal::Multiply::Return<P1,P2>::Type> operator*(const Matrix<R,C, P1, B1>& m, const P2& s){
 return Operator<Internal::ApplyScalarM<R,C,P1,B1,P2,Internal::Multiply> > (m,s);
}
template <int R, int C, typename P1, typename B1, typename P2>
Matrix<R,C, typename Internal::Divide::Return<P1,P2>::Type> operator/(const Matrix<R,C, P1, B1>& m, const P2& s){
 return Operator<Internal::ApplyScalarM<R,C,P1,B1,P2,Internal::Divide> > (m,s);
}

template<int R, int C, typename P1, typename B1, typename P2, typename Op>
struct Operator<Internal::ApplyScalarML<R,C,P1,B1,P2,Op> > {
 const P2& lhs;
 const Matrix<R,C,P1,B1>& rhs;

 Operator( const P2& s,const Matrix<R,C,P1,B1>& m) : lhs(s), rhs(m) {}

 template<int R0, int C0, typename P0, typename Ba0>
 void eval(Matrix<R0,C0,P0,Ba0>& m) const {
  for(int r=0; r<m.num_rows(); r++){
   for(int c=0; c<m.num_cols(); c++){
    m(r,c)= Op::template op<P0,P1,P2> (lhs,rhs(r,c));
   }
  }
 }

 int num_rows() const {
  return rhs.num_rows();
 }
 int num_cols() const {
  return rhs.num_cols();
 }
};

template <int R, int C, typename P1, typename B1, typename P2>
Matrix<R,C, typename Internal::Multiply::Return<P2,P1>::Type> operator*(const P2& s, const Matrix<R,C, P1, B1>& m){
 return Operator<Internal::ApplyScalarML<R,C,P1,B1,P2,Internal::Multiply> > (s,m);
}





template <int Size, typename P1, typename B1, typename Op>
Vector<Size, typename Internal::Add::Return<P1,typename Operator<Op>::Precision>::Type> operator+(const Vector<Size, P1, B1>& v, const Operator<Op>& op){
 return op.add(v);
}

template <int Size, typename P1, typename B1, typename Op>
Vector<Size, typename Internal::Add::Return<typename Operator<Op>::Precision, P1>::Type> operator+(const Operator<Op>& op, const Vector<Size, P1, B1>& v){
 return op.add(v);
}

template <int Rows, int Cols, typename P1, typename B1, typename Op>
Matrix<Rows, Cols, typename Internal::Add::Return<P1,typename Operator<Op>::Precision>::Type> operator+(const Matrix<Rows, Cols, P1, B1>& m, const Operator<Op>& op){
 return op.add(m);
}

template <int Rows, int Cols, typename P1, typename B1, typename Op>
Matrix<Rows, Cols, typename Internal::Add::Return<typename Operator<Op>::Precision,P1>::Type> operator+(const Operator<Op>& op, const Matrix<Rows, Cols, P1, B1>& m){
 return op.add(m);
}




template <int Size, typename P1, typename B1, typename Op>
Vector<Size, typename Internal::Subtract::Return<P1,typename Operator<Op>::Precision>::Type> operator-(const Vector<Size, P1, B1>& v, const Operator<Op>& op){
 return op.rsubtract(v);
}

template <int Size, typename P1, typename B1, typename Op>
Vector<Size, typename Internal::Subtract::Return<typename Operator<Op>::Precision, P1>::Type> operator-(const Operator<Op>& op, const Vector<Size, P1, B1>& v){
 return op.lsubtract(v);
}

template <int Rows, int Cols, typename P1, typename B1, typename Op>
Matrix<Rows, Cols, typename Internal::Subtract::Return<P1,typename Operator<Op>::Precision>::Type> operator-(const Matrix<Rows, Cols, P1, B1>& m, const Operator<Op>& op){
 return op.rsubtract(m);
}

template <int Rows, int Cols, typename P1, typename B1, typename Op>
Matrix<Rows, Cols, typename Internal::Subtract::Return<typename Operator<Op>::Precision,P1>::Type> operator-(const Operator<Op>& op, const Matrix<Rows, Cols, P1, B1>& m){
 return op.lsubtract(m);
}






template <int Size, typename Precision, typename Base>
inline std::ostream& operator<< (std::ostream& os, const Vector<Size,Precision,Base>& v){
  std::streamsize fw = os.width();
  for(int i=0; i<v.size(); i++){
    os.width(fw);
    os << v[i] << " ";
  }
  return os;
}


template <int Size, typename Precision, typename Base>
std::istream& operator >> (std::istream& is, Vector<Size, Precision, Base>& v){
 for (int i=0; i<v.size(); i++){
  is >> v[i];
 }
 return is;
}

template<int Rows, int Cols, typename Precision, class Base>
inline std::ostream& operator<< (std::ostream& os, const Matrix<Rows, Cols, Precision, Base>& m){
 std::streamsize fw = os.width();
 for(int i=0; i < m.num_rows(); i++)
 {
  for(int j=0; j < m.num_cols(); j++)
  {
   if(j != 0)
    os << " ";
   os.width(fw);
   os << m(i,j);
  }
  os << std::endl;
 }
 return os;
}


template <int Rows, int Cols, typename Precision, typename Base>
std::istream& operator >> (std::istream& is, Matrix<Rows, Cols, Precision, Base>& m){
 for(int r=0; r<m.num_rows(); r++){
  for(int c=0; c < m.num_cols(); c++){
   is >> m(r,c);
  }
 }
 return is;
}



namespace Internal
{
 template<class C>struct Has_swap_Method{ static OneSized& detect_swap_Method(...); template<class S> static typename SFINAE_dummy<sizeof(&S::swap)>::Type& detect_swap_Method(const S&); static const bool Has = sizeof(detect_swap_Method(get<C>())) == 2;};
 template<class V1, class V2, bool has_swap = Has_swap_Method<V1>::Has>
 struct Swap
 {
  static void swap(V1& v1, V2& v2)
  {
   using std::swap;
   SizeMismatch<V1::SizeParameter,V2::SizeParameter>::test(v1.size(), v2.size());
   for(int i=0; i < v1.size(); i++)
    swap(v1[i], v2[i]);
  }
 };

 template<class V>
 struct Swap<V, V, true>
 {
  static void swap(V& v1, V& v2)
  {
   v1.swap(v2);
  }
 };

};


template<int S1, class P1, class B1, int S2, class P2, class B2>
void swap(Vector<S1, P1, B1>& v1, Vector<S2, P2, B2>& v2)
{
 Internal::Swap<Vector<S1, P1, B1>, Vector<S2, P2, B2> >::swap(v1, v2);
}


template<int S1, class P1, class B1>
void swap(Vector<S1, P1, B1>& v1, Vector<S1, P1, B1>& v2)
{
 Internal::Swap<Vector<S1, P1, B1>, Vector<S1, P1, B1> >::swap(v1, v2);
}

}
# 354 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2

# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/objects.h" 1
# 29 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/objects.h"
namespace TooN {

namespace Internal{

 struct Zero;
 struct SizedZero;
 struct RCZero;
 template<class P> struct Identity;
 template<class P> struct SizedIdentity;

 template<int S, class P, class B, class Ps> class ScalarsVector;
 template<int R, int C, class P, class B, class Ps> class ScalarsMatrix;
 template<int R, int C, class P, class B, class Ps> class AddIdentity;
 template<class P> class Scalars;
 template<class P> class SizedScalars;
 template<class P> class RCScalars;




 struct One{

  One(){}

  template<class C> operator C() const
  {
   return 1;
  }
 };
 template<class Rhs> Rhs operator*(One, const Rhs& v){return v;}
 template<class Lhs> Lhs operator*(const Lhs& v, One){return v;}
 template<class Rhs> Rhs operator+(One, const Rhs& v){return 1+v;}
 template<class Lhs> Lhs operator+(const Lhs& v, One){return v+1;}
 template<class Rhs> Rhs operator-(One, const Rhs& v){return 1-v;}
 template<class Lhs> Lhs operator-(const Lhs& v, One){return v-1;}


 inline int operator-(const One&)
 {
  return -1;
 }





 template<class C> struct NegType
 {
  typedef C Type;
 };





 template<> struct NegType<One>
 {


  typedef int Type;
 };
}





template<class Rhs> struct Field<Internal::One, Rhs>
{


 static const int is = Field<Rhs,Rhs>::is;
};





template<class Lhs> struct Field<Lhs, Internal::One>
{


 static const int is = Field<Lhs,Lhs>::is;
};







template<> struct Operator<Internal::SizedZero>;
template<> struct Operator<Internal::RCZero>;





template<> struct Operator<Internal::Zero> {


 template<int Size, class Precision, class Base>
 void eval(Vector<Size, Precision, Base>& v) const {
  for(int i=0; i < v.size(); i++) {
   v[i]= 0;
  }
 }

 template<int R, int C, class P, class B>
 void eval(Matrix<R,C,P,B>& m) const {
  for(int r=0; r<m.num_rows(); r++){
   for(int c=0; c<m.num_cols(); c++){
    m(r,c)=0;
   }
  }
 }


 template<int R, int C, class P, class B>
 bool notequal(Matrix<R,C,P,B>& m) const {
  for(int r=0; r<m.num_rows(); r++)
   for(int c=0; c<m.num_cols(); c++)
    if(m[r][c] != 0)
     return 1;

  return 0;
 }


 template<int S, class P, class B>
 bool notequal(Vector<S,P,B>& v) const {
  for(int i=0; i<v.size(); i++)
   if(v[i] != 0)
    return 1;
  return 0;
 }


 Operator<Internal::SizedZero> operator()(int s);

 Operator<Internal::RCZero> operator()(int r, int c);

};




template<> struct Operator<Internal::RCZero> : public Operator<Internal::Zero> {



 Operator(int r, int c) : my_rows(r), my_cols(c) {}

 const int my_rows;
 const int my_cols;

 int num_rows() const {return my_rows;}
 int num_cols() const {return my_cols;}

};




template<> struct Operator<Internal::SizedZero> : public Operator<Internal::Zero> {



 Operator(int s) : my_size(s) {}

 const int my_size;

 int size() const {return my_size;}
 int num_rows() const {return my_size;}
 int num_cols() const {return my_size;}

};

inline Operator<Internal::SizedZero> Operator<Internal::Zero>::operator()(int s){
 return Operator<Internal::SizedZero>(s);
}

inline Operator<Internal::RCZero> Operator<Internal::Zero>::operator()(int r, int c){
 return Operator<Internal::RCZero>(r,c);
}
# 223 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/objects.h"
template<int R, int C, class P, class B, class Precision> struct Operator<Internal::AddIdentity<R,C,P,B,Precision> >
{
 const Precision s;
 const Matrix<R,C,P,B>& m;
 bool invert_m;



 Operator(Precision s_, const Matrix<R,C,P,B>& m_, bool b)
  :s(s_),m(m_),invert_m(b){}




 template<int R1, int C1, class P1, class B1>
 void eval(Matrix<R1,C1,P1,B1>& mm) const{
  for(int r=0; r < m.num_rows(); r++)
   for(int c=0; c < m.num_cols(); c++)
    if(invert_m)
     mm[r][c] = -m[r][c];
    else
     mm[r][c] = m[r][c];

  for(int i=0; i < m.num_rows(); i++)
    mm[i][i] += (P)s;
 }




 int num_rows() const
 {
  return m.num_rows();
 }
 int num_cols() const
 {
  return m.num_cols();
 }

};




template<class Pr> struct Operator<Internal::Identity<Pr> > {




 typedef Pr Precision;
 template<class Pout, class Pmult> Operator<Internal::Identity<Pout> > scale_me(const Pmult& m) const
 {
  return Operator<Internal::Identity<Pout> >(val*m);
 }



 const Precision val;



 Operator(const Precision& v)
  :val(v)
 {}

 Operator()
 {}




 template<int R, int C, class P, class B>
 void eval(Matrix<R,C,P,B>& m) const {
  SizeMismatch<R, C>::test(m.num_rows(), m.num_cols());

  for(int r=0; r<m.num_rows(); r++){
   for(int c=0; c<m.num_cols(); c++){
    m(r,c)=0;
   }
  }

  for(int r=0; r < m.num_rows(); r++) {
   m(r,r) = (P)val;
  }
 }

 template<int Rows, int Cols, typename P, typename B>
 void plusequals(Matrix<Rows, Cols, P, B>& m) const
 {
  SizeMismatch<Rows, Cols>::test(m.num_rows(), m.num_cols());
  for(int i=0; i < m.num_rows(); i++)
   m[i][i] += (P)val;
 }

 template <int Rows, int Cols, typename P1, typename B1>
 Operator<Internal::AddIdentity<Rows,Cols,P1,B1,Precision> > add(const Matrix<Rows,Cols, P1, B1>& m) const
 {
  SizeMismatch<Rows, Cols>::test(m.num_rows(), m.num_cols());
  return Operator<Internal::AddIdentity<Rows,Cols,P1,B1,Precision> >(val, m, 0);
 }

 template <int Rows, int Cols, typename P1, typename B1>
 Operator<Internal::AddIdentity<Rows,Cols,P1,B1,Precision> > rsubtract(const Matrix<Rows,Cols, P1, B1>& m) const
 {
  SizeMismatch<Rows, Cols>::test(m.num_rows(), m.num_cols());
  return Operator<Internal::AddIdentity<Rows,Cols,P1,B1,Precision> >(-val, m, 0);
 }

 template <int Rows, int Cols, typename P1, typename B1>
 Operator<Internal::AddIdentity<Rows,Cols,P1,B1,Precision> > lsubtract(const Matrix<Rows,Cols, P1, B1>& m) const
 {
  SizeMismatch<Rows, Cols>::test(m.num_rows(), m.num_cols());
  return Operator<Internal::AddIdentity<Rows,Cols,P1,B1,Precision> >(val, m, 1);
 }




 Operator<Internal::SizedIdentity<Precision> > operator()(int s){
  return Operator<Internal::SizedIdentity<Precision> >(s, val);
 }

};




template<class Precision> struct Operator<Internal::SizedIdentity<Precision> >
 : public Operator<Internal::Identity<Precision> > {

 using Operator<Internal::Identity<Precision> >::val;



 Operator(int s, const Precision& v)
  :Operator<Internal::Identity<Precision> > (v), my_size(s)
 {}




 const int my_size;
 int num_rows() const {return my_size;}
 int num_cols() const {return my_size;}




 template<class Pout, class Pmult> Operator<Internal::SizedIdentity<Pout> > scale_me(const Pmult& m) const
 {
  return Operator<Internal::SizedIdentity<Pout> >(my_size, val*m);
 }

};
# 386 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/objects.h"
template<int S, class P, class B, class Precision> struct Operator<Internal::ScalarsVector<S,P,B,Precision> >
{
 const Precision s;
 const Vector<S,P,B>& v;
 const bool invert_v;



 Operator(Precision s_, const Vector<S,P,B>& v_, bool inv)
  :s(s_),v(v_),invert_v(inv){}




 template<int S1, class P1, class B1>
 void eval(Vector<S1,P1,B1>& vv) const{
  for(int i=0; i < v.size(); i++)
   if(invert_v)
    vv[i] = s - v[i];
   else
    vv[i] = s + v[i];
 }




 int size() const
 {
  return v.size();
 }

};




template<int R, int C, class P, class B, class Precision> struct Operator<Internal::ScalarsMatrix<R,C,P,B,Precision> >
{
 const Precision s;
 const Matrix<R,C,P,B>& m;
 const bool invert_m;


 Operator(Precision s_, const Matrix<R,C,P,B>& m_, bool inv)
  :s(s_),m(m_),invert_m(inv){}
 template<int R1, int C1, class P1, class B1>
 void eval(Matrix<R1,C1,P1,B1>& mm) const{
  for(int r=0; r < m.num_rows(); r++)
   for(int c=0; c < m.num_cols(); c++)
    if(invert_m)
     mm[r][c] = s - m[r][c];
    else
     mm[r][c] = s + m[r][c];
 }




 int num_rows() const
 {
  return m.num_rows();
 }
 int num_cols() const
 {
  return m.num_cols();
 }

};





template<class P> struct Operator<Internal::Scalars<P> >
{


 typedef P Precision;


 const Precision s;



 Operator(Precision s_)
  :s(s_){}

 Operator()
 {}
# 484 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/objects.h"
 template <int Size, typename P1, typename B1>
 void eval(Vector<Size, P1, B1>& v) const
 {
  for(int i=0; i < v.size(); i++)
   v[i] = (P1)s;
 }

 template <int Size, typename P1, typename B1>
 void plusequals(Vector<Size, P1, B1>& v) const
 {
  for(int i=0; i < v.size(); i++)
   v[i] += (P1)s;
 }

 template <int Size, typename P1, typename B1>
 void minusequals(Vector<Size, P1, B1>& v) const
 {
  for(int i=0; i < v.size(); ++i)
   v[i] -= (P1)s;
 }

 template <int Size, typename P1, typename B1>
 Operator<Internal::ScalarsVector<Size,P1,B1,Precision> > add(const Vector<Size, P1, B1>& v) const
 {
  return Operator<Internal::ScalarsVector<Size,P1,B1,Precision> >(s, v, 0);
 }

 template <int Size, typename P1, typename B1>
 Operator<Internal::ScalarsVector<Size,P1,B1,Precision> > rsubtract(const Vector<Size, P1, B1>& v) const
 {
  return Operator<Internal::ScalarsVector<Size,P1,B1,Precision> >(-s, v, 0);
 }

 template <int Size, typename P1, typename B1>
 Operator<Internal::ScalarsVector<Size,P1,B1,Precision> > lsubtract(const Vector<Size, P1, B1>& v) const
 {
  return Operator<Internal::ScalarsVector<Size,P1,B1,Precision> >(s, v, 1);
 }






 template <int Rows, int Cols, typename P1, typename B1>
 void eval(Matrix<Rows,Cols, P1, B1>& m) const
 {
  for(int r=0; r < m.num_rows(); r++)
   for(int c=0; c < m.num_cols(); c++)
    m[r][c] = s;
 }

 template <int Rows, int Cols, typename P1, typename B1>
 void plusequals(Matrix<Rows,Cols, P1, B1>& m) const
 {
  for(int r=0; r < m.num_rows(); r++)
   for(int c=0; c < m.num_cols(); c++)
    m[r][c] += (P1)s;
 }

 template <int Rows, int Cols, typename P1, typename B1>
 void minusequals(Matrix<Rows,Cols, P1, B1>& m) const
 {
  for(int r=0; r < m.num_rows(); r++)
   for(int c=0; c < m.num_cols(); c++)
    m[r][c] -= (P1)s;
 }

 template <int Rows, int Cols, typename P1, typename B1>
 Operator<Internal::ScalarsMatrix<Rows,Cols,P1,B1,Precision> > add(const Matrix<Rows,Cols, P1, B1>& v) const
 {
  return Operator<Internal::ScalarsMatrix<Rows,Cols,P1,B1,Precision> >(s, v, 0);
 }


 template <int Rows, int Cols, typename P1, typename B1>
 Operator<Internal::ScalarsMatrix<Rows,Cols,P1,B1,typename Internal::NegType<P>::Type> > rsubtract(const Matrix<Rows,Cols, P1, B1>& v) const
 {
  return Operator<Internal::ScalarsMatrix<Rows,Cols,P1,B1,typename Internal::NegType<P>::Type > >(-s, v, 0);
 }

 template <int Rows, int Cols, typename P1, typename B1>
 Operator<Internal::ScalarsMatrix<Rows,Cols,P1,B1,Precision> > lsubtract(const Matrix<Rows,Cols, P1, B1>& v) const
 {
  return Operator<Internal::ScalarsMatrix<Rows,Cols,P1,B1,Precision> >(s, v, 1);
 }
# 579 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/objects.h"
 Operator<Internal::SizedScalars<Precision> > operator()(int size) const
 {
  return Operator<Internal::SizedScalars<Precision> > (s,size);
 }

 Operator<Internal::RCScalars<Precision> > operator()(int r, int c) const
 {
  return Operator<Internal::RCScalars<Precision> > (s,r,c);
 }




 template<class Pout, class Pmult> Operator<Internal::Scalars<Pout> > scale_me(const Pmult& m) const
 {
  return Operator<Internal::Scalars<Pout> >(s*m);
 }

};




template<class P> struct Operator<Internal::SizedScalars<P> >: public Operator<Internal::Scalars<P> >
{
 using Operator<Internal::Scalars<P> >::s;


 const int my_size;
 int size() const {
  return my_size;
 }
 int num_rows() const {
  return my_size;
 }
 int num_cols() const {
  return my_size;
 }




 Operator(P s, int sz)
  :Operator<Internal::Scalars<P> >(s),my_size(sz){}




 template<class Pout, class Pmult> Operator<Internal::SizedScalars<Pout> > scale_me(const Pmult& m) const
 {
  return Operator<Internal::SizedScalars<Pout> >(s*m, my_size);
 }


private:
 void operator()(int);
 void operator()(int,int);
};





template<class P> struct Operator<Internal::RCScalars<P> >: public Operator<Internal::Scalars<P> >
{
 using Operator<Internal::Scalars<P> >::s;



 const int my_rows, my_cols;
 int num_rows() const {
  return my_rows;
 }
 int num_cols() const {
  return my_cols;
 }

 Operator(P s, int r, int c)
  :Operator<Internal::Scalars<P> >(s),my_rows(r),my_cols(c)
 {}

 template<class Pout, class Pmult> Operator<Internal::RCScalars<Pout> > scale_me(const Pmult& m) const
 {
  return Operator<Internal::RCScalars<Pout> >(s*m, my_rows, my_cols);
 }


private:
 void operator()(int);
 void operator()(int,int);
};







template<template<class> class Op, class Pl, class Pr>
Operator<Op<typename Internal::MultiplyType<Pl, Pr>::type > >
operator*(const Pl& l, const Operator<Op<Pr> >& r)
{
 return r.template scale_me<typename Internal::MultiplyType<Pl, Pr>::type, Pl>(l);
}

template<template<class> class Op, class Pl, class Pr>
Operator<Op<typename Internal::MultiplyType<Pl, Pr>::type > >
operator*(const Operator<Op<Pl> >& l, const Pr& r)
{
 return l.template scale_me<typename Internal::MultiplyType<Pl, Pr>::type>(r);
}

template<template<class> class Op, class Pl, class Pr>
Operator<Op<typename Internal::DivideType<Pl, Pr>::type > >
operator/(const Operator<Op<Pl> >& l, const Pr& r)
{
 return l.template scale_me<typename Internal::MultiplyType<Pl, Pr>::type, Pl>(static_cast<typename Internal::DivideType<Pl,Pr>::type>(1)/r);
}


template<class Op>
Operator<Op> operator-(const Operator<Op>& o)
{
 return o.template scale_me<typename Operator<Op>::Precision>(-1);
}


template<template<class>class Op>
Operator<Op<DefaultPrecision> > operator-(const Operator<Op<Internal::One> >& o)
{
 return o.template scale_me<DefaultPrecision>(-1);
}
# 731 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/objects.h"
static const Operator<Internal::Scalars<Internal::One> > Ones;
# 745 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/objects.h"
static Operator<Internal::Zero> Zeros;
# 766 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/objects.h"
static Operator<Internal::Identity<Internal::One> > Identity;

}
# 356 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2

# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/diagmatrix.h" 1
# 31 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/diagmatrix.h"
namespace TooN {

 namespace Internal
 {

  template<int Size, typename Precision, typename Base>
  struct DiagMatrixOp;
 }

 template<int Size, typename Precision, typename Base>
 struct Operator<Internal::DiagMatrixOp<Size, Precision, Base> >
 {
  public:




  inline Operator() {}
  inline Operator(int size_in) : my_vector(size_in) {}
  inline Operator(Precision* data) : my_vector(data) {}
  inline Operator(Precision* data, int size_in) : my_vector(data,size_in) {}
  inline Operator(Precision* data_in, int size_in, int stride_in, Internal::Slicing)
   : my_vector(data_in, size_in, stride_in, Internal::Slicing() ) {}




  template <class Op>
  inline Operator(const Operator<Op>& op)
   : my_vector (op)
  {
   op.eval(my_vector);
  }


  template<int Size2, typename Precision2, typename Base2>
  inline Operator(const Vector<Size2,Precision2,Base2>& from)
   : my_vector(from.size())
  {
   my_vector=from;
  }





  template<int R, int C, class P, class B>
  void eval(Matrix<R,C,P,B>& m) const {
   SizeMismatch<Size, Size>::test(m.num_rows(), m.num_cols());
   m = Zeros;
   m.diagonal_slice() = my_vector;
  }


  Vector<Size,Precision,Base> my_vector;
 };
# 107 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/diagmatrix.h"
template<int Size=Dynamic, typename Precision=DefaultPrecision, typename Base=Internal::VBase>
struct DiagonalMatrix: public Operator<Internal::DiagMatrixOp<Size, Precision, Base> > {
public:



 inline DiagonalMatrix() {}
 inline DiagonalMatrix(int size_in) : Operator<Internal::DiagMatrixOp<Size, Precision, Base> >(size_in) {}
 inline DiagonalMatrix(Precision* data) : Operator<Internal::DiagMatrixOp<Size, Precision, Base> >(data) {}
 inline DiagonalMatrix(Precision* data, int size_in) : Operator<Internal::DiagMatrixOp<Size, Precision, Base> >(data,size_in) {}
 inline DiagonalMatrix(Precision* data_in, int size_in, int stride_in, Internal::Slicing)
  : Operator<Internal::DiagMatrixOp<Size, Precision, Base> >(data_in, size_in, stride_in, Internal::Slicing() ) {}




 template <class Op>
 inline DiagonalMatrix(const Operator<Op>& op)
  : Operator<Internal::DiagMatrixOp<Size, Precision, Base> > (op)
 {
  op.eval(this->my_vector);
 }


 template<int Size2, typename Precision2, typename Base2>
 inline DiagonalMatrix(const Vector<Size2,Precision2,Base2>& from)
  : Operator<Internal::DiagMatrixOp<Size, Precision, Base> >(from.size())
 {
  this->my_vector=from;
 }





 Precision& operator[](int i){return this->my_vector[i];}

 const Precision& operator[](int i) const {return this->my_vector[i];}


 typename Vector<Size, Precision, Base>::as_slice_type diagonal_slice() {
  return this->my_vector.as_slice();
 }


 const typename Vector<Size, Precision, Base>::as_slice_type diagonal_slice() const {
  return this->my_vector.as_slice();
 }

 DiagonalMatrix<Size, Precision> operator-() const
 {
  return -this->my_vector;
 }
};


template<int S1, typename P1, typename B1, int S2, typename P2, typename B2>
inline Vector<Internal::Sizer<S1,S2>::size, typename Internal::MultiplyType<P1,P2>::type>
operator*(const DiagonalMatrix<S1,P1,B1>& d, const Vector<S2,P2,B2>& v){
 return diagmult(d.my_vector,v);
}

template<int S1, typename P1, typename B1, int S2, typename P2, typename B2>
inline Vector<Internal::Sizer<S1,S2>::size, typename Internal::MultiplyType<P1,P2>::type>
operator*( const Vector<S1,P1,B1>& v, const DiagonalMatrix<S2,P2,B2>& d){
 return diagmult(v,d.my_vector);
}


template<int S1, typename P1, typename B1, int S2, typename P2, typename B2>
inline DiagonalMatrix<Internal::Sizer<S1,S2>::size, typename Internal::MultiplyType<P1,P2>::type>
operator*( const DiagonalMatrix<S1,P1,B1>& d1, const DiagonalMatrix<S2,P2,B2>& d2){
 SizeMismatch<S1,S2>::test(d1.my_vector.size(),d2.my_vector.size());
 return Operator<Internal::VPairwise<Internal::Multiply,S1,P1,B1,S2,P2,B2> >(d1.my_vector,d2.my_vector);
}

template<int R, int C, int Size, typename P1, typename P2, typename B1, typename B2>
Matrix<R, C, typename Internal::MultiplyType<P1,P2>::type>
operator* (const Matrix<R, C, P1, B1>& m, const DiagonalMatrix<Size, P2, B2>& d){
 return diagmult(m,d.my_vector);
}

template<int R, int C, typename P1, typename B1, int Size, typename P2, typename B2>
Matrix<R, C, typename Internal::MultiplyType<P1,P2>::type>
operator* (const DiagonalMatrix<Size,P1,B1>& d, const Matrix<R,C,P2,B2>& m)
{
 return diagmult(d.my_vector, m);
}

}
# 358 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2

# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/data.hh" 1
# 26 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/data.hh"
namespace TooN{
 namespace Internal{
  template<int N, class P> class Data;
 }
# 38 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/data.hh"
 template<int N, class P> struct Operator<Internal::Data<N, P> >
 {
  P vals[N];

  template<int R, int C, class T, class B>
  void eval(Matrix<R, C, T, B>& m) const
  {
   SizeMismatch<(R==-1?-1:(C==-1?-1:(R*C))), N>:: test(m.num_rows()*m.num_cols(), N);
   for(int r=0, n=0; r < R; r++)
    for(int c=0; c < C; c++, n++)
     m[r][c] = vals[n];
  }

  template<int S, typename P2, typename B>
  void eval(Vector<S, P2, B>& v) const
  {
   SizeMismatch<S, N>::test(v.size(), N);
   for(int i=0; i <N; i++)
    v[i] = vals[i];
  }
 };
# 87 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/data.hh"
}
# 360 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/internal/data_functions.hh" 1

namespace TooN {

inline Operator<Internal::Data<1, double> > Data(double x1){
  Operator<Internal::Data<1, double> > d;
  d.vals[0] = x1;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<1, Precision> > Data(const Precision& x1){
  Operator<Internal::Data<1, Precision> > d;
  d.vals[0] = x1;
  return d;
}
inline Operator<Internal::Data<2, double> > Data(double x1, double x2){
  Operator<Internal::Data<2, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<2, Precision> > Data(const Precision& x1, const Precision& x2){
  Operator<Internal::Data<2, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  return d;
}
inline Operator<Internal::Data<3, double> > Data(double x1, double x2, double x3){
  Operator<Internal::Data<3, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<3, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3){
  Operator<Internal::Data<3, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  return d;
}
inline Operator<Internal::Data<4, double> > Data(double x1, double x2, double x3, double x4){
  Operator<Internal::Data<4, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<4, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4){
  Operator<Internal::Data<4, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  return d;
}
inline Operator<Internal::Data<5, double> > Data(double x1, double x2, double x3, double x4, double x5){
  Operator<Internal::Data<5, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<5, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5){
  Operator<Internal::Data<5, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  return d;
}
inline Operator<Internal::Data<6, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6){
  Operator<Internal::Data<6, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<6, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6){
  Operator<Internal::Data<6, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  return d;
}
inline Operator<Internal::Data<7, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7){
  Operator<Internal::Data<7, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<7, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7){
  Operator<Internal::Data<7, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  return d;
}
inline Operator<Internal::Data<8, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8){
  Operator<Internal::Data<8, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<8, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8){
  Operator<Internal::Data<8, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  return d;
}
inline Operator<Internal::Data<9, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9){
  Operator<Internal::Data<9, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<9, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9){
  Operator<Internal::Data<9, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  return d;
}
inline Operator<Internal::Data<10, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10){
  Operator<Internal::Data<10, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<10, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10){
  Operator<Internal::Data<10, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  return d;
}
inline Operator<Internal::Data<11, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11){
  Operator<Internal::Data<11, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<11, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11){
  Operator<Internal::Data<11, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  return d;
}
inline Operator<Internal::Data<12, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12){
  Operator<Internal::Data<12, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<12, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12){
  Operator<Internal::Data<12, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  return d;
}
inline Operator<Internal::Data<13, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13){
  Operator<Internal::Data<13, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<13, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13){
  Operator<Internal::Data<13, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  return d;
}
inline Operator<Internal::Data<14, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14){
  Operator<Internal::Data<14, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<14, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14){
  Operator<Internal::Data<14, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  return d;
}
inline Operator<Internal::Data<15, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15){
  Operator<Internal::Data<15, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<15, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15){
  Operator<Internal::Data<15, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  return d;
}
inline Operator<Internal::Data<16, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16){
  Operator<Internal::Data<16, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<16, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16){
  Operator<Internal::Data<16, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  return d;
}
inline Operator<Internal::Data<17, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17){
  Operator<Internal::Data<17, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<17, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17){
  Operator<Internal::Data<17, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  return d;
}
inline Operator<Internal::Data<18, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18){
  Operator<Internal::Data<18, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<18, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18){
  Operator<Internal::Data<18, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  return d;
}
inline Operator<Internal::Data<19, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19){
  Operator<Internal::Data<19, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<19, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19){
  Operator<Internal::Data<19, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  return d;
}
inline Operator<Internal::Data<20, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20){
  Operator<Internal::Data<20, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<20, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20){
  Operator<Internal::Data<20, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  return d;
}
inline Operator<Internal::Data<21, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21){
  Operator<Internal::Data<21, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<21, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21){
  Operator<Internal::Data<21, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  return d;
}
inline Operator<Internal::Data<22, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22){
  Operator<Internal::Data<22, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<22, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22){
  Operator<Internal::Data<22, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  return d;
}
inline Operator<Internal::Data<23, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23){
  Operator<Internal::Data<23, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<23, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23){
  Operator<Internal::Data<23, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  return d;
}
inline Operator<Internal::Data<24, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24){
  Operator<Internal::Data<24, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<24, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24){
  Operator<Internal::Data<24, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  return d;
}
inline Operator<Internal::Data<25, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25){
  Operator<Internal::Data<25, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<25, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25){
  Operator<Internal::Data<25, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  return d;
}
inline Operator<Internal::Data<26, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26){
  Operator<Internal::Data<26, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<26, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26){
  Operator<Internal::Data<26, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  return d;
}
inline Operator<Internal::Data<27, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27){
  Operator<Internal::Data<27, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<27, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27){
  Operator<Internal::Data<27, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  return d;
}
inline Operator<Internal::Data<28, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28){
  Operator<Internal::Data<28, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<28, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28){
  Operator<Internal::Data<28, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  return d;
}
inline Operator<Internal::Data<29, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29){
  Operator<Internal::Data<29, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<29, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29){
  Operator<Internal::Data<29, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  return d;
}
inline Operator<Internal::Data<30, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30){
  Operator<Internal::Data<30, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<30, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30){
  Operator<Internal::Data<30, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  return d;
}
inline Operator<Internal::Data<31, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31){
  Operator<Internal::Data<31, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<31, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31){
  Operator<Internal::Data<31, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  return d;
}
inline Operator<Internal::Data<32, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32){
  Operator<Internal::Data<32, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<32, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32){
  Operator<Internal::Data<32, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  return d;
}
inline Operator<Internal::Data<33, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33){
  Operator<Internal::Data<33, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<33, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33){
  Operator<Internal::Data<33, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  return d;
}
inline Operator<Internal::Data<34, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34){
  Operator<Internal::Data<34, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<34, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34){
  Operator<Internal::Data<34, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  return d;
}
inline Operator<Internal::Data<35, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35){
  Operator<Internal::Data<35, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<35, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35){
  Operator<Internal::Data<35, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  return d;
}
inline Operator<Internal::Data<36, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36){
  Operator<Internal::Data<36, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<36, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36){
  Operator<Internal::Data<36, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  return d;
}
inline Operator<Internal::Data<37, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37){
  Operator<Internal::Data<37, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<37, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37){
  Operator<Internal::Data<37, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  return d;
}
inline Operator<Internal::Data<38, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38){
  Operator<Internal::Data<38, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<38, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38){
  Operator<Internal::Data<38, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  return d;
}
inline Operator<Internal::Data<39, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39){
  Operator<Internal::Data<39, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<39, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39){
  Operator<Internal::Data<39, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  return d;
}
inline Operator<Internal::Data<40, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40){
  Operator<Internal::Data<40, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<40, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40){
  Operator<Internal::Data<40, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  return d;
}
inline Operator<Internal::Data<41, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41){
  Operator<Internal::Data<41, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<41, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41){
  Operator<Internal::Data<41, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  return d;
}
inline Operator<Internal::Data<42, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42){
  Operator<Internal::Data<42, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<42, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42){
  Operator<Internal::Data<42, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  return d;
}
inline Operator<Internal::Data<43, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43){
  Operator<Internal::Data<43, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<43, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43){
  Operator<Internal::Data<43, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  return d;
}
inline Operator<Internal::Data<44, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44){
  Operator<Internal::Data<44, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<44, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44){
  Operator<Internal::Data<44, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  return d;
}
inline Operator<Internal::Data<45, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45){
  Operator<Internal::Data<45, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<45, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45){
  Operator<Internal::Data<45, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  return d;
}
inline Operator<Internal::Data<46, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46){
  Operator<Internal::Data<46, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<46, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46){
  Operator<Internal::Data<46, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  return d;
}
inline Operator<Internal::Data<47, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47){
  Operator<Internal::Data<47, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<47, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47){
  Operator<Internal::Data<47, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  return d;
}
inline Operator<Internal::Data<48, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48){
  Operator<Internal::Data<48, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<48, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48){
  Operator<Internal::Data<48, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  return d;
}
inline Operator<Internal::Data<49, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49){
  Operator<Internal::Data<49, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<49, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49){
  Operator<Internal::Data<49, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  return d;
}
inline Operator<Internal::Data<50, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50){
  Operator<Internal::Data<50, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<50, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50){
  Operator<Internal::Data<50, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  return d;
}
inline Operator<Internal::Data<51, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51){
  Operator<Internal::Data<51, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<51, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51){
  Operator<Internal::Data<51, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  return d;
}
inline Operator<Internal::Data<52, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52){
  Operator<Internal::Data<52, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<52, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52){
  Operator<Internal::Data<52, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  return d;
}
inline Operator<Internal::Data<53, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53){
  Operator<Internal::Data<53, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<53, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53){
  Operator<Internal::Data<53, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  return d;
}
inline Operator<Internal::Data<54, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54){
  Operator<Internal::Data<54, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<54, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54){
  Operator<Internal::Data<54, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  return d;
}
inline Operator<Internal::Data<55, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55){
  Operator<Internal::Data<55, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<55, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55){
  Operator<Internal::Data<55, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  return d;
}
inline Operator<Internal::Data<56, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56){
  Operator<Internal::Data<56, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<56, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56){
  Operator<Internal::Data<56, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  return d;
}
inline Operator<Internal::Data<57, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57){
  Operator<Internal::Data<57, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<57, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57){
  Operator<Internal::Data<57, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  return d;
}
inline Operator<Internal::Data<58, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58){
  Operator<Internal::Data<58, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<58, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58){
  Operator<Internal::Data<58, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  return d;
}
inline Operator<Internal::Data<59, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59){
  Operator<Internal::Data<59, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<59, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59){
  Operator<Internal::Data<59, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  return d;
}
inline Operator<Internal::Data<60, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60){
  Operator<Internal::Data<60, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<60, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60){
  Operator<Internal::Data<60, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  return d;
}
inline Operator<Internal::Data<61, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61){
  Operator<Internal::Data<61, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<61, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61){
  Operator<Internal::Data<61, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  return d;
}
inline Operator<Internal::Data<62, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62){
  Operator<Internal::Data<62, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<62, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62){
  Operator<Internal::Data<62, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  return d;
}
inline Operator<Internal::Data<63, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63){
  Operator<Internal::Data<63, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<63, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63){
  Operator<Internal::Data<63, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  return d;
}
inline Operator<Internal::Data<64, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64){
  Operator<Internal::Data<64, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<64, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64){
  Operator<Internal::Data<64, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  return d;
}
inline Operator<Internal::Data<65, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65){
  Operator<Internal::Data<65, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<65, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65){
  Operator<Internal::Data<65, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  return d;
}
inline Operator<Internal::Data<66, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66){
  Operator<Internal::Data<66, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<66, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66){
  Operator<Internal::Data<66, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  return d;
}
inline Operator<Internal::Data<67, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67){
  Operator<Internal::Data<67, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<67, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67){
  Operator<Internal::Data<67, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  return d;
}
inline Operator<Internal::Data<68, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68){
  Operator<Internal::Data<68, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<68, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68){
  Operator<Internal::Data<68, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  return d;
}
inline Operator<Internal::Data<69, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69){
  Operator<Internal::Data<69, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<69, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69){
  Operator<Internal::Data<69, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  return d;
}
inline Operator<Internal::Data<70, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70){
  Operator<Internal::Data<70, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<70, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70){
  Operator<Internal::Data<70, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  return d;
}
inline Operator<Internal::Data<71, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71){
  Operator<Internal::Data<71, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<71, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71){
  Operator<Internal::Data<71, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  return d;
}
inline Operator<Internal::Data<72, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72){
  Operator<Internal::Data<72, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<72, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72){
  Operator<Internal::Data<72, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  return d;
}
inline Operator<Internal::Data<73, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73){
  Operator<Internal::Data<73, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<73, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73){
  Operator<Internal::Data<73, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  return d;
}
inline Operator<Internal::Data<74, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74){
  Operator<Internal::Data<74, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<74, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74){
  Operator<Internal::Data<74, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  return d;
}
inline Operator<Internal::Data<75, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75){
  Operator<Internal::Data<75, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<75, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75){
  Operator<Internal::Data<75, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  return d;
}
inline Operator<Internal::Data<76, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76){
  Operator<Internal::Data<76, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<76, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76){
  Operator<Internal::Data<76, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  return d;
}
inline Operator<Internal::Data<77, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77){
  Operator<Internal::Data<77, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<77, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77){
  Operator<Internal::Data<77, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  return d;
}
inline Operator<Internal::Data<78, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78){
  Operator<Internal::Data<78, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<78, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78){
  Operator<Internal::Data<78, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  return d;
}
inline Operator<Internal::Data<79, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79){
  Operator<Internal::Data<79, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<79, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79){
  Operator<Internal::Data<79, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  return d;
}
inline Operator<Internal::Data<80, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80){
  Operator<Internal::Data<80, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<80, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80){
  Operator<Internal::Data<80, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  return d;
}
inline Operator<Internal::Data<81, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81){
  Operator<Internal::Data<81, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<81, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81){
  Operator<Internal::Data<81, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  return d;
}
inline Operator<Internal::Data<82, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82){
  Operator<Internal::Data<82, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<82, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82){
  Operator<Internal::Data<82, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  return d;
}
inline Operator<Internal::Data<83, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83){
  Operator<Internal::Data<83, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<83, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83){
  Operator<Internal::Data<83, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  return d;
}
inline Operator<Internal::Data<84, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84){
  Operator<Internal::Data<84, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<84, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84){
  Operator<Internal::Data<84, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  return d;
}
inline Operator<Internal::Data<85, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85){
  Operator<Internal::Data<85, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<85, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85){
  Operator<Internal::Data<85, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  return d;
}
inline Operator<Internal::Data<86, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86){
  Operator<Internal::Data<86, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<86, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86){
  Operator<Internal::Data<86, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  return d;
}
inline Operator<Internal::Data<87, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86, double x87){
  Operator<Internal::Data<87, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<87, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86, const Precision& x87){
  Operator<Internal::Data<87, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  return d;
}
inline Operator<Internal::Data<88, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86, double x87, double x88){
  Operator<Internal::Data<88, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<88, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86, const Precision& x87, const Precision& x88){
  Operator<Internal::Data<88, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  return d;
}
inline Operator<Internal::Data<89, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86, double x87, double x88, double x89){
  Operator<Internal::Data<89, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<89, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86, const Precision& x87, const Precision& x88, const Precision& x89){
  Operator<Internal::Data<89, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  return d;
}
inline Operator<Internal::Data<90, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86, double x87, double x88, double x89, double x90){
  Operator<Internal::Data<90, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<90, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86, const Precision& x87, const Precision& x88, const Precision& x89, const Precision& x90){
  Operator<Internal::Data<90, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  return d;
}
inline Operator<Internal::Data<91, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86, double x87, double x88, double x89, double x90, double x91){
  Operator<Internal::Data<91, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<91, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86, const Precision& x87, const Precision& x88, const Precision& x89, const Precision& x90, const Precision& x91){
  Operator<Internal::Data<91, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  return d;
}
inline Operator<Internal::Data<92, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86, double x87, double x88, double x89, double x90, double x91, double x92){
  Operator<Internal::Data<92, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<92, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86, const Precision& x87, const Precision& x88, const Precision& x89, const Precision& x90, const Precision& x91, const Precision& x92){
  Operator<Internal::Data<92, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  return d;
}
inline Operator<Internal::Data<93, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86, double x87, double x88, double x89, double x90, double x91, double x92, double x93){
  Operator<Internal::Data<93, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<93, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86, const Precision& x87, const Precision& x88, const Precision& x89, const Precision& x90, const Precision& x91, const Precision& x92, const Precision& x93){
  Operator<Internal::Data<93, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  return d;
}
inline Operator<Internal::Data<94, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86, double x87, double x88, double x89, double x90, double x91, double x92, double x93, double x94){
  Operator<Internal::Data<94, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  d.vals[93] = x94;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<94, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86, const Precision& x87, const Precision& x88, const Precision& x89, const Precision& x90, const Precision& x91, const Precision& x92, const Precision& x93, const Precision& x94){
  Operator<Internal::Data<94, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  d.vals[93] = x94;
  return d;
}
inline Operator<Internal::Data<95, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86, double x87, double x88, double x89, double x90, double x91, double x92, double x93, double x94, double x95){
  Operator<Internal::Data<95, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  d.vals[93] = x94;
  d.vals[94] = x95;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<95, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86, const Precision& x87, const Precision& x88, const Precision& x89, const Precision& x90, const Precision& x91, const Precision& x92, const Precision& x93, const Precision& x94, const Precision& x95){
  Operator<Internal::Data<95, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  d.vals[93] = x94;
  d.vals[94] = x95;
  return d;
}
inline Operator<Internal::Data<96, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86, double x87, double x88, double x89, double x90, double x91, double x92, double x93, double x94, double x95, double x96){
  Operator<Internal::Data<96, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  d.vals[93] = x94;
  d.vals[94] = x95;
  d.vals[95] = x96;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<96, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86, const Precision& x87, const Precision& x88, const Precision& x89, const Precision& x90, const Precision& x91, const Precision& x92, const Precision& x93, const Precision& x94, const Precision& x95, const Precision& x96){
  Operator<Internal::Data<96, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  d.vals[93] = x94;
  d.vals[94] = x95;
  d.vals[95] = x96;
  return d;
}
inline Operator<Internal::Data<97, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86, double x87, double x88, double x89, double x90, double x91, double x92, double x93, double x94, double x95, double x96, double x97){
  Operator<Internal::Data<97, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  d.vals[93] = x94;
  d.vals[94] = x95;
  d.vals[95] = x96;
  d.vals[96] = x97;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<97, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86, const Precision& x87, const Precision& x88, const Precision& x89, const Precision& x90, const Precision& x91, const Precision& x92, const Precision& x93, const Precision& x94, const Precision& x95, const Precision& x96, const Precision& x97){
  Operator<Internal::Data<97, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  d.vals[93] = x94;
  d.vals[94] = x95;
  d.vals[95] = x96;
  d.vals[96] = x97;
  return d;
}
inline Operator<Internal::Data<98, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86, double x87, double x88, double x89, double x90, double x91, double x92, double x93, double x94, double x95, double x96, double x97, double x98){
  Operator<Internal::Data<98, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  d.vals[93] = x94;
  d.vals[94] = x95;
  d.vals[95] = x96;
  d.vals[96] = x97;
  d.vals[97] = x98;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<98, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86, const Precision& x87, const Precision& x88, const Precision& x89, const Precision& x90, const Precision& x91, const Precision& x92, const Precision& x93, const Precision& x94, const Precision& x95, const Precision& x96, const Precision& x97, const Precision& x98){
  Operator<Internal::Data<98, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  d.vals[93] = x94;
  d.vals[94] = x95;
  d.vals[95] = x96;
  d.vals[96] = x97;
  d.vals[97] = x98;
  return d;
}
inline Operator<Internal::Data<99, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86, double x87, double x88, double x89, double x90, double x91, double x92, double x93, double x94, double x95, double x96, double x97, double x98, double x99){
  Operator<Internal::Data<99, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  d.vals[93] = x94;
  d.vals[94] = x95;
  d.vals[95] = x96;
  d.vals[96] = x97;
  d.vals[97] = x98;
  d.vals[98] = x99;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<99, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86, const Precision& x87, const Precision& x88, const Precision& x89, const Precision& x90, const Precision& x91, const Precision& x92, const Precision& x93, const Precision& x94, const Precision& x95, const Precision& x96, const Precision& x97, const Precision& x98, const Precision& x99){
  Operator<Internal::Data<99, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  d.vals[93] = x94;
  d.vals[94] = x95;
  d.vals[95] = x96;
  d.vals[96] = x97;
  d.vals[97] = x98;
  d.vals[98] = x99;
  return d;
}
inline Operator<Internal::Data<100, double> > Data(double x1, double x2, double x3, double x4, double x5, double x6, double x7, double x8, double x9, double x10, double x11, double x12, double x13, double x14, double x15, double x16, double x17, double x18, double x19, double x20, double x21, double x22, double x23, double x24, double x25, double x26, double x27, double x28, double x29, double x30, double x31, double x32, double x33, double x34, double x35, double x36, double x37, double x38, double x39, double x40, double x41, double x42, double x43, double x44, double x45, double x46, double x47, double x48, double x49, double x50, double x51, double x52, double x53, double x54, double x55, double x56, double x57, double x58, double x59, double x60, double x61, double x62, double x63, double x64, double x65, double x66, double x67, double x68, double x69, double x70, double x71, double x72, double x73, double x74, double x75, double x76, double x77, double x78, double x79, double x80, double x81, double x82, double x83, double x84, double x85, double x86, double x87, double x88, double x89, double x90, double x91, double x92, double x93, double x94, double x95, double x96, double x97, double x98, double x99, double x100){
  Operator<Internal::Data<100, double> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  d.vals[93] = x94;
  d.vals[94] = x95;
  d.vals[95] = x96;
  d.vals[96] = x97;
  d.vals[97] = x98;
  d.vals[98] = x99;
  d.vals[99] = x100;
  return d;
}
template<typename Precision> inline Operator<Internal::Data<100, Precision> > Data(const Precision& x1, const Precision& x2, const Precision& x3, const Precision& x4, const Precision& x5, const Precision& x6, const Precision& x7, const Precision& x8, const Precision& x9, const Precision& x10, const Precision& x11, const Precision& x12, const Precision& x13, const Precision& x14, const Precision& x15, const Precision& x16, const Precision& x17, const Precision& x18, const Precision& x19, const Precision& x20, const Precision& x21, const Precision& x22, const Precision& x23, const Precision& x24, const Precision& x25, const Precision& x26, const Precision& x27, const Precision& x28, const Precision& x29, const Precision& x30, const Precision& x31, const Precision& x32, const Precision& x33, const Precision& x34, const Precision& x35, const Precision& x36, const Precision& x37, const Precision& x38, const Precision& x39, const Precision& x40, const Precision& x41, const Precision& x42, const Precision& x43, const Precision& x44, const Precision& x45, const Precision& x46, const Precision& x47, const Precision& x48, const Precision& x49, const Precision& x50, const Precision& x51, const Precision& x52, const Precision& x53, const Precision& x54, const Precision& x55, const Precision& x56, const Precision& x57, const Precision& x58, const Precision& x59, const Precision& x60, const Precision& x61, const Precision& x62, const Precision& x63, const Precision& x64, const Precision& x65, const Precision& x66, const Precision& x67, const Precision& x68, const Precision& x69, const Precision& x70, const Precision& x71, const Precision& x72, const Precision& x73, const Precision& x74, const Precision& x75, const Precision& x76, const Precision& x77, const Precision& x78, const Precision& x79, const Precision& x80, const Precision& x81, const Precision& x82, const Precision& x83, const Precision& x84, const Precision& x85, const Precision& x86, const Precision& x87, const Precision& x88, const Precision& x89, const Precision& x90, const Precision& x91, const Precision& x92, const Precision& x93, const Precision& x94, const Precision& x95, const Precision& x96, const Precision& x97, const Precision& x98, const Precision& x99, const Precision& x100){
  Operator<Internal::Data<100, Precision> > d;
  d.vals[0] = x1;
  d.vals[1] = x2;
  d.vals[2] = x3;
  d.vals[3] = x4;
  d.vals[4] = x5;
  d.vals[5] = x6;
  d.vals[6] = x7;
  d.vals[7] = x8;
  d.vals[8] = x9;
  d.vals[9] = x10;
  d.vals[10] = x11;
  d.vals[11] = x12;
  d.vals[12] = x13;
  d.vals[13] = x14;
  d.vals[14] = x15;
  d.vals[15] = x16;
  d.vals[16] = x17;
  d.vals[17] = x18;
  d.vals[18] = x19;
  d.vals[19] = x20;
  d.vals[20] = x21;
  d.vals[21] = x22;
  d.vals[22] = x23;
  d.vals[23] = x24;
  d.vals[24] = x25;
  d.vals[25] = x26;
  d.vals[26] = x27;
  d.vals[27] = x28;
  d.vals[28] = x29;
  d.vals[29] = x30;
  d.vals[30] = x31;
  d.vals[31] = x32;
  d.vals[32] = x33;
  d.vals[33] = x34;
  d.vals[34] = x35;
  d.vals[35] = x36;
  d.vals[36] = x37;
  d.vals[37] = x38;
  d.vals[38] = x39;
  d.vals[39] = x40;
  d.vals[40] = x41;
  d.vals[41] = x42;
  d.vals[42] = x43;
  d.vals[43] = x44;
  d.vals[44] = x45;
  d.vals[45] = x46;
  d.vals[46] = x47;
  d.vals[47] = x48;
  d.vals[48] = x49;
  d.vals[49] = x50;
  d.vals[50] = x51;
  d.vals[51] = x52;
  d.vals[52] = x53;
  d.vals[53] = x54;
  d.vals[54] = x55;
  d.vals[55] = x56;
  d.vals[56] = x57;
  d.vals[57] = x58;
  d.vals[58] = x59;
  d.vals[59] = x60;
  d.vals[60] = x61;
  d.vals[61] = x62;
  d.vals[62] = x63;
  d.vals[63] = x64;
  d.vals[64] = x65;
  d.vals[65] = x66;
  d.vals[66] = x67;
  d.vals[67] = x68;
  d.vals[68] = x69;
  d.vals[69] = x70;
  d.vals[70] = x71;
  d.vals[71] = x72;
  d.vals[72] = x73;
  d.vals[73] = x74;
  d.vals[74] = x75;
  d.vals[75] = x76;
  d.vals[76] = x77;
  d.vals[77] = x78;
  d.vals[78] = x79;
  d.vals[79] = x80;
  d.vals[80] = x81;
  d.vals[81] = x82;
  d.vals[82] = x83;
  d.vals[83] = x84;
  d.vals[84] = x85;
  d.vals[85] = x86;
  d.vals[86] = x87;
  d.vals[87] = x88;
  d.vals[88] = x89;
  d.vals[89] = x90;
  d.vals[90] = x91;
  d.vals[91] = x92;
  d.vals[92] = x93;
  d.vals[93] = x94;
  d.vals[94] = x95;
  d.vals[95] = x96;
  d.vals[96] = x97;
  d.vals[97] = x98;
  d.vals[98] = x99;
  d.vals[99] = x100;
  return d;
}
}
# 361 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2

# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/helpers.h" 1
# 33 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/helpers.h"
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 1
# 34 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/helpers.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/gaussian_elimination.h" 1
# 34 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/gaussian_elimination.h"
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 35 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/gaussian_elimination.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 1
# 36 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/gaussian_elimination.h" 2

namespace TooN {




    template<int N, typename Precision>
 inline Vector<N, Precision> gaussian_elimination (Matrix<N,N,Precision> A, Vector<N, Precision> b) {
  using std::swap;
  using std::abs;

  int size=b.size();

  for (int i=0; i<size; ++i) {
   int argmax = i;
   Precision maxval = abs(A[i][i]);

   for (int ii=i+1; ii<size; ++ii) {
    double v = abs(A[ii][i]);
    if (v > maxval) {
     maxval = v;
     argmax = ii;
    }
   }
   Precision pivot = A[argmax][i];

   Precision inv_pivot = static_cast<Precision>(1)/pivot;
   if (argmax != i) {
    for (int j=i; j<size; ++j)
     swap(A[i][j], A[argmax][j]);
    swap(b[i], b[argmax]);
   }

   for (int j=i+1; j<size; ++j)
    A[i][j] *= inv_pivot;
   b[i] *= inv_pivot;

   for (int u=i+1; u<size; ++u) {
    double factor = A[u][i];

    for (int j=i+1; j<size; ++j)
     A[u][j] -= factor * A[i][j];
    b[u] -= factor * b[i];
   }
  }

  Vector<N,Precision> x(size);
  for (int i=size-1; i>=0; --i) {
   x[i] = b[i];
   for (int j=i+1; j<size; ++j)
    x[i] -= A[i][j] * x[j];
  }
  return x;
    }

 namespace Internal
 {
  template<int i, int j, int k> struct Size3
  {
   static const int s = !IsStatic<i>::is?i: (!IsStatic<j>::is?j:k);
  };

 };





    template<int R1, int C1, int R2, int C2, typename Precision>
 inline Matrix<Internal::Size3<R1, C1, R2>::s, C2, Precision> gaussian_elimination (Matrix<R1,C1,Precision> A, Matrix<R2, C2, Precision> b) {
  using std::swap;
  using std::abs;
  SizeMismatch<R1, C1>::test(A.num_rows(), A.num_cols());
  SizeMismatch<R1, R2>::test(A.num_rows(), b.num_rows());

  int size=A.num_rows();

  for (int i=0; i<size; ++i) {
   int argmax = i;
   Precision maxval = abs(A[i][i]);

   for (int ii=i+1; ii<size; ++ii) {
    Precision v = abs(A[ii][i]);
    if (v > maxval) {
     maxval = v;
     argmax = ii;
    }
   }
   Precision pivot = A[argmax][i];

   Precision inv_pivot = static_cast<Precision>(1)/pivot;
   if (argmax != i) {
    for (int j=i; j<size; ++j)
     swap(A[i][j], A[argmax][j]);

    for(int j=0; j < b.num_cols(); j++)
     swap(b[i][j], b[argmax][j]);
   }

   for (int j=i+1; j<size; ++j)
    A[i][j] *= inv_pivot;
   b[i] *= inv_pivot;

   for (int u=i+1; u<size; ++u) {
    Precision factor = A[u][i];

    for (int j=i+1; j<size; ++j)
     A[u][j] -= factor * A[i][j];
    b[u] -= factor * b[i];
   }
  }

  Matrix<Internal::Size3<R1, C1, R2>::s,C2,Precision> x(b.num_rows(), b.num_cols());
  for (int i=size-1; i>=0; --i) {
   for(int k=0; k <b.num_cols(); k++)
   {
    x[i][k] = b[i][k];
    for (int j=i+1; j<size; ++j)
     x[i][k] -= A[i][j] * x[j][k];
   }
  }
  return x;
    }
}
# 35 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/helpers.h" 2
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 36 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/helpers.h" 2
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 1 3
# 47 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
# 47 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
# 37 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/helpers.h" 2
# 56 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/helpers.h"
namespace TooN {







 inline Matrix<2> inv(const Matrix<2>& m)
 {
  double d = 1./(m[0][0]*m[1][1] - m[1][0]*m[0][1]);

  return Data(
       m[1][1]*d, -m[0][1]*d,
      -m[1][0]*d, m[0][0]*d
  );
 }





 template<int Size, class Precision, class Base> __attribute__((deprecated)) void Fill(Vector<Size, Precision, Base>& v, const Precision& p)
 {
  for(int i=0; i < v.size(); i++)
   v[i]= p;
 }



 template<int Rows, int Cols, class Precision, class Base> __attribute__((deprecated)) void Fill(Matrix<Rows, Cols, Precision, Base>& m, const Precision& p)
 {
  for(int i=0; i < m.num_rows(); i++)
   for(int j=0; j < m.num_cols(); j++)
    m[i][j] = p;
 }




 template<int Size, class Precision, class Base> inline Precision norm(const Vector<Size, Precision, Base>& v)
 {
  using std::sqrt;
  return sqrt(v*v);
 }




 template<int Size, class Precision, class Base> inline Precision norm_sq(const Vector<Size, Precision, Base>& v)
 {
  return v*v;
 }




 template<int Size, class Precision, class Base> inline Precision norm_1(const Vector<Size, Precision, Base>& v)
 {
  using std::abs;
  Precision n = 0;
  for(int i=0; i < v.size(); i++)
   n += abs(v[i]);
  return n;
 }




 template<int Size, class Precision, class Base> inline Precision norm_inf(const Vector<Size, Precision, Base>& v)
 {
  using std::abs;
  using std::max;
  Precision n = 0;
  n = abs(v[0]);

  for(int i=1; i < v.size(); i++)
   n = max(n, abs(v[i]));
  return n;
 }





 template<int Size, class Precision, class Base> inline Precision norm_2(const Vector<Size, Precision, Base>& v)
 {
  return norm(v);
 }







 template<int Size, class Precision, class Base> inline Vector<Size, Precision> unit(const Vector<Size, Precision, Base> & v)
 {
  using std::sqrt;
  return TooN::operator*(v,(1/sqrt(v*v)));
 }







 template<int Size, class Precision, class Base> inline void normalize(Vector<Size, Precision, Base> v)
 {
  using std::sqrt;
  v /= sqrt(v*v);
 }





 template<int Size, class Precision> inline void normalize(Vector<Size, Precision> & v)
 {
  normalize(v.as_slice());
 }






 template<int Size, typename Precision, typename Base> inline Vector<(Size==Dynamic?Dynamic:Size-1)+0, Precision> project( const Vector<Size, Precision, Base> & v){
  static const int Len = (Size==Dynamic?Dynamic:Size-1);
_ssdm_SpecConstant(&Len);
# 185 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/helpers.h"

  return TooN::operator/(v.template slice<0, Len>(0 , v.size() - 1) , v[v.size() - 1]);
 }







 template<int Size, typename Precision, typename Base> inline Vector<(Size==Dynamic?Dynamic:Size+1)+0, Precision> unproject( const Vector<Size, Precision, Base> & v){
  Vector<(Size==Dynamic?Dynamic:Size+1), Precision> result(v.size()+1);
  static const int Len = (Size==Dynamic?Dynamic:Size);
_ssdm_SpecConstant(&Len);
# 197 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/helpers.h"

  result.template slice<0, Len>(0, v.size()) = v;
  result[v.size()] = 1;
  return result;
 }




 template<int R, int C, typename Precision, typename Base> inline Matrix<R-1, C, Precision> project( const Matrix<R,C, Precision, Base> & m){
        Matrix<R-1, C, Precision> result = m.slice(0,0,R-1,m.num_cols());
        for( int c = 0; c < m.num_cols(); ++c ) {
            result.slice(0,c,R-1,1) /= m[R-1][c];
        }
        return result;
    }

    template<int C, typename Precision, typename Base> inline Matrix<-1, C, Precision> project( const Matrix<-1,C, Precision, Base> & m){
        Matrix<-1, C, Precision> result = m.slice(0,0,m.num_rows()-1,m.num_cols());
        for( int c = 0; c < m.num_cols(); ++c ) {
            result.slice(0,c,m.num_rows()-1,1) /= m[m.num_rows()-1][c];
        }
        return result;
    }




    template<int R, int C, typename Precision, typename Base> inline Matrix<R+1, C, Precision> unproject( const Matrix<R, C, Precision, Base> & m){
        Matrix<R+1, C, Precision> result;
        result.template slice<0,0,R,C>() = m;
        result[R] = Ones;
        return result;
    }

    template<int C, typename Precision, typename Base> inline Matrix<-1, C, Precision> unproject( const Matrix<-1, C, Precision, Base> & m){
        Matrix<-1, C, Precision> result( m.num_rows()+1, m.num_cols() );
        result.slice(0,0,m.num_rows(),m.num_cols()) = m;
        result[m.num_rows()] = Ones;
        return result;
    }




 template <int R, int C, typename P, typename B>
 P inline norm_fro( const Matrix<R,C,P,B> & m ){
  using std::sqrt;
  P n = 0;
  for(int r = 0; r < m.num_rows(); ++r)
   for(int c = 0; c < m.num_cols(); ++c)
    n += m[r][c] * m[r][c];

  return sqrt(n);
 }




 template <int R, int C, typename P, typename B>
 P inline norm_inf( const Matrix<R,C,P,B> & m ){
  using std::abs;
  using std::max;
  P n = 0;
  for(int r = 0; r < m.num_rows(); ++r){
   P s = 0;
   for(int c = 0; c < m.num_cols(); ++c)
    s += abs(m(r,c));
   n = max(n,s);
  }
  return n;
 }




 template <int R, int C, typename P, typename B>
 P inline norm_1( const Matrix<R,C,P,B> & m ){
  using std::abs;
  using std::max;
  P n = 0;
  for(int c = 0; c < m.num_cols(); ++c){
   P s = 0;
   for(int r = 0; r < m.num_rows(); ++r)
    s += abs(m(r,c));
   n = max(n,s);
  }
  return n;
 }

 namespace Internal {



  template <int R, int C, typename P, typename B>
  inline Matrix<R, C, P> exp_taylor( const Matrix<R,C,P,B> & m ){
   TooN::SizeMismatch<R, C>::test(m.num_rows(), m.num_cols());
   Matrix<R,C,P> result = TooN::Zeros(m.num_rows(), m.num_cols());
   Matrix<R,C,P> f = TooN::Identity(m.num_rows());
   P k = 1;
   while(norm_inf((result+f)-result) > 0){
    result += f;
    f = (m * f) / k;
    k += 1;
   }
   return result;
  }




  template <int R, int C, typename P, typename B>
  inline Matrix<R, C, P> log_taylor( const Matrix<R,C,P,B> & m ){
   TooN::SizeMismatch<R, C>::test(m.num_rows(), m.num_cols());
   Matrix<R,C,P> X = m - TooN::Identity * 1.0;
   Matrix<R,C,P> F = X;
   Matrix<R,C,P> sum = TooN::Zeros(m.num_rows(), m.num_cols());
   P k = 1;
   while(norm_inf((sum+F/k)-sum) > 0){
    sum += F/k;
    F = -F*X;
    k += 1;
   }
   return sum;
  }

 };







 template <int R, int C, typename P, typename B>
 inline Matrix<R, C, P> exp( const Matrix<R,C,P,B> & m ){
  using std::max;
  SizeMismatch<R, C>::test(m.num_rows(), m.num_cols());
  const P l = log2(norm_inf(m));
  const int s = max(0,(int)ceil(l));
  Matrix<R,C,P> result = Internal::exp_taylor(m/(1<<s));
  for(int i = 0; i < s; ++i)
   result = result * result;
  return result;
 }
# 351 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/helpers.h"
 template <int R, int C, typename P, typename B>
 inline Matrix<R, C, P> sqrt( const Matrix<R,C,P,B> & m){
  SizeMismatch<R, C>::test(m.num_rows(), m.num_cols());
  Matrix<R,C,P> M = m;
  Matrix<R,C,P> Y = m;
  Matrix<R,C,P> M_inv(m.num_rows(), m.num_cols());
  const Matrix<R,C,P> id = Identity(m.num_rows());
  do {
   M_inv = gaussian_elimination(M, id);
   Y = Y * (id + M_inv) * 0.5;
   M = 0.5 * (id + (M + M_inv) * 0.5);
  } while(norm_inf(M - M_inv) > 0);
  return Y;
 }
# 374 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/helpers.h"
 template <int R, int C, typename P, typename B>
 inline Matrix<R, C, P> log( const Matrix<R,C,P,B> & m){
  int counter = 0;
  Matrix<R,C,P> A = m;
  while(norm_inf(A - Identity*1.0) > 0.5){
   ++counter;
   A = sqrt(A);
  }
  return Internal::log_taylor(A) * pow(2.0, counter);
 }



 template<int S, class P, class B> bool isfinite(const Vector<S, P, B>& v)
 {
  using std::isfinite;
  for(int i=0; i < v.size(); i++)
   if(!isfinite(v[i]))
    return 0;
  return 1;
 }



 template<int S, class P, class B> bool isnan(const Vector<S, P, B>& v)
 {
  using std::isnan;
  for(int i=0; i < v.size(); i++)
   if(isnan(v[i]))
    return 1;
  return 0;
 }





 template<int Rows, int Cols, typename Precision, typename Base>
 void Symmetrize(Matrix<Rows,Cols,Precision,Base>& m){
  SizeMismatch<Rows,Cols>::test(m.num_rows(), m.num_cols());
  for(int r=0; r<m.num_rows()-1; r++){
   for(int c=r+1; c<m.num_cols(); c++){
    const Precision temp=(m(r,c)+m(c,r))/2;
    m(r,c)=temp;
    m(c,r)=temp;
   }
  }
 }



 template<int Rows, int Cols, typename Precision, typename Base>
 Precision trace(const Matrix<Rows, Cols, Precision, Base> & m ){
  SizeMismatch<Rows,Cols>::test(m.num_rows(), m.num_cols());
  Precision tr = 0;
  for(int i = 0; i < m.num_rows(); ++i)
   tr += m(i,i);
  return tr;
 }





 template<int Size, class P, class B> inline TooN::Matrix<3, 3, P> cross_product_matrix(const Vector<Size, P, B>& vec)
 {
  SizeMismatch<Size,3>::test(vec.size(), 3);

  TooN::Matrix<3, 3, P> result;

  result(0,0) = 0;
  result(0,1) = -vec[2];
  result(0,2) = vec[1];
  result(1,0) = vec[2];
  result(1,1) = 0;
  result(1,2) = -vec[0];
  result(2,0) = -vec[1];
  result(2,1) = vec[0];
  result(2,2) = 0;

  return result;
 }

    namespace Internal {
        template<int Size, typename Precision, typename Base, typename Func, typename Ret> inline Ret accumulate( const Vector<Size, Precision, Base> & v ) {
            Func func;
            if( v.size() == 0 ) {
                return func.null();
            }
            func.initialise( v[0], 0 );
            for( int ii = 1; ii < v.size(); ii++ ) {
                func( v[ii], ii );
            }
            return func.ret();
        }

        template<int R, int C, typename Precision, typename Base, typename Func, typename Ret> inline Ret accumulate( const Matrix<R, C, Precision, Base> & m ) {
            Func func;
            if( m.num_rows() == 0 || m.num_cols() == 0) {
                return func.null();
            }
            func.initialise( m[0][0], 0, 0 );
            for(int r=0; r<m.num_rows(); r++){
                for(int c=0; c<m.num_cols(); c++){
                    func( m[r][c], r, c );
                }
            }
            return func.ret();
        }
        template<int R, int C, typename Precision, typename Base, typename Func, typename Ret> inline Ret accumulate_horizontal( const Matrix<R, C, Precision, Base> & m ) {
            Func func( m.num_rows() );
            if( m.num_cols() == 0 || m.num_rows() == 0 ) {
                func.null();
            }
            for(int r=0; r<m.num_rows(); r++){
                func.initialise( m[r][0], r, 0 );
                for(int c=1; c<m.num_cols(); c++){
                    func( m[r][c], r, c );
                }
            }
            return func.ret();
        }
        template<int R, int C, typename Precision, typename Base, typename Func, typename Ret> inline Ret accumulate_vertical( const Matrix<R, C, Precision, Base> & m ) {
            Func func( m.num_cols() );
            if( m.num_cols() == 0 || m.num_rows() == 0 ) {
                func.null();
            }
            for(int c=0; c<m.num_cols(); c++){
                func.initialise( m[0][c], 0, c );
                for(int r=1; r<m.num_rows(); r++){
                    func( m[r][c], r, c );
                }
            }
            return func.ret();
        }

        template<typename Precision, typename ComparisonFunctor>
        class accumulate_functor_vector {
            Precision bestVal;
        public:
            Precision null() {
                return 0;
            }
            void initialise( Precision initialVal, int ) {
                bestVal = initialVal;
            }
            void operator()( Precision curVal, int ) {
                if( ComparisonFunctor()( curVal, bestVal ) ) {
                    bestVal = curVal;
                }
            }
            Precision ret() { return bestVal; }
        };
        template<typename Precision, typename ComparisonFunctor>
        class accumulate_element_functor_vector {
            Precision bestVal;
            int nBestIndex;
        public:
            std::pair<Precision,int> null() {
                return std::pair<Precision,int>( 0, 0 );
            }
            void initialise( Precision initialVal, int nIndex ) {
                bestVal = initialVal;
                nBestIndex = nIndex;
            }
            void operator()( Precision curVal, int nIndex ) {
                if( ComparisonFunctor()( curVal, bestVal ) ) {
                    bestVal = curVal;
                    nBestIndex = nIndex;
                }
            }
            std::pair<Precision,int> ret() {
                return std::pair<Precision,int>( bestVal, nBestIndex );
            }
        };
        template<typename Precision, typename ComparisonFunctor>
        class accumulate_functor_matrix {
            Precision bestVal;
        public:
            Precision null() {
                return 0;
            }
            void initialise( Precision initialVal, int, int ) {
                bestVal = initialVal;
            }
            void operator()( Precision curVal, int, int ) {
                if( ComparisonFunctor()( curVal, bestVal ) ) {
                    bestVal = curVal;
                }
            }
            Precision ret() { return bestVal; }
        };
        template<typename Precision, typename ComparisonFunctor>
        class accumulate_element_functor_matrix {
            Precision bestVal;
            int nBestRow;
            int nBestCol;
        public:
            std::pair<Precision,std::pair<int,int> > null() {
                return std::pair<Precision,std::pair<int,int> >( 0, std::pair<int,int>( 0, 0 ) );
            }
            void initialise( Precision initialVal, int nRow, int nCol ) {
                bestVal = initialVal;
                nBestRow = nRow;
                nBestCol = nCol;
            }
            void operator()( Precision curVal, int nRow, int nCol ) {
                if( ComparisonFunctor()( curVal, bestVal ) ) {
                    bestVal = curVal;
                    nBestRow = nRow;
                    nBestCol = nCol;
                }
            }
            std::pair<Precision,std::pair<int,int> > ret() {
                return std::pair<Precision,std::pair<int,int> >( bestVal,
                                                                 std::pair<int,int>( nBestRow, nBestCol ) );
            }
        };
        template<typename Precision, typename ComparisonFunctor>
        class accumulate_vertical_functor {
            Vector<Dynamic,Precision>* bestVal;
        public:
            accumulate_vertical_functor() {
                bestVal = __null;
            }
            accumulate_vertical_functor( int nNumCols ) {
                bestVal = new Vector<Dynamic,Precision>( nNumCols );
            }
            Vector<Dynamic,Precision> null() {
                return Vector<Dynamic,Precision>( 0 );
            }
            void initialise( Precision initialVal, int, int nCol ) {
                (*bestVal)[nCol] = initialVal;
            }
            void operator()( Precision curVal, int, int nCol ) {
                if( ComparisonFunctor()( curVal, (*bestVal)[nCol] ) ) {
                    (*bestVal)[nCol] = curVal;
                }
            }
            Vector<Dynamic,Precision> ret() {
                if( bestVal == __null ) {
                    return null();
                }
                Vector<Dynamic,Precision> vRet = *bestVal;
                delete bestVal;
                return vRet;
            }
        };
        template<typename Precision, typename ComparisonFunctor>
        class accumulate_element_vertical_functor {
            Vector<Dynamic,Precision>* bestVal;
            Vector<Dynamic,Precision>* bestIndices;
        public:
            accumulate_element_vertical_functor() {
                bestVal = __null;
                bestIndices = __null;
            }
            accumulate_element_vertical_functor( int nNumCols ) {
                bestVal = new Vector<Dynamic,Precision>( nNumCols );
                bestIndices = new Vector<Dynamic,Precision>( nNumCols );
            }
            std::pair<Vector<Dynamic,Precision>,Vector<Dynamic,Precision> > null() {
                Vector<Dynamic,Precision> vEmpty( 0 );
                return std::pair<Vector<Dynamic,Precision>,Vector<Dynamic,Precision> >( vEmpty, vEmpty );
            }
            void initialise( Precision initialVal, int nRow, int nCol ) {
                (*bestVal)[nCol] = initialVal;
                (*bestIndices)[nCol] = nRow;
            }
            void operator()( Precision curVal, int nRow, int nCol ) {
                if( ComparisonFunctor()( curVal, (*bestVal)[nCol] ) ) {
                    (*bestVal)[nCol] = curVal;
                    (*bestIndices)[nCol] = nRow;
                }
            }
            std::pair<Vector<Dynamic,Precision>,Vector<Dynamic,Precision> > ret() {
                if( bestVal == __null ) {
                    return null();
                }
                std::pair<Vector<Dynamic,Precision>,Vector<Dynamic,Precision> > vRet =
                    std::pair<Vector<Dynamic,Precision>,Vector<Dynamic,Precision> > (*bestVal, *bestIndices );
                delete bestVal; bestVal = __null;
                delete bestIndices; bestIndices = __null;
                return vRet;
            }
        };
        template<typename Precision, typename ComparisonFunctor>
        class accumulate_horizontal_functor {
            Vector<Dynamic,Precision>* bestVal;
        public:
            accumulate_horizontal_functor() {
                bestVal = __null;
            }
            accumulate_horizontal_functor( int nNumRows ) {
                bestVal = new Vector<Dynamic,Precision>( nNumRows );
            }
            Vector<Dynamic,Precision> null() {
                return Vector<Dynamic,Precision>( 0 );
            }
            void initialise( Precision initialVal, int nRow, int ) {
                (*bestVal)[nRow] = initialVal;
            }
            void operator()( Precision curVal, int nRow, int ) {
                if( ComparisonFunctor()( curVal, (*bestVal)[nRow] ) ) {
                    (*bestVal)[nRow] = curVal;
                }
            }
            Vector<Dynamic,Precision> ret() {
                if( bestVal == __null ) {
                    return null();
                }
                Vector<Dynamic,Precision> vRet = *bestVal;
                delete bestVal; bestVal = __null;
                return vRet;
            }
        };
        template<typename Precision, typename ComparisonFunctor>
        class accumulate_element_horizontal_functor {
            Vector<Dynamic,Precision>* bestVal;
            Vector<Dynamic,Precision>* bestIndices;
        public:
            accumulate_element_horizontal_functor() {
                bestVal = __null;
                bestIndices = __null;
            }
            accumulate_element_horizontal_functor( int nNumRows ) {
                bestVal = new Vector<Dynamic,Precision>( nNumRows );
                bestIndices = new Vector<Dynamic,Precision>( nNumRows );
            }
            std::pair<Vector<Dynamic,Precision>,Vector<Dynamic,Precision> > null() {
                Vector<Dynamic,Precision> vEmpty( 0 );
                return std::pair<Vector<Dynamic,Precision>,Vector<Dynamic,Precision> >( vEmpty, vEmpty );
            }
            void initialise( Precision initialVal, int nRow, int nCol ) {
                (*bestVal)[nRow] = initialVal;
                (*bestIndices)[nRow] = nCol;
            }
            void operator()( Precision curVal, int nRow, int nCol ) {
                if( ComparisonFunctor()( curVal, (*bestVal)[nRow] ) ) {
                    (*bestVal)[nRow] = curVal;
                    (*bestIndices)[nRow] = nCol;
                }
            }
            std::pair<Vector<Dynamic,Precision>,Vector<Dynamic,Precision> > ret() {
                if( bestVal == __null ) {
                    return null();
                }
                std::pair<Vector<Dynamic,Precision>,Vector<Dynamic,Precision> > vRet =
                    std::pair<Vector<Dynamic,Precision>,Vector<Dynamic,Precision> >( *bestVal, *bestIndices );
                delete bestVal; bestVal = __null;
                delete bestIndices; bestIndices = __null;
                return vRet;
            }
        };
    }





    template<int Size, typename Precision, typename Base> inline Precision min_value( const Vector<Size, Precision, Base>& v) {
        typedef Internal::accumulate_functor_vector<Precision, std::less<Precision> > vector_accumulate_functor;
        return Internal::accumulate<Size,Precision,Base,
            vector_accumulate_functor, Precision >( v );
    }



    template<int Size, typename Precision, typename Base> inline Precision max_value( const Vector<Size, Precision, Base>& v) {
        typedef Internal::accumulate_functor_vector<Precision, std::greater<Precision> > vector_accumulate_functor;
        return Internal::accumulate<Size,Precision,Base,
            vector_accumulate_functor, Precision >( v );
    }




    template<int R, int C, typename Precision, typename Base> inline Precision min_value( const Matrix<R, C, Precision, Base> & m) {
        typedef Internal::accumulate_functor_matrix<Precision, std::less<Precision> > matrix_accumulate_functor;
        return Internal::accumulate<R,C,Precision,Base,
            matrix_accumulate_functor, Precision>( m );
    }



    template<int R, int C, typename Precision, typename Base> inline Precision max_value( const Matrix<R, C, Precision, Base> & m) {
        typedef Internal::accumulate_functor_matrix<Precision, std::greater<Precision> > matrix_accumulate_functor;
        return Internal::accumulate<R,C,Precision,Base,
            matrix_accumulate_functor, Precision>( m );
    }



    template<int R, int C, typename Precision, typename Base> inline Vector<Dynamic,Precision> min_value_vertical( const Matrix<R, C, Precision, Base> & m) {
        typedef Internal::accumulate_vertical_functor<Precision,std::less<Precision> > matrix_accumulate_vertical_functor;
        return Internal::accumulate_vertical<R,C,Precision,Base,
            matrix_accumulate_vertical_functor, Vector<Dynamic,Precision> >( m );
    }



    template<int R, int C, typename Precision, typename Base> inline Vector<Dynamic,Precision> max_value_vertical( const Matrix<R, C, Precision, Base> & m) {
        typedef Internal::accumulate_vertical_functor<Precision,std::greater<Precision> > matrix_accumulate_vertical_functor;
        return Internal::accumulate_vertical<R,C,Precision,Base,
            matrix_accumulate_vertical_functor, Vector<Dynamic,Precision> >( m );
    }



    template<int R, int C, typename Precision, typename Base> inline Vector<Dynamic,Precision> min_value_horizontal( const Matrix<R, C, Precision, Base> & m) {
        typedef Internal::accumulate_horizontal_functor<Precision,std::less<Precision> > matrix_accumulate_horizontal_functor;
        return Internal::accumulate_horizontal<R,C,Precision,Base,
            matrix_accumulate_horizontal_functor, Vector<Dynamic,Precision> >( m );
    }



    template<int R, int C, typename Precision, typename Base> inline Vector<Dynamic,Precision> max_value_horizontal( const Matrix<R, C, Precision, Base> & m) {
        typedef Internal::accumulate_horizontal_functor<Precision,std::greater<Precision> > matrix_accumulate_horizontal_functor;
        return Internal::accumulate_horizontal<R,C,Precision,Base,
            matrix_accumulate_horizontal_functor, Vector<Dynamic,Precision> >( m );
    }



    template<int Size, typename Precision, typename Base> inline std::pair<Precision,int> min_element( const Vector<Size, Precision, Base>& v) {
        typedef Internal::accumulate_element_functor_vector<Precision, std::less<Precision> > vector_accumulate_functor;
        return Internal::accumulate<Size,Precision,Base,
            vector_accumulate_functor, std::pair<Precision,int> >( v );
    }



    template<int Size, typename Precision, typename Base> inline std::pair<Precision,int> max_element( const Vector<Size, Precision, Base>& v) {
        typedef Internal::accumulate_element_functor_vector<Precision, std::greater<Precision> > vector_accumulate_functor;
        return Internal::accumulate<Size,Precision,Base,
            vector_accumulate_functor, std::pair<Precision,int> >( v );
    }




    template<int R, int C, typename Precision, typename Base> inline std::pair<Precision,std::pair<int,int> > min_element( const Matrix<R, C, Precision, Base> & m) {
        typedef Internal::accumulate_element_functor_matrix<Precision, std::less<Precision> > matrix_accumulate_functor;
        typedef std::pair<Precision,std::pair<int,int> > Ret;
        return Internal::accumulate<R,C,Precision,Base,
            matrix_accumulate_functor, Ret>( m );
    }




    template<int R, int C, typename Precision, typename Base> inline std::pair<Precision,std::pair<int,int> > max_element( const Matrix<R, C, Precision, Base> & m) {
        typedef Internal::accumulate_element_functor_matrix<Precision, std::greater<Precision> > matrix_accumulate_functor;
        typedef std::pair<Precision,std::pair<int,int> > Ret;
        return Internal::accumulate<R,C,Precision,Base,
            matrix_accumulate_functor, Ret>( m );
    }





    template<int R, int C, typename Precision, typename Base> inline std::pair<Vector<Dynamic,Precision>,Vector<Dynamic,Precision> > min_element_vertical( const Matrix<R, C, Precision, Base> & m) {
        typedef Internal::accumulate_element_vertical_functor<Precision,std::less<Precision> > matrix_accumulate_vertical_functor;
        typedef std::pair<Vector< Dynamic, Precision >,Vector< Dynamic, Precision > > Ret;
        return Internal::accumulate_vertical<R,C,Precision,Base,
            matrix_accumulate_vertical_functor, Ret >( m );
    }





    template<int R, int C, typename Precision, typename Base> inline std::pair<Vector< Dynamic, Precision >,Vector< Dynamic, Precision > > max_element_vertical( const Matrix<R, C, Precision, Base> & m) {
        typedef Internal::accumulate_element_vertical_functor<Precision,std::greater<Precision> > matrix_accumulate_vertical_functor;
        typedef std::pair<Vector< Dynamic, Precision >,Vector< Dynamic, Precision > > Ret;
        return Internal::accumulate_vertical<R,C,Precision,Base,
            matrix_accumulate_vertical_functor, Ret >( m );
    }





    template<int R, int C, typename Precision, typename Base> inline std::pair<Vector< Dynamic, Precision >,Vector< Dynamic, Precision > > min_element_horizontal( const Matrix<R, C, Precision, Base> & m) {
        typedef Internal::accumulate_element_horizontal_functor<Precision,std::less<Precision> > matrix_accumulate_vertical_functor;
        typedef std::pair<Vector< Dynamic, Precision >,Vector< Dynamic, Precision > > Ret;
        return Internal::accumulate_horizontal<R,C,Precision,Base,
            matrix_accumulate_vertical_functor, Ret >( m );
    }





    template<int R, int C, typename Precision, typename Base> inline std::pair<Vector< Dynamic, Precision >,Vector< Dynamic, Precision > > max_element_horizontal( const Matrix<R, C, Precision, Base> & m) {
        typedef Internal::accumulate_element_horizontal_functor<Precision,std::greater<Precision> > matrix_accumulate_vertical_functor;
        typedef std::pair<Vector< Dynamic, Precision >,Vector< Dynamic, Precision > > Ret;
        return Internal::accumulate_horizontal<R,C,Precision,Base,
            matrix_accumulate_vertical_functor, Ret >( m );
    }
}
# 363 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/determinant.h" 1
# 28 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/determinant.h"
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 1
# 29 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/determinant.h" 2
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 30 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/determinant.h" 2





namespace TooN
{
 namespace Internal
 {






  template<int R, int C> struct Square
  {
  };





  template<int R> struct Square<R, R>
  {
   static const int Size = R;
  };





  template<int R> struct Square<R, Dynamic>
  {
   static const int Size = R;
  };




  template<int C> struct Square<Dynamic, C>
  {
   static const int Size = C;
  };




  template<> struct Square<Dynamic, Dynamic>
  {
   static const int Size = Dynamic;
  };
 };







 template<int R, int C, typename Precision, typename Base>
 Precision determinant_gaussian_elimination(const Matrix<R, C, Precision, Base>& A_)
 {
  Matrix<Internal::Square<R,C>::Size, Internal::Square<R,C>::Size,Precision> A = A_;
  TooN::SizeMismatch<R, C>::test(A.num_rows(), A.num_cols());
  using std::swap;
  using std::abs;

  int size=A.num_rows();





  Precision determinant=1;

  for (int i=0; i<size; ++i) {


   int argmax = i;
   Precision maxval = abs(A[i][i]);

   for (int ii=i+1; ii<size; ++ii) {
    Precision v = abs(A[ii][i]);
    if (v > maxval) {
     maxval = v;
     argmax = ii;
    }
   }
   Precision pivot = A[argmax][i];





   if (argmax != i) {
    determinant*=-1;
    for (int j=i; j<size; ++j)
     swap(A[i][j], A[argmax][j]);
   }

   determinant *= A[i][i];

   if(determinant == 0)
    return 0;

   for (int u=i+1; u<size; ++u) {


    Precision factor = A[u][i]/pivot;

    for (int j=i+1; j<size; ++j)
     A[u][j] = A[u][j] - factor * A[i][j];
   }
  }

  return determinant;
 }
# 173 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/determinant.h"
 template<int R, int C, class P, class B>
 P determinant(const Matrix<R, C, P, B>& A)
 {
  TooN::SizeMismatch<R, C>::test(A.num_rows(), A.num_cols());
  if(A.num_rows() == 2)
   return A[0][0]*A[1][1] - A[1][0]*A[0][1];




  else
   return determinant_gaussian_elimination(A);
 }
}
# 364 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/TooN.h" 2
# 44 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/se3.h" 1
# 31 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/se3.h"
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/so3.h" 1
# 33 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/so3.h"
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cassert" 1 3
# 43 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cassert" 3
# 43 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cassert" 3

# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 45 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cassert" 2 3
# 34 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/so3.h" 2

namespace TooN {

template <typename Precision> class SO3;
template <typename Precision> class SE3;
template <typename Precision> class SIM3;

template<class Precision> inline std::istream & operator>>(std::istream &, SO3<Precision> & );
template<class Precision> inline std::istream & operator>>(std::istream &, SE3<Precision> & );
template<class Precision> inline std::istream & operator>>(std::istream &, SIM3<Precision> & );
# 52 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/so3.h"
template <typename Precision = DefaultPrecision>
class SO3 {
public:
 friend std::istream& operator>> <Precision> (std::istream& is, SO3<Precision> & rhs);
 friend std::istream& operator>> <Precision> (std::istream& is, SE3<Precision> & rhs);
 friend std::istream& operator>> <Precision> (std::istream& is, SIM3<Precision> & rhs);
 friend class SE3<Precision>;
 friend class SIM3<Precision>;


 SO3() : my_matrix(Identity) {}


 template <int S, typename P, typename A>
 SO3(const Vector<S, P, A> & v) { *this = exp(v); }


 template <int R, int C, typename P, typename A>
 SO3(const Matrix<R,C,P,A>& rhs) { *this = rhs; }






 template <int S1, int S2, typename P1, typename P2, typename A1, typename A2>
 SO3(const Vector<S1, P1, A1> & a, const Vector<S2, P2, A2> & b ){
  SizeMismatch<3,S1>::test(3, a.size());
  SizeMismatch<3,S2>::test(3, b.size());
  Vector<3, Precision> n = a ^ b;
  if(norm_sq(n) == 0) {


   ((a*b>=0) ? static_cast<void> (0) : __assert_fail ("a*b>=0", "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/so3.h", 85, __PRETTY_FUNCTION__));
   my_matrix = Identity;
   return;
  }
  n = unit(n);
  Matrix<3> R1;
  R1.T()[0] = unit(a);
  R1.T()[1] = n;
  R1.T()[2] = R1.T()[0] ^ n;
  my_matrix.T()[0] = unit(b);
  my_matrix.T()[1] = n;
  my_matrix.T()[2] = my_matrix.T()[0] ^ n;
  my_matrix = my_matrix * R1.T();
 }



 template <int R, int C, typename P, typename A>
 SO3& operator=(const Matrix<R,C,P,A> & rhs) {
  my_matrix = rhs;
  coerce();
  return *this;
 }


 void coerce() {
  my_matrix[0] = unit(my_matrix[0]);
  my_matrix[1] -= my_matrix[0] * (my_matrix[0]*my_matrix[1]);
  my_matrix[1] = unit(my_matrix[1]);
  my_matrix[2] -= my_matrix[0] * (my_matrix[0]*my_matrix[2]);
  my_matrix[2] -= my_matrix[1] * (my_matrix[1]*my_matrix[2]);
  my_matrix[2] = unit(my_matrix[2]);

  (((my_matrix[0] ^ my_matrix[1]) * my_matrix[2] > 0) ? static_cast<void> (0) : __assert_fail ("(my_matrix[0] ^ my_matrix[1]) * my_matrix[2] > 0", "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/so3.h", 118, __PRETTY_FUNCTION__));
 }



 template<int S, typename VP, typename A> inline static SO3 exp(const Vector<S,VP,A>& vect);



 inline Vector<3, Precision> ln() const;


 SO3 inverse() const { return SO3(*this, Invert()); }


 template <typename P>
 SO3& operator *=(const SO3<P>& rhs) {
  *this = *this * rhs;
  return *this;
 }


 template<typename P>
 SO3<typename Internal::MultiplyType<Precision, P>::type> operator *(const SO3<P>& rhs) const {
     return SO3<typename Internal::MultiplyType<Precision, P>::type>(*this,rhs);
 }


 const Matrix<3,3, Precision> & get_matrix() const {return my_matrix;}





 inline static Matrix<3,3, Precision> generator(int i){
  Matrix<3,3,Precision> result(Zeros);
  result[(i+1)%3][(i+2)%3] = -1;
  result[(i+2)%3][(i+1)%3] = 1;
  return result;
 }


  template<typename Base>
  inline static Vector<3,Precision> generator_field(int i, const Vector<3, Precision, Base>& pos)
  {
    Vector<3, Precision> result;
    result[i]=0;
    result[(i+1)%3] = - pos[(i+2)%3];
    result[(i+2)%3] = pos[(i+1)%3];
    return result;
  }





 template <int S, typename A>
 inline Vector<3, Precision> adjoint(const Vector<S, Precision, A>& vect) const
 {
  SizeMismatch<3, S>::test(3, vect.size());
  return *this * vect;
 }

 template <typename PA, typename PB>
 inline SO3(const SO3<PA>& a, const SO3<PB>& b) : my_matrix(a.get_matrix()*b.get_matrix()) {}

private:
 struct Invert {};
 inline SO3(const SO3& so3, const Invert&) : my_matrix(so3.my_matrix.T()) {}

 Matrix<3,3, Precision> my_matrix;
};



template <typename Precision>
inline std::ostream& operator<< (std::ostream& os, const SO3<Precision>& rhs){
 return os << rhs.get_matrix();
}



template <typename Precision>
inline std::istream& operator>>(std::istream& is, SO3<Precision>& rhs){
 is >> rhs.my_matrix;
 rhs.coerce();
 return is;
}
# 218 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/so3.h"
template <typename Precision, int S, typename VP, typename VA, typename MA>
inline void rodrigues_so3_exp(const Vector<S,VP, VA>& w, const Precision A, const Precision B, Matrix<3,3,Precision,MA>& R){
    SizeMismatch<3,S>::test(3, w.size());
 {
  const Precision wx2 = (Precision)w[0]*w[0];
  const Precision wy2 = (Precision)w[1]*w[1];
  const Precision wz2 = (Precision)w[2]*w[2];

  R[0][0] = 1.0 - B*(wy2 + wz2);
  R[1][1] = 1.0 - B*(wx2 + wz2);
  R[2][2] = 1.0 - B*(wx2 + wy2);
 }
 {
  const Precision a = A*w[2];
  const Precision b = B*(w[0]*w[1]);
  R[0][1] = b - a;
  R[1][0] = b + a;
 }
 {
  const Precision a = A*w[1];
  const Precision b = B*(w[0]*w[2]);
  R[0][2] = b + a;
  R[2][0] = b - a;
 }
 {
  const Precision a = A*w[0];
  const Precision b = B*(w[1]*w[2]);
  R[1][2] = b - a;
  R[2][1] = b + a;
 }
}



template <typename Precision>
template<int S, typename VP, typename VA>
inline SO3<Precision> SO3<Precision>::exp(const Vector<S,VP,VA>& w){
 using std::sqrt;
 using std::sin;
 using std::cos;
 SizeMismatch<3,S>::test(3, w.size());

 static const Precision one_6th = 1.0/6.0;
_ssdm_SpecConstant(&one_6th);
# 260 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/so3.h"

 static const Precision one_20th = 1.0/20.0;
_ssdm_SpecConstant(&one_20th);
# 261 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/so3.h"


 SO3<Precision> result;

 const Precision theta_sq = w*w;
 const Precision theta = sqrt(theta_sq);
 Precision A, B;


 if (theta_sq < 1e-8) {
  A = 1.0 - one_6th * theta_sq;
  B = 0.5;
 } else {
  if (theta_sq < 1e-6) {
   B = 0.5 - 0.25 * one_6th * theta_sq;
   A = 1.0 - theta_sq * one_6th*(1.0 - one_20th * theta_sq);
  } else {
   const Precision inv_theta = 1.0/theta;
   A = sin(theta) * inv_theta;
   B = (1 - cos(theta)) * (inv_theta * inv_theta);
  }
 }
 rodrigues_so3_exp(w, A, B, result.my_matrix);
 return result;
}

template <typename Precision>
inline Vector<3, Precision> SO3<Precision>::ln() const{
    using std::sqrt;
 Vector<3, Precision> result;

 const Precision cos_angle = (my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] - 1.0) * 0.5;
 result[0] = (my_matrix[2][1]-my_matrix[1][2])/2;
 result[1] = (my_matrix[0][2]-my_matrix[2][0])/2;
 result[2] = (my_matrix[1][0]-my_matrix[0][1])/2;

 Precision sin_angle_abs = sqrt(result*result);
 if (cos_angle > 0.70710678118654752440) {
  if(sin_angle_abs > 0){
   result *= asin(sin_angle_abs) / sin_angle_abs;
  }
 } else if( cos_angle > -0.70710678118654752440) {
  const Precision angle = acos(cos_angle);
  result *= angle / sin_angle_abs;
 } else {

  const Precision angle = 3.14159265358979323846 - asin(sin_angle_abs);
  const Precision d0 = my_matrix[0][0] - cos_angle,
   d1 = my_matrix[1][1] - cos_angle,
   d2 = my_matrix[2][2] - cos_angle;
  TooN::Vector<3, Precision> r2;
  if(d0*d0 > d1*d1 && d0*d0 > d2*d2){
   r2[0] = d0;
   r2[1] = (my_matrix[1][0]+my_matrix[0][1])/2;
   r2[2] = (my_matrix[0][2]+my_matrix[2][0])/2;
  } else if(d1*d1 > d2*d2) {
   r2[0] = (my_matrix[1][0]+my_matrix[0][1])/2;
   r2[1] = d1;
   r2[2] = (my_matrix[2][1]+my_matrix[1][2])/2;
  } else {
   r2[0] = (my_matrix[0][2]+my_matrix[2][0])/2;
   r2[1] = (my_matrix[2][1]+my_matrix[1][2])/2;
   r2[2] = d2;
  }

  if(r2 * result < 0)
   r2 *= -1;
  r2 = unit(r2);
  result = TooN::operator*(angle,r2);
 }
 return result;
}



template<int S, typename P, typename PV, typename A> inline
Vector<3, typename Internal::MultiplyType<P, PV>::type> operator*(const SO3<P>& lhs, const Vector<S, PV, A>& rhs){
 return lhs.get_matrix() * rhs;
}



template<int S, typename P, typename PV, typename A> inline
Vector<3, typename Internal::MultiplyType<PV, P>::type> operator*(const Vector<S, PV, A>& lhs, const SO3<P>& rhs){
 return lhs * rhs.get_matrix();
}



template<int R, int C, typename P, typename PM, typename A> inline
Matrix<3, C, typename Internal::MultiplyType<P, PM>::type> operator*(const SO3<P>& lhs, const Matrix<R, C, PM, A>& rhs){
 return lhs.get_matrix() * rhs;
}



template<int R, int C, typename P, typename PM, typename A> inline
Matrix<R, 3, typename Internal::MultiplyType<PM, P>::type> operator*(const Matrix<R, C, PM, A>& lhs, const SO3<P>& rhs){
 return lhs * rhs.get_matrix();
}
# 426 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/so3.h"
}
# 32 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/se3.h" 2

namespace TooN {
# 47 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/se3.h"
template <typename Precision = DefaultPrecision>
class SE3 {
public:

 inline SE3() : my_translation(Zeros) {}

 template <int S, typename P, typename A>
 SE3(const SO3<Precision> & R, const Vector<S, P, A>& T) : my_rotation(R), my_translation(T) {}
 template <int S, typename P, typename A>
 SE3(const Vector<S, P, A> & v) { *this = exp(v); }

 template <class IP, int S, typename P, typename A>
 SE3(const Operator<Internal::Identity<IP> >&, const Vector<S, P, A>& T) : my_translation(T) {}


 inline SO3<Precision>& get_rotation(){return my_rotation;}

 inline const SO3<Precision>& get_rotation() const {return my_rotation;}


 inline Vector<3, Precision>& get_translation() {return my_translation;}

 inline const Vector<3, Precision>& get_translation() const {return my_translation;}




 template <int S, typename P, typename A>
 static inline SE3 exp(const Vector<S, P, A>& vect);




 static inline Vector<6, Precision> ln(const SE3& se3);

 inline Vector<6, Precision> ln() const { return SE3::ln(*this); }

 inline SE3 inverse() const {
  const SO3<Precision> rinv = get_rotation().inverse();
  return SE3(rinv, -(rinv*my_translation));
 }



 template<typename P>
 inline SE3& operator *=(const SE3<P> & rhs) {
  get_translation() += get_rotation() * rhs.get_translation();
  get_rotation() *= rhs.get_rotation();
  return *this;
 }



 template<typename P>
 inline SE3<typename Internal::MultiplyType<Precision, P>::type> operator *(const SE3<P>& rhs) const {
     return SE3<typename Internal::MultiplyType<Precision, P>::type>(get_rotation()*rhs.get_rotation(), get_translation() + get_rotation()*rhs.get_translation());
 }

 inline SE3& left_multiply_by(const SE3& left) {
  get_translation() = left.get_translation() + left.get_rotation() * get_translation();
  get_rotation() = left.get_rotation() * get_rotation();
  return *this;
 }

 static inline Matrix<4,4,Precision> generator(int i){
  Matrix<4,4,Precision> result(Zeros);
  if(i < 3){
   result[i][3]=1;
   return result;
  }
  result[(i+1)%3][(i+2)%3] = -1;
  result[(i+2)%3][(i+1)%3] = 1;
  return result;
 }


  template<typename Base>
  inline static Vector<4,Precision> generator_field(int i, const Vector<4, Precision, Base>& pos)
  {
    Vector<4, Precision> result(Zeros);
    if(i < 3){
      result[i]=pos[3];
      return result;
    }
    result[(i+1)%3] = - pos[(i+2)%3];
    result[(i+2)%3] = pos[(i+1)%3];
    return result;
  }






 template<int S, typename P2, typename Accessor>
 inline Vector<6, Precision> adjoint(const Vector<S,P2, Accessor>& vect)const;



 template<int S, typename P2, typename Accessor>
 inline Vector<6, Precision> trinvadjoint(const Vector<S,P2,Accessor>& vect)const;


 template <int R, int C, typename P2, typename Accessor>
 inline Matrix<6,6,Precision> adjoint(const Matrix<R,C,P2,Accessor>& M)const;


 template <int R, int C, typename P2, typename Accessor>
 inline Matrix<6,6,Precision> trinvadjoint(const Matrix<R,C,P2,Accessor>& M)const;

private:
 SO3<Precision> my_rotation;
 Vector<3, Precision> my_translation;
};




template<typename Precision>
template<int S, typename P2, typename Accessor>
inline Vector<6, Precision> SE3<Precision>::adjoint(const Vector<S,P2, Accessor>& vect) const{
 SizeMismatch<6,S>::test(6, vect.size());
 Vector<6, Precision> result;
 result.template slice<3,3>() = get_rotation() * vect.template slice<3,3>();
 result.template slice<0,3>() = get_rotation() * vect.template slice<0,3>();
 result.template slice<0,3>() += get_translation() ^ result.template slice<3,3>();
 return result;
}




template<typename Precision>
template<int S, typename P2, typename Accessor>
inline Vector<6, Precision> SE3<Precision>::trinvadjoint(const Vector<S,P2, Accessor>& vect) const{
 SizeMismatch<6,S>::test(6, vect.size());
 Vector<6, Precision> result;
 result.template slice<3,3>() = get_rotation() * vect.template slice<3,3>();
 result.template slice<0,3>() = get_rotation() * vect.template slice<0,3>();
 result.template slice<3,3>() += get_translation() ^ result.template slice<0,3>();
 return result;
}

template<typename Precision>
template<int R, int C, typename P2, typename Accessor>
inline Matrix<6,6,Precision> SE3<Precision>::adjoint(const Matrix<R,C,P2,Accessor>& M)const{
 SizeMismatch<6,R>::test(6, M.num_cols());
 SizeMismatch<6,C>::test(6, M.num_rows());

 Matrix<6,6,Precision> result;
 for(int i=0; i<6; i++){
  result.T()[i] = adjoint(M.T()[i]);
 }
 for(int i=0; i<6; i++){
  result[i] = adjoint(result[i]);
 }
 return result;
}

template<typename Precision>
template<int R, int C, typename P2, typename Accessor>
inline Matrix<6,6,Precision> SE3<Precision>::trinvadjoint(const Matrix<R,C,P2,Accessor>& M)const{
 SizeMismatch<6,R>::test(6, M.num_cols());
 SizeMismatch<6,C>::test(6, M.num_rows());

 Matrix<6,6,Precision> result;
 for(int i=0; i<6; i++){
  result.T()[i] = trinvadjoint(M.T()[i]);
 }
 for(int i=0; i<6; i++){
  result[i] = trinvadjoint(result[i]);
 }
 return result;
}



template <typename Precision>
inline std::ostream& operator <<(std::ostream& os, const SE3<Precision>& rhs){
 std::streamsize fw = os.width();
 for(int i=0; i<3; i++){
  os.width(fw);
  os << rhs.get_rotation().get_matrix()[i];
  os.width(fw);
  os << rhs.get_translation()[i] << '\n';
 }
 return os;
}




template <typename Precision>
inline std::istream& operator>>(std::istream& is, SE3<Precision>& rhs){
 for(int i=0; i<3; i++){
  is >> rhs.get_rotation().my_matrix[i].ref() >> rhs.get_translation()[i];
 }
 rhs.get_rotation().coerce();
 return is;
}






namespace Internal {
template<int S, typename PV, typename A, typename P>
struct SE3VMult;
}

template<int S, typename PV, typename A, typename P>
struct Operator<Internal::SE3VMult<S,PV,A,P> > {
 const SE3<P> & lhs;
 const Vector<S,PV,A> & rhs;

 Operator(const SE3<P> & l, const Vector<S,PV,A> & r ) : lhs(l), rhs(r) {}

 template <int S0, typename P0, typename A0>
 void eval(Vector<S0, P0, A0> & res ) const {
  SizeMismatch<4,S>::test(4, rhs.size());
  res.template slice<0,3>()=lhs.get_rotation() * rhs.template slice<0,3>();
  res.template slice<0,3>()+=TooN::operator*(lhs.get_translation(),rhs[3]);
  res[3] = rhs[3];
 }
 int size() const { return 4; }
};



template<int S, typename PV, typename A, typename P> inline
Vector<4, typename Internal::MultiplyType<P,PV>::type> operator*(const SE3<P> & lhs, const Vector<S,PV,A>& rhs){
 return Vector<4, typename Internal::MultiplyType<P,PV>::type>(Operator<Internal::SE3VMult<S,PV,A,P> >(lhs,rhs));
}



template <typename PV, typename A, typename P> inline
Vector<3, typename Internal::MultiplyType<P,PV>::type> operator*(const SE3<P>& lhs, const Vector<3,PV,A>& rhs){
 return lhs.get_translation() + lhs.get_rotation() * rhs;
}






namespace Internal {
template<int S, typename PV, typename A, typename P>
struct VSE3Mult;
}

template<int S, typename PV, typename A, typename P>
struct Operator<Internal::VSE3Mult<S,PV,A,P> > {
 const Vector<S,PV,A> & lhs;
 const SE3<P> & rhs;

 Operator( const Vector<S,PV,A> & l, const SE3<P> & r ) : lhs(l), rhs(r) {}

 template <int S0, typename P0, typename A0>
 void eval(Vector<S0, P0, A0> & res ) const {
  SizeMismatch<4,S>::test(4, lhs.size());
  res.template slice<0,3>()=lhs.template slice<0,3>() * rhs.get_rotation();
  res[3] = lhs[3];
  res[3] += lhs.template slice<0,3>() * rhs.get_translation();
 }
 int size() const { return 4; }
};



template<int S, typename PV, typename A, typename P> inline
Vector<4, typename Internal::MultiplyType<P,PV>::type> operator*( const Vector<S,PV,A>& lhs, const SE3<P> & rhs){
 return Vector<4, typename Internal::MultiplyType<P,PV>::type>(Operator<Internal::VSE3Mult<S,PV,A,P> >(lhs,rhs));
}






namespace Internal {
template <int R, int C, typename PM, typename A, typename P>
struct SE3MMult;
}

template<int R, int Cols, typename PM, typename A, typename P>
struct Operator<Internal::SE3MMult<R, Cols, PM, A, P> > {
 const SE3<P> & lhs;
 const Matrix<R,Cols,PM,A> & rhs;

 Operator(const SE3<P> & l, const Matrix<R,Cols,PM,A> & r ) : lhs(l), rhs(r) {}

 template <int R0, int C0, typename P0, typename A0>
 void eval(Matrix<R0, C0, P0, A0> & res ) const {
  SizeMismatch<4,R>::test(4, rhs.num_rows());
  for(int i=0; i<rhs.num_cols(); ++i)
   res.T()[i] = lhs * rhs.T()[i];
 }
 int num_cols() const { return rhs.num_cols(); }
 int num_rows() const { return 4; }
};



template <int R, int Cols, typename PM, typename A, typename P> inline
Matrix<4,Cols, typename Internal::MultiplyType<P,PM>::type> operator*(const SE3<P> & lhs, const Matrix<R,Cols,PM, A>& rhs){
 return Matrix<4,Cols,typename Internal::MultiplyType<P,PM>::type>(Operator<Internal::SE3MMult<R, Cols, PM, A, P> >(lhs,rhs));
}






namespace Internal {
template <int Rows, int C, typename PM, typename A, typename P>
struct MSE3Mult;
}

template<int Rows, int C, typename PM, typename A, typename P>
struct Operator<Internal::MSE3Mult<Rows, C, PM, A, P> > {
 const Matrix<Rows,C,PM,A> & lhs;
 const SE3<P> & rhs;

 Operator( const Matrix<Rows,C,PM,A> & l, const SE3<P> & r ) : lhs(l), rhs(r) {}

 template <int R0, int C0, typename P0, typename A0>
 void eval(Matrix<R0, C0, P0, A0> & res ) const {
  SizeMismatch<4, C>::test(4, lhs.num_cols());
  for(int i=0; i<lhs.num_rows(); ++i)
   res[i] = lhs[i] * rhs;
 }
 int num_cols() const { return 4; }
 int num_rows() const { return lhs.num_rows(); }
};



template <int Rows, int C, typename PM, typename A, typename P> inline
Matrix<Rows,4, typename Internal::MultiplyType<PM,P>::type> operator*(const Matrix<Rows,C,PM, A>& lhs, const SE3<P> & rhs ){
 return Matrix<Rows,4,typename Internal::MultiplyType<PM,P>::type>(Operator<Internal::MSE3Mult<Rows, C, PM, A, P> >(lhs,rhs));
}

template <typename Precision>
template <int S, typename P, typename VA>
inline SE3<Precision> SE3<Precision>::exp(const Vector<S, P, VA>& mu){
 SizeMismatch<6,S>::test(6, mu.size());
 static const Precision one_6th = 1.0/6.0;
_ssdm_SpecConstant(&one_6th);
# 395 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/se3.h"

 static const Precision one_20th = 1.0/20.0;
_ssdm_SpecConstant(&one_20th);
# 396 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/se3.h"

 using std::sqrt;

 SE3<Precision> result;

 const Vector<3,Precision> w = mu.template slice<3,3>();
 const Precision theta_sq = w*w;
 const Precision theta = sqrt(theta_sq);
 Precision A, B;

 const Vector<3,Precision> cross = w ^ mu.template slice<0,3>();
 if (theta_sq < 1e-8) {
  A = 1.0 - one_6th * theta_sq;
  B = 0.5;
  result.get_translation() = mu.template slice<0,3>() + 0.5 * cross;
 } else {
  Precision C;
  if (theta_sq < 1e-6) {
   C = one_6th*(1.0 - one_20th * theta_sq);
   A = 1.0 - theta_sq * C;
   B = 0.5 - 0.25 * one_6th * theta_sq;
  } else {
   const Precision inv_theta = 1.0/theta;
   A = sin(theta) * inv_theta;
   B = (1 - cos(theta)) * (inv_theta * inv_theta);
   C = (1 - A) * (inv_theta * inv_theta);
  }
  result.get_translation() = mu.template slice<0,3>() + TooN::operator*(B, cross) + TooN::operator*(C, (w ^ cross));
 }
 rodrigues_so3_exp(w, A, B, result.get_rotation().my_matrix);
 return result;
}

template <typename Precision>
inline Vector<6, Precision> SE3<Precision>::ln(const SE3<Precision>& se3) {
 using std::sqrt;
 Vector<3,Precision> rot = se3.get_rotation().ln();
 const Precision theta = sqrt(rot*rot);

 Precision shtot = 0.5;
 if(theta > 0.00001) {
  shtot = sin(theta/2)/theta;
 }


 const SO3<Precision> halfrotator = SO3<Precision>::exp(rot * -0.5);
 Vector<3, Precision> rottrans = halfrotator * se3.get_translation();

 if(theta > 0.001){
  rottrans -= TooN::operator*(rot, ((se3.get_translation() * rot) * (1-2*shtot) / (rot*rot)));
 } else {
  rottrans -= TooN::operator*(rot, ((se3.get_translation() * rot)/24));
 }

 rottrans /= (2 * shtot);

 Vector<6, Precision> result;
 result.template slice<0,3>()=rottrans;
 result.template slice<3,3>()=rot;
 return result;
}

template <typename Precision>
inline SE3<Precision> operator*(const SO3<Precision>& lhs, const SE3<Precision>& rhs){
 return SE3<Precision>(lhs*rhs.get_rotation(),lhs*rhs.get_translation());
}
# 633 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/se3.h"
}
# 45 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h" 2
# 1 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/GR_SVD.h" 1
# 32 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/GR_SVD.h"
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 33 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/GR_SVD.h" 2

# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 1 3
# 59 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 3
# 59 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 3



# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 1 3
# 61 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 62 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 1 3
# 33 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
# 33 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3






namespace std __attribute__ ((__visibility__ ("default")))
{
# 200 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);
# 229 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);
# 268 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);
# 331 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);
# 416 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);
# 433 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);
# 454 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  template<typename _FIter>
    void
    rotate(_FIter, _FIter, _FIter);

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 537 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);

  template<typename _Tp>
    void
    swap(_Tp&, _Tp&);

  template<typename _Tp, size_t _Nm>
    void
    swap(_Tp (&)[_Nm], _Tp (&)[_Nm]);

  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);





  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter,



     _Generator&);


  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);


}
# 63 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 1 3
# 62 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _RandomAccessIterator, typename _Distance>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__first[__parent] < __first[__child])
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first[__parent], __first[__child]))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    { return std::__is_heap_until(__first, __n) == __n; }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    { return std::__is_heap_until(__first, __n, __comp) == __n; }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && *(__first + __parent) < __value)
 {
   *(__first + __holeIndex) = (*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = (__value);
    }
# 154 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;





                                                     ;
                                                  ;

      _ValueType __value = (*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), (__value));
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,
  _Distance __topIndex, _Tp __value, _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex
      && __comp(*(__first + __parent), __value))
 {
   *(__first + __holeIndex) = (*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = (__value);
    }
# 203 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;




                                                     ;
                                                               ;

      _ValueType __value = (*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), (__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = (*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = (*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         (__value));
    }

  template<typename _RandomAccessIterator>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = (*__result);
      *__result = (*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    (__value));
    }
# 276 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                     ;
                                              ;

      --__last;
      std::__pop_heap(__first, __last, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(*(__first + __secondChild),
       *(__first + (__secondChild - 1))))
     __secondChild--;
   *(__first + __holeIndex) = (*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = (*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         (__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = (*__result);
      *__result = (*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    (__value), __comp);
    }
# 350 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {



                                                     ;
                                                           ;

      --__last;
      std::__pop_heap(__first, __last, __last, __comp);
    }
# 373 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;





                                                     ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = (*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, (__value));
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 413 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;




                                                     ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = (*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, (__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 452 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;
                                              ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last);
 }
    }
# 481 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {



                                                     ;
                                                           ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 579 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
}
# 64 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 1 3
# 63 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 84 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len)
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 111 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {



    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __ucr(_ForwardIterator __first, _ForwardIterator __last,
       _Tp& __value)
        {
   if(__first == __last)
     return;

   _ForwardIterator __cur = __first;
   if (true)
     {
       std::_Construct(std::__addressof(*__first),
         (__value));
       _ForwardIterator __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    (*__prev));
       __value = (*__prev);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __ucr(_ForwardIterator, _ForwardIterator, _Tp&) { }
    };
# 230 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_construct_buf(_ForwardIterator __first,
      _ForwardIterator __last,
      _Tp& __value)
    {
      typedef typename std::iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __value);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      if (true)
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if(_M_buffer)
     std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,
            *__first);
 }
      if (false)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
                          ;
 }
    }


}
# 65 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3








namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Iterator>
    void
    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c)
    {




      if (*__a < *__b)
 {
   if (*__b < *__c)
     std::iter_swap(__a, __b);
   else if (*__a < *__c)
     std::iter_swap(__a, __c);
 }
      else if (*__a < *__c)
 return;
      else if (*__b < *__c)
 std::iter_swap(__a, __c);
      else
 std::iter_swap(__a, __b);
    }


  template<typename _Iterator, typename _Compare>
    void
    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c,
   _Compare __comp)
    {





      if (__comp(*__a, *__b))
 {
   if (__comp(*__b, *__c))
     std::iter_swap(__a, __b);
   else if (__comp(*__a, *__c))
     std::iter_swap(__a, __c);
 }
      else if (__comp(*__a, *__c))
 return;
      else if (__comp(*__b, *__c))
 std::iter_swap(__a, __c);
      else
 std::iter_swap(__a, __b);
    }




  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    __find(_InputIterator __first, _InputIterator __last,
    const _Tp& __val, input_iterator_tag)
    {
      while (__first != __last && !(*__first == __val))
 ++__first;
      return __first;
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !bool(__pred(*__first)))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,
    const _Tp& __val, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (*__first == __val)
     return __first;
   ++__first;
 case 2:
   if (*__first == __val)
     return __first;
   ++__first;
 case 1:
   if (*__first == __val)
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }
# 326 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        std::forward_iterator_tag)
    {
      __first = std::find(__first, __last, __val);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && *__i == __val)
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::find(++__i, __last, __val);
 }
      return __last;
    }






  template<typename _RandomAccessIter, typename _Integer, typename _Tp>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!(*__lookAhead == __val))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        *__backTrack == __val; --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 411 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::forward_iterator_tag)
    {
      while (__first != __last && !bool(__binary_pred(*__first, __val)))
        ++__first;

      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && bool(__binary_pred(*__i, __val)))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = ++__i;
   while (__first != __last
   && !bool(__binary_pred(*__first, __val)))
     ++__first;
 }
      return __last;
    }







  template<typename _RandomAccessIter, typename _Integer, typename _Tp,
    typename _BinaryPredicate>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!bool(__binary_pred(*__lookAhead, __val)))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        __binary_pred(*__backTrack, __val); --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2, __last2);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2,
      __last2, __comp);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag)
    {






      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1),
             __rlast1,
             _RevIterator2(__last2),
             __rlast2);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }

  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {






      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1), __rlast1,
         _RevIterator2(__last2), __rlast2,
         __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 649 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2));
    }
# 695 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __comp);
    }
# 874 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (!(*__first == __value))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 911 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (!bool(__pred(*__first)))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 1086 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {





                                                     ;

      __first = std::find(__first, __last, __value);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!(*__first == __value))
          {
            *__result = (*__first);
            ++__result;
          }
      return __result;
    }
# 1129 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      __first = std::find_if(__first, __last, __pred);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!bool(__pred(*__first)))
          {
            *__result = (*__first);
            ++__result;
          }
      return __result;
    }
# 1169 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {





                                                     ;


      __first = std::adjacent_find(__first, __last);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!(*__dest == *__first))
   *++__dest = (*__first);
      return ++__dest;
    }
# 1209 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred)
    {






                                                     ;


      __first = std::adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__dest, *__first)))
   *++__dest = (*__first);
      return ++__dest;
    }






  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result,
    forward_iterator_tag, output_iterator_tag)
    {

      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!(*__first == *__next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result,
    input_iterator_tag, output_iterator_tag)
    {

      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!(__value == *__first))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _ForwardIterator>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result,
    input_iterator_tag, forward_iterator_tag)
    {

      *__result = *__first;
      while (++__first != __last)
 if (!(*__result == *__first))
   *++__result = *__first;
      return ++__result;
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {





      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!bool(__binary_pred(*__first, *__next)))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {





      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!bool(__binary_pred(__value, *__first)))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {





      *__result = *__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__result, *__first)))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1437 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {



                                                     ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1464 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {





                                                     ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }


  template<typename _ForwardIterator>
    void
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle || __last == __middle)
 return;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
    }


  template<typename _BidirectionalIterator>
    void
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {




      if (__first == __middle || __last == __middle)
 return;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 std::__reverse(__middle, __last, bidirectional_iterator_tag());
      else
 std::__reverse(__first, __middle, bidirectional_iterator_tag());
    }


  template<typename _RandomAccessIterator>
    void
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {




      if (__first == __middle || __last == __middle)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return;
 }

      _RandomAccessIterator __p = __first;

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = (*__p);
    std::copy(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = (__t);
    return;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = (*(__p + __n - 1));
    std::copy_backward(__p, __p + __n - 1, __p + __n);
    *__p = (__t);
    return;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
     }
 }
    }
# 1668 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline void
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {



                                                       ;
                                                      ;

      typedef typename iterator_traits<_ForwardIterator>::iterator_category
 _IterType;
      std::__rotate(__first, __middle, __last, _IterType());
    }
# 1702 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result)
    {




                                                       ;
                                                      ;

      return std::copy(__first, __middle,
                       std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }




  template<typename _ForwardIterator, typename _Predicate, typename _Distance>
    _ForwardIterator
    __inplace_stable_partition(_ForwardIterator __first,
          _ForwardIterator __last,
          _Predicate __pred, _Distance __len)
    {
      if (__len == 1)
 return __pred(*__first) ? __last : __first;
      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __begin = std::__inplace_stable_partition(__first,
         __middle,
         __pred,
         __len / 2);
      _ForwardIterator __end = std::__inplace_stable_partition(__middle, __last,
              __pred,
              __len
              - __len / 2);
      std::rotate(__begin, __middle, __end);
      std::advance(__begin, std::distance(__middle, __end));
      return __begin;
    }


  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;
   for (; __first != __last; ++__first)
     if (__pred(*__first))
       {
  *__result1 = (*__first);
  ++__result1;
       }
     else
       {
  *__result2 = (*__first);
  ++__result2;
       }
   std::copy(__buffer, __result2, __result1);
   return __result1;
 }
      else
 {
   _ForwardIterator __middle = __first;
   std::advance(__middle, __len / 2);
   _ForwardIterator __begin =
     std::__stable_partition_adaptive(__first, __middle, __pred,
          __len / 2, __buffer,
          __buffer_size);
   _ForwardIterator __end =
     std::__stable_partition_adaptive(__middle, __last, __pred,
          __len - __len / 2,
          __buffer, __buffer_size);
   std::rotate(__begin, __middle, __end);
   std::advance(__begin, std::distance(__middle, __end));
   return __begin;
 }
    }
# 1860 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      if (__first == __last)
 return __first;
      else
 {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;
   typedef typename iterator_traits<_ForwardIterator>::difference_type
     _DistanceType;

   _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first,
        __last);
 if (__buf.size() > 0)
   return
     std::__stable_partition_adaptive(__first, __last, __pred,
       _DistanceType(__buf.requested_size()),
       __buf.begin(),
       _DistanceType(__buf.size()));
 else
   return
     std::__inplace_stable_partition(__first, __last, __pred,
      _DistanceType(__buf.requested_size()));
 }
    }


  template<typename _RandomAccessIterator>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last)
    {
      std::make_heap(__first, __middle);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (*__i < *__first)
   std::__pop_heap(__first, __middle, __i);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(*__i, *__first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }
# 1942 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 1962 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                     ;
                                                                   ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last);
      while (__first != __last)
 {
   if (*__first < *__result_first)
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first));
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last);
      return __result_real_last;
    }
# 2008 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 2032 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                     ;
                                                                   ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(*__first, *__result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first),
          __comp);
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }


  template<typename _RandomAccessIterator>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = (*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__val < *__next)
 {
   *__last = (*__next);
   __last = __next;
   --__next;
 }
      *__last = (__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = (*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, *__next))
 {
   *__last = (*__next);
   __last = __next;
   --__next;
 }
      *__last = (__val);
    }


  template<typename _RandomAccessIterator>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last)
    {
      if (__first == __last)
 return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (*__i < *__first)
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = (*__i);
       std::copy_backward(__first, __i, __i + 1);
       *__first = (__val);
     }
   else
     std::__unguarded_linear_insert(__i);
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(*__i, *__first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = (*__i);
       std::copy_backward(__first, __i, __i + 1);
       *__first = (__val);
     }
   else
     std::__unguarded_linear_insert(__i, __comp);
 }
    }


  template<typename _RandomAccessIterator>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i, __comp);
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold));
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last);
 }
      else
 std::__insertion_sort(__first, __last);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last, const _Tp& __pivot)
    {
      while (true)
 {
   while (*__first < __pivot)
     ++__first;
   --__last;
   while (__pivot < *__last)
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     const _Tp& __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(*__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, *__last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_first(__first, __mid, (__last - 1));
      return std::__unguarded_partition(__first + 1, __last, *__first);
    }



  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_first(__first, __mid, (__last - 1), __comp);
      return std::__unguarded_partition(__first + 1, __last, *__first, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last);
   std::__introsort_loop(__cut, __last, __depth_limit);
   __last = __cut;
 }
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Size>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last);


       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2392 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;






                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2439 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;




                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__val < *__middle)
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2488 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;






                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2541 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;





                                                                  ;
                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__val < *__middle)
     __len = __half;
   else
     {
       _ForwardIterator __left = std::lower_bound(__first, __middle,
        __val);
       std::advance(__first, __len);
       _ForwardIterator __right = std::upper_bound(++__middle, __first,
         __val);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2603 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;
# 2620 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                    ;

                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       _ForwardIterator __left = std::lower_bound(__first, __middle,
        __val, __comp);
       std::advance(__first, __len);
       _ForwardIterator __right = std::upper_bound(++__middle, __first,
         __val, __comp);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2663 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




                                                                  ;
                                                                  ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val);
      return __i != __last && !(__val < *__i);
    }
# 2696 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;






                    ;

                    ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val, __comp);
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = (*__first2);
       ++__first2;
     }
   else
     {
       *__result = (*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::copy(__first1, __last1, __result);
    }


  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = (*__first2);
       ++__first2;
     }
   else
     {
       *__result = (*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::copy(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result)
    {
      if (__first1 == __last1)
 {
   std::copy_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (*__last2 < *__last1)
     {
       *--__result = (*__last1);
       if (__first1 == __last1)
  {
    std::copy_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = (*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::copy_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(*__last2, *__last1))
     {
       *--__result = (*__last1);
       if (__first1 == __last1)
  {
    std::copy_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = (*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::copy(__middle, __last, __buffer);
       std::copy_backward(__first, __middle, __last);
       return std::copy(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::copy(__first, __middle, __buffer);
       std::copy(__middle, __last, __first);
       return std::copy_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last,
           *__first_cut);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle,
          *__second_cut);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer, __buffer_size);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last, *__first_cut,
           __comp);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle, *__second_cut,
          __comp);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (*__middle < *__first)
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22);
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (__comp(*__middle, *__first))
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut,
       __comp);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut,
      __comp);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }
# 3120 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;





                                                  ;
                                                 ;

      if (__first == __middle || __middle == __last)
 return;

      _DistanceType __len1 = std::distance(__first, __middle);
      _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1, __len2);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()));
    }
# 3175 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;






                                                               ;
                                                              ;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1,
        __len2, __comp);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()),
         __comp);
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = (*__first2);
       ++__first2;
     }
   else
     {
       *__result = (*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));


    }


  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = (*__first2);
       ++__first2;
     }
   else
     {
       *__result = (*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));


    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result,
        _Distance __step_size)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step, __result);
   __first += __two_step;
 }

      __step_size = std::min(_Distance(__last - __first), __step_size);
      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result);
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first,__first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer, __step_size);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle,
          __buffer, __buffer_size);
   std::__stable_sort_adaptive(__middle, __last,
          __buffer, __buffer_size);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer);
   std::__merge_sort_with_buffer(__middle, __last, __buffer);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size);
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle);
      std::__inplace_stable_sort(__middle, __last);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 3513 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;






                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first2 < *__first1)
   return false;
 else if(*__first1 < *__first2)
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3562 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 3581 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first2, *__first1))
   return false;
 else if(__comp(*__first1, *__first2))
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3617 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__i < *__ii)
     {
       _BidirectionalIterator __j = __last;
       while (!(*__i < *--__j))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3674 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__i, *__ii))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*__i, *--__j)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3730 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__ii < *__i)
     {
       _BidirectionalIterator __j = __last;
       while (!(*--__j < *__i))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3787 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__ii, *__i))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*--__j, *__i)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3847 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {






                                                     ;

      for (; __first != __last; ++__first, ++__result)
 if (*__first == __old_value)
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3884 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {






                                                     ;

      for (; __first != __last; ++__first, ++__result)
 if (__pred(*__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 4371 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {


                                                     ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return (__f);
    }
# 4392 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {




                                                     ;
      return std::__find(__first, __last, __val,
           std::__iterator_category(__first));
    }
# 4416 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {




                                                     ;
      return std::__find_if(__first, __last, __pred,
       std::__iterator_category(__first));
    }
# 4445 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 4484 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 4516 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (*__first == *__next)
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4548 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {





                                                     ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (__binary_pred(*__first, *__next))
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4580 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {




                                                     ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (*__first == __value)
   ++__n;
      return __n;
    }
# 4605 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {




                                                     ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(*__first))
   ++__n;
      return __n;
    }
# 4645 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::find(__first1, __last1, *__first2);


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 = std::find(__first1, __last1, *__first2);
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (*__current == *__p)
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4716 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {






                                                       ;
                                                       ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   return __first1;
 }


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(*__current, *__p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4790 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {




                                                     ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 return std::find(__first, __last, __val);
      return std::__search_n(__first, __last, __count, __val,
        std::__iterator_category(__first));
    }
# 4826 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {




                                                     ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 {
   while (__first != __last && !bool(__binary_pred(*__first, __val)))
     ++__first;
   return __first;
 }
      return std::__search_n(__first, __last, __count, __val, __binary_pred,
        std::__iterator_category(__first));
    }
# 4868 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {





                                                     ;

      for (; __first != __last; ++__first, ++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4904 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {






                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4937 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4969 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 5001 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {




                                                     ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 5032 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {





      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __gen();
      return __first;
    }
# 5069 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {






                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 5108 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {




                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result, __binary_pred,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 5140 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {



                                                     ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   std::iter_swap(__i, __first + (std::rand() % ((__i - __first) + 1)));
    }
# 5168 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,



     _RandomNumberGenerator& __rand)

    {



                                                     ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __rand((__i - __first) + 1));
    }
# 5204 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 5238 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                       ;
                                                      ;

      std::__heap_select(__first, __middle, __last);
      std::sort_heap(__first, __middle);
    }
# 5277 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                       ;
                                                      ;

      std::__heap_select(__first, __middle, __last, __comp);
      std::sort_heap(__first, __middle, __comp);
    }
# 5315 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2);
    }
# 5354 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2, __comp);
    }
# 5392 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                     ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2);
   std::__final_insertion_sort(__first, __last);
 }
    }
# 5428 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                     ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2, __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }
# 5469 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5489 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5532 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5553 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5592 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;





                                                     ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()));
    }
# 5634 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;







                                                     ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 5680 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5701 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first1 < *__first2)
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5747 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5770 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first1, *__first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5814 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5833 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   ++__first1;
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5871 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5892 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   ++__first1;
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5929 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5948 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5990 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6011 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 6048 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6069 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2, std::copy(__first1,
          __last1, __result));
    }
# 6114 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6138 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 6171 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__first < *__result)
   __result = __first;
      return __result;
    }
# 6199 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__first, *__result))
   __result = __first;
      return __result;
    }
# 6227 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__result < *__first)
   __result = __first;
      return __result;
    }
# 6255 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__result, *__first))
   __result = __first;
      return __result;
    }


}
# 63 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 2 3
# 35 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/GR_SVD.h" 2

namespace TooN
{
# 57 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/TooN/GR_SVD.h"
  template<int M, int N = M, class Precision = DefaultPrecision, bool WANT_U = 1, bool WANT_V = 1>
  class GR_SVD
  {
  public:

    template<class Precision2, class Base> GR_SVD(const Matrix<M, N, Precision2, Base> &A);

    static const int BigDim = M>N?M:N;
    static const int SmallDim = M<N?M:N;

    const Matrix<M,N,Precision>& get_U() { if(!WANT_U) return mU;}
    const Matrix<N,N,Precision>& get_V() { if(!WANT_V) return mV;}
    const Vector<N, Precision>& get_diagonal() {return vDiagonal;}

    Precision get_largest_singular_value();
    Precision get_smallest_singular_value();
    int get_smallest_singular_value_index();






    void get_inv_diag(Vector<N>& inv_diag, const Precision condition)
    {
      Precision dMax = get_largest_singular_value();
      for(int i=0; i<N; ++i)
 inv_diag[i] = (vDiagonal[i] * condition > dMax) ?
   static_cast<Precision>(1)/vDiagonal[i] : 0;
    }





    template <int Rows2, int Cols2, typename P2, typename B2>
    Matrix<N,Cols2, typename Internal::MultiplyType<Precision,P2>::type >
    backsub(const Matrix<Rows2,Cols2,P2,B2>& rhs, const Precision condition=1e9)
    {
      Vector<N,Precision> inv_diag;
      get_inv_diag(inv_diag,condition);
      return (get_V() * diagmult(inv_diag, (get_U().T() * rhs)));
    }





    template <int Size, typename P2, typename B2>
    Vector<N, typename Internal::MultiplyType<Precision,P2>::type >
    backsub(const Vector<Size,P2,B2>& rhs, const Precision condition=1e9)
    {
      Vector<N,Precision> inv_diag;
      get_inv_diag(inv_diag,condition);
      return (get_V() * diagmult(inv_diag, (get_U().T() * rhs)));
    }


    Matrix<N,M,Precision> get_pinv(const Precision condition=1e9)
    {
      Vector<N,Precision> inv_diag(N);
      get_inv_diag(inv_diag,condition);
      return diagmult(get_V(),inv_diag) * get_U().T();
    }


    void reorder();

  protected:
    void Bidiagonalize();
    void Accumulate_RHS();
    void Accumulate_LHS();
    void Diagonalize();
    bool Diagonalize_SubLoop(int k, Precision &z);

    Vector<N,Precision> vDiagonal;
    Vector<BigDim, Precision> vOffDiagonal;
    Matrix<M, N, Precision> mU;
    Matrix<N, N, Precision> mV;

    int nError;
    int nIterations;
    Precision anorm;
  };



  template<int M, int N, class Precision, bool WANT_U, bool WANT_V>
  template<class Precision2, class Base>
  GR_SVD<M, N, Precision, WANT_U, WANT_V>::GR_SVD(const Matrix<M, N, Precision2, Base> &mA)
  {
    nError = 0;
    mU = mA;
    Bidiagonalize();
    Accumulate_RHS();
    Accumulate_LHS();
    Diagonalize();
  };

  template<int M, int N, class Precision, bool WANT_U, bool WANT_V>
  void GR_SVD<M,N,Precision, WANT_U, WANT_V>::Bidiagonalize()
  {
    using std::abs;
    using std::max;
    using std::sqrt;

    Precision g = 0.0;
    Precision scale = 0.0;
    anorm = 0.0;
    for(int i=0; i<N; ++i)
      {
 const int l = i+1;
 vOffDiagonal[i] = scale * g;
 g = 0.0;
 Precision s = 0.0;
 scale = 0.0;
 if( i < M )
   {
     for(int k=i; k<M; ++k)
       scale += abs(mU[k][i]);
     if(scale != 0.0)
       {
  for(int k=i; k<M; ++k)
    {
      mU[k][i] /= scale;
      s += mU[k][i] * mU[k][i];
    }
  Precision f = mU[i][i];
  g = -(f>=0?sqrt(s):-sqrt(s));
  Precision h = f * g - s;
  mU[i][i] = f - g;
  if(i!=(N-1))
    {
      for(int j=l; j<N; ++j)
        {
   s = 0.0;
   for(int k=i; k<M; ++k)
     s += mU[k][i] * mU[k][j];
   f = s / h;
   for(int k=i; k<M; ++k)
     mU[k][j] += f * mU[k][i];
        }
    }
  for(int k=i; k<M; ++k)
    mU[k][i] *= scale;
       }
   }
 vDiagonal[i] = scale * g;
 g = 0.0;
 s = 0.0;
 scale = 0.0;
 if(!(i >= M || i == (N-1)))
   {
     for(int k=l; k<N; ++k)
       scale += abs(mU[i][k]);
     if(scale != 0.0)
       {
  for(int k=l; k<N; k++)
    {
      mU[i][k] /= scale;
      s += mU[i][k] * mU[i][k];
    }
  Precision f = mU[i][l];
  g = -(f>=0?sqrt(s):-sqrt(s));
  Precision h = f * g - s;
  mU[i][l] = f - g;
  for(int k=l; k<N; ++k)
    vOffDiagonal[k] = mU[i][k] / h;
  if(i != (M-1))
    {
      for(int j=l; j<M; ++j)
        {
   s = 0.0;
   for(int k=l; k<N; ++k)
     s += mU[j][k] * mU[i][k];
   for(int k=l; k<N; ++k)
     mU[j][k] += s * vOffDiagonal[k];
        }
    }
  for(int k=l; k<N; ++k)
    mU[i][k] *= scale;
       }
   }
 anorm = max(anorm, abs(vDiagonal[i]) + abs(vOffDiagonal[i]));
      }


  }

  template<int M, int N, class Precision, bool WANT_U, bool WANT_V>
  void GR_SVD<M,N,Precision,WANT_U,WANT_V>::Accumulate_RHS()
  {



    mV[N-1][N-1] = static_cast<Precision>(1);
    Precision g = vOffDiagonal[N-1];


    for(int i=N-2; i>=0; --i)
      {
 const int l = i + 1;
 if( g!=0)
   {
     for(int j=l; j<N; ++j)
       mV[j][i] = (mU[i][j] / mU[i][l]) / g;
     for(int j=l; j<N; ++j)
       {
  Precision s = 0;
  for(int k=l; k<N; ++k)
    s += mU[i][k] * mV[k][j];
  for(int k=l; k<N; ++k)
    mV[k][j] += s * mV[k][i];
       }
   }
 for(int j=l; j<N; ++j)
   mV[i][j] = mV[j][i] = 0;
 mV[i][i] = static_cast<Precision>(1);
 g = vOffDiagonal[i];
      }
  }

  template<int M, int N, class Precision, bool WANT_U, bool WANT_V>
  void GR_SVD<M,N,Precision,WANT_U,WANT_V>::Accumulate_LHS()
  {


    for(int i=SmallDim-1; i>=0; --i)
      {
 const int l = i+1;
 Precision g = vDiagonal[i];

 if(i != (N-1))
   for(int j=l; j<N; ++j)
     mU[i][j] = 0.0;
 if(g == 0.0)
   for(int j=i; j<M; ++j)
     mU[j][i] = 0.0;
 else
   {

     Precision inv_g = static_cast<Precision>(1) / g;
     if(i != (SmallDim-1))
       {
  for(int j=l; j<N; ++j)
    {
      Precision s = 0;
      for(int k=l; k<M; ++k)
        s += mU[k][i] * mU[k][j];
      Precision f = (s / mU[i][i]) * inv_g;
      for(int k=i; k<M; ++k)
        mU[k][j] += f * mU[k][i];
    }
       }
     for(int j=i; j<M; ++j)
       mU[j][i] *= inv_g;
   }
 mU[i][i] += static_cast<Precision>(1);
      }
  }

  template<int M, int N, class Precision,bool WANT_U, bool WANT_V>
  void GR_SVD<M,N,Precision,WANT_U,WANT_V>::Diagonalize()
  {

    for(int k=N-1; k>=0; --k)
      {
 nIterations = 0;
 Precision z;
 bool bConverged_Or_Error = false;
 do
   bConverged_Or_Error = Diagonalize_SubLoop(k, z);
 while(!bConverged_Or_Error);

 if(nError)
   return;

 if(z < 0)
   {
     vDiagonal[k] = -z;
     if(WANT_V)
       for(int j=0; j<N; ++j)
  mV[j][k] = -mV[j][k];
   }
      }
  };


  template<int M, int N, class Precision, bool WANT_U, bool WANT_V>
  bool GR_SVD<M,N,Precision,WANT_U, WANT_V>::Diagonalize_SubLoop(int k, Precision &z)
  {
    using std::abs;
    using std::sqrt;
    const int k1 = k-1;

    for(int l=k; l>=0; --l)
      {
 const int l1 = l-1;
 if((abs(vOffDiagonal[l]) + anorm) == anorm)
  goto line_565;
 if((abs(vDiagonal[l1]) + anorm) == anorm)
  goto line_540;
 continue;

 line_540:
   {
     Precision c = 0;
     Precision s = 1.0;
     for(int i=l; i<=k; ++i)
       {
  Precision f = s * vOffDiagonal[i];
  vOffDiagonal[i] *= c;
  if((abs(f) + anorm) == anorm)
    break;
  Precision g = vDiagonal[i];
  Precision h = sqrt(f * f + g * g);
  vDiagonal[i] = h;
  c = g / h;
  s = -f / h;
  if(WANT_U)
    for(int j=0; j<M; ++j)
      {
        Precision y = mU[j][l1];
        Precision z = mU[j][i];
        mU[j][l1] = y*c + z*s;
        mU[j][i] = -y*s + z*c;
      }
       }
   }

 line_565:
   {

     z = vDiagonal[k];
     if(l == k)
       return true;
     if(nIterations == 30)
       {
  nError = k;
  return true;
       }
     ++nIterations;
     Precision x = vDiagonal[l];
     Precision y = vDiagonal[k1];
     Precision g = vOffDiagonal[k1];
     Precision h = vOffDiagonal[k];
     Precision f = ((y-z)*(y+z) + (g-h)*(g+h)) / (2.0*h*y);
     g = sqrt(f*f + 1.0);
     Precision signed_g = (f>=0)?g:-g;
     f = ((x-z)*(x+z) + h*(y/(f + signed_g) - h)) / x;


     Precision c = 1.0;
     Precision s = 1.0;
     for(int i1 = l; i1<=k1; ++i1)
       {
  const int i=i1+1;
  g = vOffDiagonal[i];
  y = vDiagonal[i];
  h = s*g;
  g = c*g;
  z = sqrt(f*f + h*h);
  vOffDiagonal[i1] = z;
  c = f/z;
  s = h/z;
  f = x*c + g*s;
  g = -x*s + g*c;
  h = y*s;
  y *= c;
  if(WANT_V)
    for(int j=0; j<N; ++j)
      {
        Precision xx = mV[j][i1];
        Precision zz = mV[j][i];
        mV[j][i1] = xx*c + zz*s;
        mV[j][i] = -xx*s + zz*c;
      }
  z = sqrt(f*f + h*h);
  vDiagonal[i1] = z;
  if(z!=0)
    {
      c = f/z;
      s = h/z;
    }
  f = c*g + s*y;
  x = -s*g + c*y;
  if(WANT_U)
    for(int j=0; j<M; ++j)
      {
        Precision yy = mU[j][i1];
        Precision zz = mU[j][i];
        mU[j][i1] = yy*c + zz*s;
        mU[j][i] = -yy*s + zz*c;
      }
       }
     vOffDiagonal[l] = 0;
     vOffDiagonal[k] = f;
     vDiagonal[k] = x;
     return false;

   }
      }



  }


  template<int M, int N, class Precision, bool WANT_U, bool WANT_V>
  Precision GR_SVD<M,N,Precision,WANT_U,WANT_V>::get_largest_singular_value()
  {
    using std::max;
    Precision d = vDiagonal[0];
    for(int i=1; i<N; ++i) d = max(d, vDiagonal[i]);
    return d;
  }

  template<int M, int N, class Precision, bool WANT_U, bool WANT_V>
  Precision GR_SVD<M,N,Precision,WANT_U,WANT_V>::get_smallest_singular_value()
  {
    using std::min;
    Precision d = vDiagonal[0];
    for(int i=1; i<N; ++i) d = min(d, vDiagonal[i]);
    return d;
  }

  template<int M, int N, class Precision, bool WANT_U, bool WANT_V>
  int GR_SVD<M,N,Precision,WANT_U,WANT_V>::get_smallest_singular_value_index()
  {
    using std::min;
    int nMin=0;
    Precision d = vDiagonal[0];
    for(int i=1; i<N; ++i)
      if(vDiagonal[i] < d)
 {
   d = vDiagonal[i];
   nMin = i;
 }
    return nMin;
  }

  template<int M, int N, class Precision, bool WANT_U, bool WANT_V>
  void GR_SVD<M,N,Precision,WANT_U,WANT_V>::reorder()
  {
    std::vector<std::pair<Precision, unsigned int> > vSort;
    vSort.reserve(N);
    for(unsigned int i=0; i<N; ++i)
      vSort.push_back(std::make_pair(-vDiagonal[i], i));
    std::sort(vSort.begin(), vSort.end());
    for(unsigned int i=0; i<N; ++i)
      vDiagonal[i] = -vSort[i].first;
    if(WANT_U)
      {
 Matrix<M, N, Precision> mU_copy = mU;
 for(unsigned int i=0; i<N; ++i)
   mU.T()[i] = mU_copy.T()[vSort[i].second];
      }
    if(WANT_V)
      {
 Matrix<N, N, Precision> mV_copy = mV;
 for(unsigned int i=0; i<N; ++i)
   mV.T()[i] = mV_copy.T()[vSort[i].second];
      }
  }

}
# 46 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h" 2






inline
bool is_file(std::string path) {
 struct stat buf;
 stat(path.c_str(), &buf);
 return ((((buf.st_mode)) & 0170000) == (0100000));
}

template<typename T>
std::string NumberToString(T Number, int width = 6) {
 std::ostringstream ss;
 ss << std::setfill('0') << std::setw(width) << Number;
 return ss.str();
}

template<typename T>
void read_input(std::string inputfile, T * in) {
 size_t isize;
 std::ifstream file(inputfile.c_str(),
   std::ios::in | std::ios::binary | std::ios::ate);
 if (file.is_open()) {
  isize = file.tellg();
  file.seekg(0, std::ios::beg);
  file.read((char*) in, isize);
  file.close();
 } else {
  std::cout << "File opening failed : " << inputfile << std::endl;
  exit(1);
 }
}

inline float sq(float r) {
 return r * r;
}

inline uchar4 gs2rgb(double h) {
 uchar4 rgb;
 double v;
 double r, g, b;
 v = 0.75;
 if (v > 0) {
  double m;
  double sv;
  int sextant;
  double fract, vsf, mid1, mid2;
  m = 0.25;
  sv = 0.6667;
  h *= 6.0;
  sextant = (int) h;
  fract = h - sextant;
  vsf = v * sv * fract;
  mid1 = m + vsf;
  mid2 = v - vsf;
  switch (sextant) {
  case 0:
   r = v;
   g = mid1;
   b = m;
   break;
  case 1:
   r = mid2;
   g = v;
   b = m;
   break;
  case 2:
   r = m;
   g = v;
   b = mid1;
   break;
  case 3:
   r = m;
   g = mid2;
   b = v;
   break;
  case 4:
   r = mid1;
   g = m;
   b = v;
   break;
  case 5:
   r = v;
   g = m;
   b = mid2;
   break;
  default:
   r = 0;
   g = 0;
   b = 0;
   break;
  }
 }
 rgb.x = r * 255;
 rgb.y = g * 255;
 rgb.z = b * 255;
 rgb.w = 0;
 return rgb;
}

struct Volume {
 uint3 size;
 float3 dim;
 short2 * data;

 Volume() {
  size = make_uint3(0);
  dim = make_float3(1);
  data = __null;
 }

 float2 operator[](const uint3 & pos) const {
  const short2 d = data[pos.x + pos.y * size.x + pos.z * size.x * size.y];
  return make_float2(d.x * 0.00003051944088f, d.y);
 }

 float v(const uint3 & pos) const {
  return operator[](pos).x;
 }

 float vs(const uint3 & pos) const {
  return data[pos.x + pos.y * size.x + pos.z * size.x * size.y].x;
 }
 inline float vs2(const uint x, const uint y, const uint z) const {
  return data[x + y * size.x + z * size.x * size.y].x;
 }

 void setints(const unsigned x, const unsigned y, const unsigned z,
   const float2 &d) {
  data[x + y * size.x + z * size.x * size.y] = make_short2(d.x * 32766.0f,
    d.y);
 }

 void set(const uint3 & pos, const float2 & d) {
  data[pos.x + pos.y * size.x + pos.z * size.x * size.y] = make_short2(
    d.x * 32766.0f, d.y);
 }
 float3 pos(const uint3 & p) const {
  return make_float3((p.x + 0.5f) * dim.x / size.x,
    (p.y + 0.5f) * dim.y / size.y, (p.z + 0.5f) * dim.z / size.z);
 }

 float interp(const float3 & pos) const {

  const float3 scaled_pos = make_float3((pos.x * size.x / dim.x) - 0.5f,
    (pos.y * size.y / dim.y) - 0.5f,
    (pos.z * size.z / dim.z) - 0.5f);
  const int3 base = make_int3(floorf(scaled_pos));
  const float3 factor = fracf(scaled_pos);
  const int3 lower = max(base, make_int3(0));
  const int3 upper = min(base + make_int3(1),
    make_int3(size) - make_int3(1));
  return (((vs2(lower.x, lower.y, lower.z) * (1 - factor.x)
    + vs2(upper.x, lower.y, lower.z) * factor.x) * (1 - factor.y)
    + (vs2(lower.x, upper.y, lower.z) * (1 - factor.x)
      + vs2(upper.x, upper.y, lower.z) * factor.x) * factor.y)
    * (1 - factor.z)
    + ((vs2(lower.x, lower.y, upper.z) * (1 - factor.x)
      + vs2(upper.x, lower.y, upper.z) * factor.x)
      * (1 - factor.y)
      + (vs2(lower.x, upper.y, upper.z) * (1 - factor.x)
        + vs2(upper.x, upper.y, upper.z) * factor.x)
        * factor.y) * factor.z) * 0.00003051944088f;

 }

 float3 grad(const float3 & pos) const {
  const float3 scaled_pos = make_float3((pos.x * size.x / dim.x) - 0.5f,
    (pos.y * size.y / dim.y) - 0.5f,
    (pos.z * size.z / dim.z) - 0.5f);
  const int3 base = make_int3(floorf(scaled_pos));
  const float3 factor = fracf(scaled_pos);
  const int3 lower_lower = max(base - make_int3(1), make_int3(0));
  const int3 lower_upper = max(base, make_int3(0));
  const int3 upper_lower = min(base + make_int3(1),
    make_int3(size) - make_int3(1));
  const int3 upper_upper = min(base + make_int3(2),
    make_int3(size) - make_int3(1));
  const int3 & lower = lower_upper;
  const int3 & upper = upper_lower;

  float3 gradient;

  gradient.x = (((vs2(upper_lower.x, lower.y, lower.z)
    - vs2(lower_lower.x, lower.y, lower.z)) * (1 - factor.x)
    + (vs2(upper_upper.x, lower.y, lower.z)
      - vs2(lower_upper.x, lower.y, lower.z)) * factor.x)
    * (1 - factor.y)
    + ((vs2(upper_lower.x, upper.y, lower.z)
      - vs2(lower_lower.x, upper.y, lower.z)) * (1 - factor.x)
      + (vs2(upper_upper.x, upper.y, lower.z)
        - vs2(lower_upper.x, upper.y, lower.z))
        * factor.x) * factor.y) * (1 - factor.z)
    + (((vs2(upper_lower.x, lower.y, upper.z)
      - vs2(lower_lower.x, lower.y, upper.z)) * (1 - factor.x)
      + (vs2(upper_upper.x, lower.y, upper.z)
        - vs2(lower_upper.x, lower.y, upper.z))
        * factor.x) * (1 - factor.y)
      + ((vs2(upper_lower.x, upper.y, upper.z)
        - vs2(lower_lower.x, upper.y, upper.z))
        * (1 - factor.x)
        + (vs2(upper_upper.x, upper.y, upper.z)
          - vs2(lower_upper.x, upper.y, upper.z))
          * factor.x) * factor.y) * factor.z;

  gradient.y = (((vs2(lower.x, upper_lower.y, lower.z)
    - vs2(lower.x, lower_lower.y, lower.z)) * (1 - factor.x)
    + (vs2(upper.x, upper_lower.y, lower.z)
      - vs2(upper.x, lower_lower.y, lower.z)) * factor.x)
    * (1 - factor.y)
    + ((vs2(lower.x, upper_upper.y, lower.z)
      - vs2(lower.x, lower_upper.y, lower.z)) * (1 - factor.x)
      + (vs2(upper.x, upper_upper.y, lower.z)
        - vs2(upper.x, lower_upper.y, lower.z))
        * factor.x) * factor.y) * (1 - factor.z)
    + (((vs2(lower.x, upper_lower.y, upper.z)
      - vs2(lower.x, lower_lower.y, upper.z)) * (1 - factor.x)
      + (vs2(upper.x, upper_lower.y, upper.z)
        - vs2(upper.x, lower_lower.y, upper.z))
        * factor.x) * (1 - factor.y)
      + ((vs2(lower.x, upper_upper.y, upper.z)
        - vs2(lower.x, lower_upper.y, upper.z))
        * (1 - factor.x)
        + (vs2(upper.x, upper_upper.y, upper.z)
          - vs2(upper.x, lower_upper.y, upper.z))
          * factor.x) * factor.y) * factor.z;

  gradient.z = (((vs2(lower.x, lower.y, upper_lower.z)
    - vs2(lower.x, lower.y, lower_lower.z)) * (1 - factor.x)
    + (vs2(upper.x, lower.y, upper_lower.z)
      - vs2(upper.x, lower.y, lower_lower.z)) * factor.x)
    * (1 - factor.y)
    + ((vs2(lower.x, upper.y, upper_lower.z)
      - vs2(lower.x, upper.y, lower_lower.z)) * (1 - factor.x)
      + (vs2(upper.x, upper.y, upper_lower.z)
        - vs2(upper.x, upper.y, lower_lower.z))
        * factor.x) * factor.y) * (1 - factor.z)
    + (((vs2(lower.x, lower.y, upper_upper.z)
      - vs2(lower.x, lower.y, lower_upper.z)) * (1 - factor.x)
      + (vs2(upper.x, lower.y, upper_upper.z)
        - vs2(upper.x, lower.y, lower_upper.z))
        * factor.x) * (1 - factor.y)
      + ((vs2(lower.x, upper.y, upper_upper.z)
        - vs2(lower.x, upper.y, lower_upper.z))
        * (1 - factor.x)
        + (vs2(upper.x, upper.y, upper_upper.z)
          - vs2(upper.x, upper.y, lower_upper.z))
          * factor.x) * factor.y) * factor.z;

  return gradient
    * make_float3(dim.x / size.x, dim.y / size.y, dim.z / size.z)
    * (0.5f * 0.00003051944088f);
 }

 void init(uint3 s, float3 d) {
  size = s;
  dim = d;
  data = (short2 *) malloc(size.x * size.y * size.z * sizeof(short2));
  ((data != __null) ? static_cast<void> (0) : __assert_fail ("data != NULL", "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/commons.h", 307, __PRETTY_FUNCTION__));

 }

 void release() {
  free(data);
  data = __null;
 }
};

typedef struct sMatrix4 {
 float4 data[4];
} Matrix4;

inline float3 get_translation(const Matrix4 view) {
 return make_float3(view.data[0].w, view.data[1].w, view.data[2].w);
}

struct TrackData {
 int result;
 float error;
 float J[6];
};

inline float3 operator*(const Matrix4 & M,
  const float3 & v) {
 return make_float3(dot(make_float3(M.data[0]), v) + M.data[0].w,
   dot(make_float3(M.data[1]), v) + M.data[1].w,
   dot(make_float3(M.data[2]), v) + M.data[2].w);
}

inline float3 rotate(const Matrix4 & M, const float3 & v) {
 return make_float3(dot(make_float3(M.data[0]), v),
   dot(make_float3(M.data[1]), v), dot(make_float3(M.data[2]), v));
}

inline Matrix4 getCameraMatrix(const float4 & k) {
 Matrix4 K;
 K.data[0] = make_float4(k.x, 0, k.z, 0);
 K.data[1] = make_float4(0, k.y, k.w, 0);
 K.data[2] = make_float4(0, 0, 1, 0);
 K.data[3] = make_float4(0, 0, 0, 1);
 return K;
}

inline Matrix4 getInverseCameraMatrix(const float4 & k) {
 Matrix4 invK;
 invK.data[0] = make_float4(1.0f / k.x, 0, -k.z / k.x, 0);
 invK.data[1] = make_float4(0, 1.0f / k.y, -k.w / k.y, 0);
 invK.data[2] = make_float4(0, 0, 1, 0);
 invK.data[3] = make_float4(0, 0, 0, 1);
 return invK;
}
inline float4 operator*(const Matrix4 & M, const float4 & v) {
 return make_float4(dot(M.data[0], v), dot(M.data[1], v), dot(M.data[2], v),
   dot(M.data[3], v));
}

inline Matrix4 inverse(const Matrix4 & A) {
 static TooN::Matrix<4, 4, float> I = TooN::Identity;
 TooN::Matrix<4, 4, float> temp = TooN::wrapMatrix<4, 4>(&A.data[0].x);
 Matrix4 R;
 TooN::wrapMatrix<4, 4>(&R.data[0].x) = TooN::gaussian_elimination(temp, I);
 return R;
}

inline Matrix4 operator*(const Matrix4 & A, const Matrix4 & B) {
 Matrix4 R;
 TooN::wrapMatrix<4, 4>(&R.data[0].x) = TooN::wrapMatrix<4, 4>(&A.data[0].x)
   * TooN::wrapMatrix<4, 4>(&B.data[0].x);
 return R;
}

template<typename P, typename A>
TooN::Matrix<6> makeJTJ(const TooN::Vector<21, P, A> & v) {
 TooN::Matrix<6> C = TooN::Zeros;
 C[0] = v.template slice<0, 6>();
 C[1].template slice<1, 5>() = v.template slice<6, 5>();
 C[2].template slice<2, 4>() = v.template slice<11, 4>();
 C[3].template slice<3, 3>() = v.template slice<15, 3>();
 C[4].template slice<4, 2>() = v.template slice<18, 2>();
 C[5][5] = v[20];

 for (int r = 1; r < 6; ++r)
  for (int c = 0; c < r; ++c)
   C[r][c] = C[c][r];

 return C;
}

template<typename T, typename A>
TooN::Vector<6> solve(const TooN::Vector<27, T, A> & vals) {
 const TooN::Vector<6> b = vals.template slice<0, 6>();
 const TooN::Matrix<6> C = makeJTJ(vals.template slice<6, 21>());

 TooN::GR_SVD<6, 6> svd(C);
 return svd.backsub(b, 1e6);
}

template<typename P>
inline Matrix4 toMatrix4(const TooN::SE3<P> & p) {
 const TooN::Matrix<4, 4, float> I = TooN::Identity;
 Matrix4 R;
 TooN::wrapMatrix<4, 4>(&R.data[0].x) = p * I;
 return R;
}

static const float epsilon = 0.0000001;

inline void compareTrackData(std::string str, TrackData* l, TrackData * r,
  uint size) {
 for (unsigned int i = 0; i < size; i++) {
  if (std::abs(l[i].error - r[i].error) > epsilon) {
   std::cout << "Error into " << str << " at " << i << std::endl;
   std::cout << "l.error =  " << l[i].error << std::endl;
   std::cout << "r.error =  " << r[i].error << std::endl;
  }

  if (std::abs(l[i].result - r[i].result) > epsilon) {
   std::cout << "Error into " << str << " at " << i << std::endl;
   std::cout << "l.result =  " << l[i].result << std::endl;
   std::cout << "r.result =  " << r[i].result << std::endl;
  }

 }
}

inline void compareFloat(std::string str, float* l, float * r, uint size) {
 for (unsigned int i = 0; i < size; i++) {
  if (std::abs(l[i] - r[i]) > epsilon) {
   std::cout << "Error into " << str << " at " << i << std::endl;
   std::cout << "l =  " << l[i] << std::endl;
   std::cout << "r =  " << r[i] << std::endl;
  }
 }
}
inline void compareFloat3(std::string str, float3* l, float3 * r, uint size) {
 for (unsigned int i = 0; i < size; i++) {
  if (std::abs(l[i].x - r[i].x) > epsilon) {
   std::cout << "Error into " << str << " at " << i << std::endl;
   std::cout << "l.x =  " << l[i].x << std::endl;
   std::cout << "r.x =  " << r[i].x << std::endl;
  }
  if (std::abs(l[i].y - r[i].y) > epsilon) {
   std::cout << "Error into " << str << " at " << i << std::endl;
   std::cout << "l.y =  " << l[i].y << std::endl;
   std::cout << "r.y =  " << r[i].y << std::endl;
  }
  if (std::abs(l[i].z - r[i].z) > epsilon) {
   std::cout << "Error into " << str << " at " << i << std::endl;
   std::cout << "l.z =  " << l[i].z << std::endl;
   std::cout << "r.z =  " << r[i].z << std::endl;
  }
 }
}

inline void compareFloat4(std::string str, float4* l, float4 * r, uint size) {
 for (unsigned int i = 0; i < size; i++) {
  if (std::abs(l[i].x - r[i].x) > epsilon) {
   std::cout << "Error into " << str << " at " << i << std::endl;
   std::cout << "l.x =  " << l[i].x << std::endl;
   std::cout << "r.x =  " << r[i].x << std::endl;
  }
  if (std::abs(l[i].y - r[i].y) > epsilon) {
   std::cout << "Error into " << str << " at " << i << std::endl;
   std::cout << "l.y =  " << l[i].y << std::endl;
   std::cout << "r.y =  " << r[i].y << std::endl;
  }
  if (std::abs(l[i].z - r[i].z) > epsilon) {
   std::cout << "Error into " << str << " at " << i << std::endl;
   std::cout << "l.z =  " << l[i].z << std::endl;
   std::cout << "r.z =  " << r[i].z << std::endl;
  }
  if (std::abs(l[i].w - r[i].w) > epsilon) {
   std::cout << "Error into " << str << " at " << i << std::endl;
   std::cout << "l.w =  " << l[i].w << std::endl;
   std::cout << "r.w =  " << r[i].w << std::endl;
  }
 }
}

inline void compareMatrix4(std::string str, Matrix4 l, Matrix4 r) {
 compareFloat4(str, l.data, r.data, 4);
}

inline void printMatrix4(std::string str, Matrix4 l) {
 std::cout << "printMatrix4 : " << str << std::endl;
 for (int i = 0; i < 4; i++) {
  std::cout << "  [" << l.data[i].x << "," << l.data[i].y << ","
    << l.data[i].z << "," << l.data[i].w << "]" << std::endl;
 }
}
inline void compareNormal(std::string str, float3* l, float3 * r, uint size) {
 for (unsigned int i = 0; i < size; i++) {
  if (std::abs(l[i].x - r[i].x) > epsilon) {
   std::cout << "Error into " << str << " at " << i << std::endl;
   std::cout << "l.x =  " << l[i].x << std::endl;
   std::cout << "r.x =  " << r[i].x << std::endl;
  } else if (r[i].x != -2) {
   if (std::abs(l[i].y - r[i].y) > epsilon) {
    std::cout << "Error into " << str << " at " << i << std::endl;
    std::cout << "l.y =  " << l[i].y << std::endl;
    std::cout << "r.y =  " << r[i].y << std::endl;
   }
   if (std::abs(l[i].z - r[i].z) > epsilon) {
    std::cout << "Error into " << str << " at " << i << std::endl;
    std::cout << "l.z =  " << l[i].z << std::endl;
    std::cout << "r.z =  " << r[i].z << std::endl;
   }
  }
 }
}

template<typename T>
void writefile(std::string prefix, int idx, T * data, uint size) {

 std::string filename = prefix + NumberToString(idx);
 FILE* pFile = fopen(filename.c_str(), "wb");

 if (!pFile) {
  std::cout << "File opening failed : " << filename << std::endl;
  exit(1);
 }

 size_t write_cnt = fwrite(data, sizeof(T), size, pFile);

 std::cout << "File " << filename << " of size " << write_cnt << std::endl;

 fclose(pFile);
}

template<typename T>
void writefile(std::string prefix, int idx, T * data, uint2 size) {
 writefile(prefix, idx, data, size.x * size.y);
}
inline
void writeposfile(std::string prefix, int idx, Matrix4 m, uint) {

 writefile("BINARY_" + prefix, idx, m.data, 4);

 std::string filename = prefix + NumberToString(idx);
 std::ofstream pFile;
 pFile.open(filename.c_str());

 if (pFile.fail()) {
  std::cout << "File opening failed : " << filename << std::endl;
  exit(1);
 }

 pFile << m.data[0].x << " " << m.data[0].y << " " << m.data[0].z << " "
   << m.data[0].w << std::endl;
 pFile << m.data[1].x << " " << m.data[1].y << " " << m.data[1].z << " "
   << m.data[1].w << std::endl;
 pFile << m.data[2].x << " " << m.data[2].y << " " << m.data[2].z << " "
   << m.data[2].w << std::endl;
 pFile << m.data[3].x << " " << m.data[3].y << " " << m.data[3].z << " "
   << m.data[3].w << std::endl;

 std::cout << "Pose File " << filename << std::endl;

 pFile.close();
}
inline
void writeVolume(std::string filename, Volume v) {

 std::ofstream fDumpFile;
 fDumpFile.open(filename.c_str(), std::ios::out | std::ios::binary);
 if (fDumpFile.fail()) {
  std::cout << "Error opening file: " << filename << std::endl;
  exit(1);
 }


 short2 *hostData = (short2 *) v.data;


 for (unsigned int i = 0; i < v.size.x * v.size.y * v.size.z; i++) {
  fDumpFile.write((char *) (hostData + i), sizeof(short));
 }

 fDumpFile.close();
}
# 15 "/home/pastoikos/Documents/bilateralFilterKernel_HLS/include/kernels.h" 2



void initVolumeKernel(Volume volume);

void bilateralFilterKernel(float* out, const float* in, uint2 inSize,
  const float * gaussian, float e_d, int r);

void depth2vertexKernel(float3* vertex, const float * depth, uint2 imageSize,
  const Matrix4 invK);

void reduceKernel(float * out, TrackData* J, const uint2 Jsize,
  const uint2 size);

void trackKernel(TrackData* output, const float3* inVertex,
  const float3* inNormal, uint2 inSize, const float3* refVertex,
  const float3* refNormal, uint2 refSize, const Matrix4 Ttrack,
  const Matrix4 view, const float dist_threshold,
  const float normal_threshold);

void vertex2normalKernel(float3 * out, const float3 * in, uint2 imageSize);

void mm2metersKernel(float * out, uint2 outSize, const ushort * in,
  uint2 inSize);

void halfSampleRobustImageKernel(float* out, const float* in, uint2 imageSize,
  const float e_d, const int r);

bool updatePoseKernel(Matrix4 & pose, const float * output,
  float icp_threshold);

bool checkPoseKernel(Matrix4 & pose, Matrix4 oldPose, const float * output,
  uint2 imageSize, float track_threshold);

void integrateKernel(Volume vol, const float* depth, uint2 imageSize,
  const Matrix4 invTrack, const Matrix4 K, const float mu,
  const float maxweight);

void raycastKernel(float3* vertex, float3* normal, uint2 inputSize,
  const Volume integration, const Matrix4 view, const float nearPlane,
  const float farPlane, const float step, const float largestep);



void renderDepthKernel(uchar4* out, float * depth, uint2 depthSize,
  const float nearPlane, const float farPlane);

void renderNormaKernell(uchar3* out, const float3* normal, uint2 normalSize);

void renderTrackKernel(uchar4* out, const TrackData* data, uint2 outSize);

void renderVolumeKernel(uchar4* out, const uint2 depthSize, const Volume volume,
  const Matrix4 view, const float nearPlane, const float farPlane,
  const float step, const float largestep, const float3 light,
  const float3 ambient);


void computeFrame(Volume & integration, float3 * vertex, float3 * normal,
  TrackData * trackingResult, Matrix4 & pose, const float * inputDepth,
  const uint2 inputSize, const float * gaussian,
  const std::vector<int> iterations, float4 k, const uint frame);

void init();

void clean();



class Kfusion {
private:
 uint2 computationSize;
 float step;
 Matrix4 pose;
 Matrix4 *viewPose;
 float3 volumeDimensions;
 uint3 volumeResolution;
 std::vector<int> iterations;
 bool _tracked;
 bool _integrated;
 float3 _initPose;

 void raycast(uint frame, const float4& k, float mu);

public:
 Kfusion(uint2 inputSize, uint3 volumeResolution, float3 volumeDimensions,
   float3 initPose, std::vector<int> & pyramid) :
   computationSize(make_uint2(inputSize.x, inputSize.y)) {

  this->_initPose = initPose;
  this->volumeDimensions = volumeDimensions;
  this->volumeResolution = volumeResolution;
  pose = toMatrix4(
    TooN::SE3<float>(
      TooN::makeVector(initPose.x, initPose.y, initPose.z, 0,
        0, 0)));
  this->iterations.clear();
  for (std::vector<int>::iterator it = pyramid.begin();
    it != pyramid.end(); it++) {
   this->iterations.push_back(*it);
  }

  step = min(volumeDimensions) / max(volumeResolution);
  viewPose = &pose;
  this->languageSpecificConstructor();
 }

 Kfusion(uint2 inputSize, uint3 volumeResolution, float3 volumeDimensions,
   Matrix4 initPose, std::vector<int> & pyramid) :
   computationSize(make_uint2(inputSize.x, inputSize.y)) {
  this->_initPose = getPosition();
  this->volumeDimensions = volumeDimensions;
  this->volumeResolution = volumeResolution;
  pose = initPose;

  this->iterations.clear();
  for (std::vector<int>::iterator it = pyramid.begin();
    it != pyramid.end(); it++) {
   this->iterations.push_back(*it);
  }

  step = min(volumeDimensions) / max(volumeResolution);
  viewPose = &pose;
  this->languageSpecificConstructor();
 }

 void languageSpecificConstructor();
 ~Kfusion();

 void reset();
 bool getTracked() {
  return (_tracked);
 }
 bool getIntegrated() {
  return (_integrated);
 }
 float3 getPosition() {


  float xt = pose.data[0].w - _initPose.x;
  float yt = pose.data[1].w - _initPose.y;
  float zt = pose.data[2].w - _initPose.z;
  return (make_float3(xt, yt, zt));
 }
 void computeFrame(const ushort * inputDepth, const uint2 inputSize,
   float4 k, uint integration_rate, uint tracking_rate,
     float icp_threshold, float mu, const uint frame) ;

 bool preprocessing(const ushort * inputDepth, const uint2 inputSize);
 bool tracking(float4 k, float icp_threshold, uint tracking_rate,
   uint frame);
 bool raycasting(float4 k, float mu, uint frame);
 bool integration(float4 k, uint integration_rate, float mu, uint frame);

 void dumpVolume(const char* filename);
 void renderVolume(uchar4 * out, const uint2 outputSize, int frame, int rate,
   float4 k, float mu);
 void renderTrack(uchar4 * out, const uint2 outputSize);
 void renderDepth(uchar4* out, uint2 outputSize);
 Matrix4 getPose() {
  return pose;
 }
 void setViewPose(Matrix4 *value = __null) {
  if (value == __null)
   viewPose = &pose;
  else
   viewPose = value;
 }
 Matrix4 *getViewPose() {
  return (viewPose);
 }
 float3 getModelDimensions() {
  return (volumeDimensions);
 }
 uint3 getModelResolution() {
  return (volumeResolution);
 }
 uint2 getComputationResolution() {
  return (computationSize);
 }

};

void synchroniseDevices();
# 3 "bilateralFilterKernel_HLS/bilateralFilterKernel.cpp" 2
# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4
extern "C" {





# 1 "/tools/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 92 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 106 "/usr/include/string.h" 3 4
extern void *rawmemchr (const void *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 117 "/usr/include/string.h" 3 4
extern void *memrchr (const void *__s, int __c, size_t __n)
      throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));
# 162 "/usr/include/string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 231 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 272 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 337 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 368 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();
# 433 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 484 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 512 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));
# 599 "/usr/include/string.h" 3 4
extern char *basename (const char *__filename) throw () __attribute__ ((__nonnull__ (1)));
# 658 "/usr/include/string.h" 3 4
}
# 4 "bilateralFilterKernel_HLS/bilateralFilterKernel.cpp" 2

inline
float exp1(float x) {
  x = 1.0 + x / 256.0;
  x *= x; x *= x; x *= x; x *= x;
  x *= x; x *= x; x *= x; x *= x;
  return x;
}

void bilateralFilterKernel(float* out, float* pad_depth, uint size_x,uint size_y,
  const float * gaussian, float e_d, int r,int start,int end) {


_ssdm_op_SpecInterface(0, "s_axilite", 0, 0, "", 0, 0, "control", "", "", 0, 0, 0, 0, "", "");
_ssdm_op_SpecInterface(out, "m_axi", 0, 0, "", 0, 0, "out", "slave", "", 16, 16, 256, 256, "", "");
_ssdm_op_SpecInterface(pad_depth, "m_axi", 0, 0, "", 0, 0, "pad_depth", "slave", "", 16, 16, 256, 256, "", "");
_ssdm_op_SpecInterface(gaussian, "m_axi", 0, 0, "", 0, 0, "gaussian", "slave", "", 16, 16, 16, 16, "", "");
_ssdm_op_SpecInterface(size_x, "s_axilite", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
_ssdm_op_SpecInterface(size_y, "s_axilite", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
_ssdm_op_SpecInterface(e_d, "s_axilite", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
_ssdm_op_SpecInterface(r, "s_axilite", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
_ssdm_op_SpecInterface(start, "s_axilite", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
_ssdm_op_SpecInterface(end, "s_axilite", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");

 uint y;
 int depthsize_x=size_x+4;
 float e_d_squared_2 = e_d * e_d * 2;
 float out_array[320];

 float pad_depth_array_1[324];

 float pad_depth_array_2[324];

 float pad_depth_array_3[324];

 float pad_depth_array_4[324];

 float pad_depth_array_5[324];


 float gaussian_array[5];
 memcpy(gaussian_array,gaussian ,5*sizeof(float));



 for (y = start; y < end; y++) {
  uint pos = y * size_x;


  memcpy(pad_depth_array_1,pad_depth+(y*depthsize_x),324*sizeof(float));
  memcpy(pad_depth_array_2,pad_depth+(y*depthsize_x)+(324*1),324*sizeof(float));
  memcpy(pad_depth_array_3,pad_depth+(y*depthsize_x)+(324*2),324*sizeof(float));
  memcpy(pad_depth_array_4,pad_depth+(y*depthsize_x)+(324*3),324*sizeof(float));
  memcpy(pad_depth_array_5,pad_depth+(y*depthsize_x)+(324*4),324*sizeof(float));

  for (uint x = 0; x < 320; x++) {

_ssdm_op_SpecPipeline(1, 1, 1, 0, "");






 float sum = 0.0f;
   float t = 0.0f;


   const float center = pad_depth_array_3[x+2];



   for (int i = -2; i <= 2; ++i) {

     uint2 curPos = make_uint2(x + i+2,0);
     float curPix = pad_depth_array_1[curPos.x];

     if (curPix > 0) {
       float mod = sq(curPix - center);
       float factor = gaussian_array[i+r]
        * gaussian_array[0]
        *expf(-mod / e_d_squared_2);
      t += factor * curPix;
      sum += factor;

     }
      curPos = make_uint2(x + i+2,1);
      curPix = pad_depth_array_2[curPos.x];

     if (curPix > 0) {
       float mod = sq(curPix - center);
       float factor = gaussian_array[i+r]
        * gaussian_array[1]
        *expf(-mod / e_d_squared_2);
      t += factor * curPix;
      sum += factor;

     }
      curPos = make_uint2(x + i+2,2);
      curPix = pad_depth_array_3[curPos.x];

     if (curPix > 0) {
       float mod = sq(curPix - center);
       float factor = gaussian_array[i+r]
        * gaussian_array[2]
        *expf(-mod / e_d_squared_2);
      t += factor * curPix;
      sum += factor;

     }
     curPos = make_uint2(x + i+2,3);
     curPix = pad_depth_array_4[curPos.x];

     if (curPix > 0) {
       float mod = sq(curPix - center);
       float factor = gaussian_array[i+r]
        * gaussian_array[3]
        *expf(-mod / e_d_squared_2);
      t += factor * curPix;
      sum += factor;

     }
      curPos = make_uint2(x + i+2,4);
      curPix = pad_depth_array_5[curPos.x];

     if (curPix > 0) {
       float mod = sq(curPix - center);
       float factor = gaussian_array[i+r]
        * gaussian_array[4]
        *expf(-mod / e_d_squared_2);
      t += factor * curPix;
      sum += factor;

     }

   }

   out_array[x] = t / sum;
  }

  memcpy(out+pos, out_array,size_x*sizeof(float));
 }

}
